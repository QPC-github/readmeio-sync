[
  {
    "__v": 2,
    "_id": "5568d524d33aad0d00ec8ce7",
    "createdAt": "2015-02-13T00:38:47.138Z",
    "from_sync": false,
    "order": 0,
    "pages": [
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce7",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d524d33aad0d00ec8cf4",
        "createdAt": "2015-03-30T22:33:44.222Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 0,
        "body": "Follow these steps to install the SDK.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Each of the following tutorial steps leads to the relevant software download site. Refer to the support section of each site for any installation questions.\"\n}\n[/block]\n---------------------\n\n## 1. Install Node.js\n\nAdaptive.js requires Node.js, which is available for all major platforms including Windows, Mac OS X, and Linux.\n\n[Download Node.js](http://nodejs.org/download/)\n\n---------------------\n\n## 2. Install Git\n\nGit is a version control system that is used to manage Bower dependencies.\n\n[Download Git](http://git-scm.com/downloads)\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Windows users must adjust the PATH variable to allow Git and UNIX tools in the Windows Command Prompt.\"\n}\n[/block]\nNow verify that Git has installed properly.\n\n1. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n1. To check that Git has installed properly, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git --version\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n---------------------\n\n## 3. Install Ruby\n\nBy default, we use Sass as our CSS preprocessor which requires Ruby.  Most Mac OS and Linux distributions come with Ruby already installed.\n\n1\\. Open a new Terminal (Mac) or Command Prompt (Windows) \n\n2\\. To check if your computer has Ruby, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"ruby --version\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n3\\. If the previous command returns an error, download and install Ruby.\n\n[Download Ruby](https://www.ruby-lang.org/en/installation/)\n\n---------------------\n\n## 4. Install Bundler\n\nAfter you install Ruby, install Bundler. Bundler manages Sass dependencies.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Find out more about [Bundler at http://bundler.io](http://bundler.io).\"\n}\n[/block]\n1. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n1. To install Bunder, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"gem install bundler\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nOr if you need administrative privileges, precede the command with `sudo` as follows:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"sudo gem install bundler\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n---------------------\n\n## 5. Install Grunt\n\nGrunt is a JavaScript task runner. It runs Adaptive.js projects.\n\n1. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n1. To install Grunt, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"npm install -g grunt-cli\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nOr if you need administrative privileges, precede the command with `sudo` as follows:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"sudo npm install -g grunt-cli\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n---------------------\n\n## 6. Install the Adaptive.js Framework\n\nThe Adaptive.js framework consists of the scaffold generator, Adaptive.js\nlibraries, and some open source tools.\n\n* To install the Adaptive.js framework, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"npm install -g generator-adaptivejs\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nOr if you need administrative privileges, precede the command with `sudo` as follows:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"sudo npm install -g generator-adaptivejs\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n***\n\nIf you need to create a new project, go to Step [2. (A) Create a New Project](doc:getting-started-new-project).\nOtherwise, if you have an exisitng project, go to Step [2. (B) Load an Existing Project](doc:getting-started-existing-project)",
        "excerpt": "The Adaptive.js SDK is built on open source technologies. Install the SDK only once per computer.",
        "slug": "install",
        "type": "basic",
        "title": "1. Install the Adaptive.js SDK"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce7",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d524d33aad0d00ec8cf2",
        "createdAt": "2015-03-02T21:18:27.811Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 1,
        "body": "To start, create a new Adaptive.js project in Mobify Cloud, install the Mobify tag on your website, and generate the Adaptive.js scaffold.\n\n***\n\n## 1. Create a Project in Mobify Cloud\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"If you have an existing project, go to the Step [2. (Existing Project) Load an Existing Project](doc:getting-started-existing-project)  guide instead.\",\n  \"title\": \"Do you have an existing project?\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"[Contact us at http://www.mobify.com/contact](http://www.mobify.com/contact/) to sign up for a new Mobify Cloud account if you are new.\",\n  \"title\": \"New Cloud Account\"\n}\n[/block]\n* Fill out the form on the [Create a New Project page at https://cloud.mobify.com/adaptivejs/](https://cloud.mobify.com/adaptivejs/) with the details of your site.\n\n------------\n\n## 2. Install the Mobify Tag\n\nIn Mobify Cloud, once you create a new project as in the previous step, the message appears:\n\n`This project requires the Mobify Tag before it can be published. Install the tag now.`\n\n1\\. Click the **\"Install the tag now\"** link.\n\nThe page view is now in the **\"Configure\"** tab of the **\"Bundles/Configure\"** link button cluster.\n\n2\\. In the **\"Device Target\"** section, check the **\"Smartphone\"** or **\"Tablet\"** box.\n\nIf you change the default selection in this step, click the active **\"Generate New Tag\"** button to generate the HTML again.\n\n3\\. From the **\"Install Tag\"** section, copy the Mobify Tag from the HTML in the text box.\n\n4\\. In an HTML editor app, open the main page of your website.  This is usually `index.html`.\n\n5\\. In your main page in your HTML editor, paste the Mobify Tag  into the `<head>` section.\n\n---------------------\n\n## 3. Generate the Adaptive.js Scaffold\n\nNow that you have your project set up in Mobify Cloud, generate the project files with the Adaptive.js Generator.\n\n\n1\\. Open a new Terminal (Mac) or Command Prompt (Windows) \n\n2\\. To create a new project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"mkdir path/to/project/directory/projectDirectoryName\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nEnsure that you replace the `projectDirectoryName` argument with your project directory name.\n\n3\\. To change into your newly created directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory/projectDirectoryName\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nEnsure that you replace the `projectDirectoryName` argument with your project directory name.\n\n4\\. To generate a new Adaptive.js project in your project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"yo adaptivejs\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n5\\. Follow the instructions to generate your project.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"You can find your unique project slug in Mobify Cloud on your project's Configure page.\"\n}\n[/block]\nThe default settings are as follows:\n\n* **Dust templating:** templating engine\u2028\n* **Vellum SCSS framework:** deselecting this option will allow you to use plain CSS instead\n* **Nightwatch:** system testing framework\n* **Linting:** tests your JavaScript for common mistakes and code style errors\u2028\n* **PRE:** improves site performance by intelligently pre-loading resources\u2028\n* **Selector library:**\n    * choose Zepto (for smaller file size) or\n    * jQuery (for increased compatibility)\n\n***\n\nGo on Step [3. Authorize your Computer to Push Bundles](doc:3-authorize).",
        "excerpt": "Create a new Adaptive.js development project.",
        "slug": "getting-started-new-project",
        "type": "basic",
        "title": "2. (A) Create a New Project"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce7",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d524d33aad0d00ec8cf3",
        "createdAt": "2015-03-02T21:20:22.423Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 2,
        "body": "Now that you have installed the Adaptive.js SDK and saved your credentials, follow the next set of steps to download and to run your project.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Do you have an existing project?\",\n  \"body\": \"If you do **not** have an existing project, go to the Step [2. (New Project) Create a New Project](doc:getting-started-new-project) guide instead.\"\n}\n[/block]\n## 1. Add your SSH key to GitHub\n\n---------------------\n\nTo set up your computer to communicate with GitHub, add your SSH key\nto GitHub. This is done only once per computer.\n\n[Add your SSH key to GitHub](https://help.github.com/articles/generating-ssh-keys/)\n\n---------------------\n\n## 2. Clone the GitHub repository\n\n1\\. In a browser, go to [GitHub ](http://www.github.com)and navigate to your GitHub project\nrepository.\n\n2\\. Locate the **\"clone URL\"** option on the sidebar.\n\n3\\. Click the **\"SSH\"** toggle link to switch to the SSH option.\n\n4\\. Copy the resulting URL to your clipboard using the button beside the URL bar.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"GitHub clone URL\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/1cw1yMSZScELg5t5USIA\",\n        \"github-clone-url-ani.gif\",\n        \"226\",\n        \"177\",\n        \"#996c48\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n5\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n6\\. To change to your project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n7\\. To clone the GitHub repository, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git clone git://replaceCopiedURL\",\n      \"language\": \"text\"\n    }\n  ]\n}\n[/block]\nSubstitute the `git://replaceCopiedURL` in the command with the URL that you copied to your clipboard in the previous step.\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://www.filepicker.io/api/file/yDvDYvEHRhq10rs50fv6\",\n        \"git-clone-ani.gif\",\n        \"614\",\n        \"347\",\n        \"#3d93b0\",\n        \"\"\n      ],\n      \"caption\": \"GitHub Clone Repository\"\n    }\n  ]\n}\n[/block]\n---------------------\n\n## 3. Install the NPM Packages\n\nYour Adaptive.js project has specific NPM package dependencies which are needed\nto run your project. These only need to be installed once.\n\n1\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n2\\. To change to your project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n3\\. To install the NPM packages, enter the following command on the command line: \n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"npm install\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"title\": \"Permission Errors\",\n  \"body\": \"If you receive permission errors, reset the permissions in your `.npm` folder.\\n\\n1. Change to your `.npm` folder with the `cd ~/.npm` command. \\n2. Inside the `.npm` folder, reset your permissions with the `sudo chown -R yourUsername *` command. \\n3. **Ensure that you change back to your project directory.** \\n4. Run the `npm install` command again.\"\n}\n[/block]\n***\n\nGo on to Step [3. Authorize your Computer to Push Bundles](doc:3-authorize).",
        "excerpt": "Download your Project Repository from GitHub.",
        "slug": "getting-started-existing-project",
        "type": "basic",
        "title": "2. (B) Load an Existing Project"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce7",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d524d33aad0d00ec8cf5",
        "createdAt": "2015-03-30T23:11:08.149Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 3,
        "body": "API keys are long strings used by command line tools. These keys are unique. If you ever need to reset you API key for security reasons, log into your Mobify account settings with the same steps as outlined here.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"For the authorization to happen correctly, execute the authorization command in a directory with an Adaptive.js project.\"\n}\n[/block]\n***\n1. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n1. To change to your project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n1. In your browser, log in to your [Mobify Account Settings at  https://cloud.mobify.com/account/](https://cloud.mobify.com/account/).\n\n1. On the **\"Account Settings\"** page, find the **\"Authorize Your Computer To Push Bundles\"** section.\n\n  From the **\"For Adaptive.js Projects\"** section, copy the `grunt`  command.\n\n1. On the command line, paste and execute your copied command.\n\n***\n\nFinally, [Preview your Project](doc:preview-your-project) to see your Adaptive.js site in your development computer's browser.",
        "excerpt": "To authorize your computer to push bundles, run a command with your email address and your Mobify API key.",
        "slug": "3-authorize",
        "type": "basic",
        "title": "3. Authorize your Computer to Push Bundles"
      }
    ],
    "project": "54da9ecd44b1090d00072b60",
    "reference": false,
    "slug": "getting-started",
    "title": "Getting Started",
    "version": "5568d523d33aad0d00ec8ce4"
  },
  {
    "__v": 1,
    "_id": "5568d524d33aad0d00ec8cf1",
    "createdAt": "2015-04-22T20:43:05.135Z",
    "from_sync": false,
    "order": 1,
    "pages": [
      {
        "__v": 4,
        "_id": "557a1df0a7e7ab35006a0992",
        "api": {
          "auth": "required",
          "params": [],
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "url": ""
        },
        "body": "When you migrate your Adaptive.js version, you gain access to:\n\n* new features\n* performance improvements\n\nAn update to a minor version point release of Adaptive.js (for example, from 1.0.3 to 1.3.0) involves an update to your `package.json` file and a short reinstallation. By contrast, a major version upgrade (for example, from 1.4.0 to 2.0.0) usually introduces changes that break your code. These major upgrades require you to also change your project code.\n\nFollow the steps after the Overview to upgrade your project to Adaptive.js v2.0.\n\n---\n\n## Overview of New and renamed files in Adaptive.js 2.0\n\n### Loader.js\n\n`loader.js` is the Adaptive.js bootloader. It allows you to pre-load assets before your transformation runs or render out a splash loading screen quicker than was previously possible. This file should be kept as small as possible to keep page loads snappy.\n\n### Adaptation.js\n\n`adaptation.js` is the same as `adaptation/main.js` in Adaptive.js 1.x. This is where all the configuration for your adaptation goes.\n\n### Ui.js\n\n`ui.js` the same as `assets/js/ui/main.js` in Adaptive.js 1.x. All setup and configuration of UI components and plugins should go here.\n## 1. Generate a new Adaptive.js 2.0 Project\n\nAdaptive.js 2.0 comes with a new file structure. To make it easier to port your project to the new structure, generate a new project and place your project files within the new structure.\n\n---\n\n## 2. Update your generator\n\n\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"npm install -g generator-adaptivejs\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n---\n\n## 3. Setup your project directory\n\nMove all of your project files into a temporary folder, lets call it 'old_project'\n\n---\n\n## 4. Generate your Adaptive.js 2.0 Project\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd ../\\nyo adaptivejs --slug your-project-dir-name\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"If you have changed the name of the directory so that it is different from the 'name' key in your project's `package.json` make sure to fix that field in your newly generated project.\",\n  \"title\": \"Directory name different from project name\"\n}\n[/block]\nThis will generate a new project scaffold in the structure which Adaptive.js 2.0 uses.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"When answering the `Do you want Zepto or jQuery?` it is best to pick the same library that you were using before migrating. To ensure 100% compatibility when upgrading simply copy the files in `vendor/` from your old project into `app/vendor` in your new project.\",\n  \"title\": \"jQuery or Zepto?\"\n}\n[/block]\nThe biggest difference with Adaptive.js 2.0's directory structure is that every asset which is run through a build step should be placed inside the `app/` directory. This includes UI Javascript, Views, Templates, SCSS stylesheets, etc. All static files should be placed in `static/`.\n\nThe generated project structure is just a suggestion on how you should arrange your project. We have found that we tend to build our projects around a component based model and have changed the file structure to fit that. There are only a few things which need to be kept exactly as they are:\n\n* Place all the files you want to build within `app/`\n* Place all static assets in `static/`\n* Make sure that you have `adaptation.js`, `ui.js, and `loader.js` files inside of `app/`. These should not be renamed as each is looked for by name by the tasks that compile your project.\n\n---\n\n## Moving your project into the new folder structure\n\n### orig_project/adaptation\n\n* Overwrite `app/adaptation.js` with `orig_project/adaptation/main.js`\n* Change path of `router` in `app/adaptation.js` to `global/router`\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"require([\\n    'global/router',\\n    'adaptivejs/adaptive',\\n    'adaptivejs/view',\\n    'adaptivejs/utils',\\n    'adaptivejs/defaults',\\n    'utils/selector-extensions'\\n],\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n\n\n* Overwrite `app/global/router.js` with `orig_project/adaptation/router.js`\n* Add paths which you had added to `orig_project/adaptation/config.js` to `app/config/adaptation.js`. You will notice that in 2.0 that `bower_components/` is contained within the `app/` folder making paths a bit tighter\n* Move everything else from `adaptation/` directly into `app/`\n\n### orig_project/assets\n\n* Move static assets like fonts and images directly to `static/`\n* If your styles are written with SCSS, move the `styles/` directory into `app/` and delete `app/stylesheet.scss` (this is part of the scaffold and already exists in `styles/`). Otherwise, place your .css files in `static/`\n* If you have any files/folders in `orig_project/assets/js` other than `orig_project/assets/js/ui/`, place them in static/js\n* Overwrite `app/ui.js` with `orig_projects/assets/js/ui/main.js`\n* Add paths which you had added to `orig_projects/assets/js/ui/config.js` to `app/config/ui.js`\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Paths to bower_components\",\n  \"body\": \"Paths to `bower_components/` in the older directory structure had many `../` strings to navigate up to the root directory. Since `bower_components/` is now located within `app/`, these are no longer necessary and should be removed. (e.g. `'../../../bower_components/` => `'bower_components/'`)\"\n}\n[/block]\n\n\n* Copy all other files from `orig_projects/assets/js/ui/` into `app/`\n\n### External Package Managers (Bower and Bundler)\n\n* Replace `Gemfile` and `Gemfile.lock` with the ones in `old_project/` if you have them.\n* Update `bower.json` with the paths from `orig_project/bower.json` and run `bower install`\n\n### Custom tasks and Gruntfile\n\nIf you have created any custom tasks in your project move them into your newly generated `Gruntfile.js` and into the `tasks/` directory. If any of these tasks required modules from NPM make sure to add the packages back to your `package.json` and run `npm install`\n\n---\n\n## Test your Upgraded Project\n\nOnce you complete the previous steps, test your project.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt preview\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n\n\nEnsure that there are no errors during the build process. Note that the ESLint `eslint:dev` task may result in a number of reported errors. These do not prevent you from previewing your site; use the \"--force\" flag (i.e. `grunt preview --force`) to continue past the errors.",
        "category": "5568d524d33aad0d00ec8cf1",
        "createdAt": "2015-06-11T23:46:56.537Z",
        "excerpt": "Upgrade your project to Adaptive.js v2.0 to gain",
        "githubsync": "",
        "hidden": false,
        "link_external": false,
        "link_url": "",
        "order": 999,
        "project": "54da9ecd44b1090d00072b60",
        "slug": "update-to-adaptivejs-v20",
        "sync_unique": "",
        "title": "Upgrade to Adaptive.js v2.0",
        "type": "basic",
        "updates": [],
        "user": "54daa360ee3b8419007e45ff",
        "version": "5568d523d33aad0d00ec8ce4"
      }
    ],
    "project": "54da9ecd44b1090d00072b60",
    "reference": false,
    "slug": "upgrading",
    "title": "Upgrading",
    "version": "5568d523d33aad0d00ec8ce4"
  },
  {
    "__v": 1,
    "_id": "5568d524d33aad0d00ec8ced",
    "createdAt": "2015-03-19T20:14:47.147Z",
    "from_sync": false,
    "order": 2,
    "pages": [
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ced",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "55521a017988e10d003452af"
        ],
        "_id": "5568d524d33aad0d00ec8d01",
        "createdAt": "2015-03-19T20:16:51.821Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 0,
        "body": "[block:html]\n{\n  \"html\": \"<iframe src=\\\"https://player.vimeo.com/video/114925872\\\" width=\\\"610\\\" height=\\\"343\\\" frameborder=\\\"0\\\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\"\n}\n[/block]\nWith Adaptive.js, there is a direct connection between your web server and your visitors.  This is true whether your visitors use their desktop computer or a mobile device.\nOn mobile devices, your Mobify bundle is activated.  The bundle is a set of JavaScript instructions that optimize your site's layout and performance.\nCustomize the optimization to suit your target devices.\n\n***\n\n## A. The Benefits of Adaptive.js\n\n### a. The Same Set of HTML\n\nWhen content changes on the original site, there is an immediate effect on mobile.\nYour new blog posts or sale promotions go live on desktop and on mobile at the same time, because the mobile site is based on the desktop HTML.\n\n***\n\n### b. One URL\n\nYour site visitors see the adapted experience with the same URL, no matter what device they are using.\nSo when someone posts a link on Twitter from their smartphone, followers of that Twitter account see the optimized view of that site when they click that link.\nThis happens whether the followers open the link on a desktop computer or a mobile device.\n\n***\n\n### c. JavaScript Adaptations\n\nBecause the same URL is used on all devices, the behaviour of your site is enhanced using front-end JavaScript, rather than through a proxy server. This is in line with Google's responsive web design recommendation to add device-specific optimization using JavaScript.\n\n***\n\nNow that you know the basics of Adaptive.js, [Learn how Adaptive.js works](doc:how-does-adaptivejs-work).",
        "excerpt": "Adaptive.js is an adaptive templating framework that allows you to dynamically transform your website for smartphone, tablet, and other devices.",
        "slug": "what-is-adaptivejs",
        "type": "basic",
        "title": "What is Adaptive.js?"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ced",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "5547a4ed7ff0fe0d006aa5e0"
        ],
        "_id": "5568d524d33aad0d00ec8d02",
        "createdAt": "2015-03-19T20:26:05.611Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 1,
        "body": "[block:embed]\n{\n  \"html\": \"<iframe class=\\\"embedly-embed\\\" src=\\\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fplayer.vimeo.com%2Fvideo%2F114925871&url=http%3A%2F%2Fplayer.vimeo.com%2Fvideo%2F114925871&image=http%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F501180818_1280.jpg&key=02466f963b9b4bb8845a05b53d3235d7&type=text%2Fhtml&schema=vimeo\\\" width=\\\"1920\\\" height=\\\"1080\\\" scrolling=\\\"no\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\",\n  \"url\": \"http://player.vimeo.com/video/114925871\",\n  \"title\": \"How does Adaptive.js work?\",\n  \"favicon\": \"http://player.vimeo.com/favicon.ico\",\n  \"image\": \"http://i.vimeocdn.com/video/501180818_1280.jpg\"\n}\n[/block]\nAs the browser loads the page, the Mobify tag checks if the visitor is using a supported mobile device by checking the browser user agent.\n\nTo enable Adaptive.js on your site, install the Mobify tag at the top of the `<head>` section of your HTML. All of the site pages need to have the Mobify tag for the adaptations to occur on them.\n\nIf the visitor is using a supported device, the original version of the page is stopped from loading by an output of an opening `<plaintext>` tag.\nThe remaining HTML on the page is then rendered as text instead of as HTML elements that the browser would need to parse.\nBecause the `<plaintext>` tag is hidden, nothing is shown to the visitor yet.\n\nNow, we not only prevent the original version of the page from displaying, we also gain access to the original HTML of the page.\n\nNext, we generate the new version of the page by downloading the Mobify bundle for your site.\nThe Mobify bundle is a custom set of instructions that optimize your site layout and performance.\nIt runs against the original HTML to create the mobile-friendly version of the page.\n\nUse the Mobify Bundle to:\n\n* swap out desktop images for mobile-friendly images\n* remove unnecessary assets or content\n* add in new HTML or JavaScript for mobile\n\nAfter the Mobify bundle runs on the original HTML of the page, Adaptive.js generates a newly optimized version of the page.\nThe optimized page now replaces the original page.  The optimized page is now displayed to the site visitor.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read more about how the constituent components of Adaptive.js work together to create the mobile version of your site in [The Mobify Bundle](doc:the-mobify-bundle).\",\n  \"title\": \"The Mobify Bundle\"\n}\n[/block]\n***\n\n## A. Which devices are supported?\n\nWe support iOS, Android, Firefox, and Windows Phone devices but we usually do not enable the mobile experience on all devices.\nTypically, smartphone builds are supported on iOS and Android 4+. Tablet builds are supported on iOS only.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Check your Mobify tag with the instructions in our [Device Testing Best Practices](doc:device-testing-best-practices) guide, or ask your Customer Success Manager or Developer Advocate if you are not sure which devices are supported on your site.\"\n}\n[/block]\n***\n\n## B. Why not adapt based on viewport instead?\n\nThe viewport size does not indicate how the site is actually used.\nFor example, if you resize a desktop browser to be very small, this does not mean you need to add touch enhancements to the site. These enhancements are not relevant for desktop visitors.\n\n***\n\n## C. How does Adaptive.js affect the performance of my site?\n\nOn the whole, your site performance improves.\n\nThere is a slight delay to load the Mobify bundle. However, the page is optimized through the removal of unnecessary assets: images, CSS, JS, and HTML.\nFile size reduces for images, which in turn speeds up the mobile version of the site. With these optimizations, the bandwidth needed for the mobile site reduces.  This results in an overall site performance improvement.\n\n***\n\nTo go deeper, learn more about [The Mobify Bundle](doc:the-mobify-bundle).",
        "excerpt": "Adaptive.js transforms your site via the Mobify tag.",
        "slug": "how-does-adaptivejs-work",
        "type": "basic",
        "title": "How Does Adaptive.js Work?"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ced",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d524d33aad0d00ec8d03",
        "createdAt": "2015-03-19T20:27:53.297Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 2,
        "body": "[block:embed]\n{\n  \"html\": \"<iframe class=\\\"embedly-embed\\\" src=\\\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fplayer.vimeo.com%2Fvideo%2F114925873&url=http%3A%2F%2Fplayer.vimeo.com%2Fvideo%2F114925873&image=http%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F501180862_1280.jpg&key=02466f963b9b4bb8845a05b53d3235d7&type=text%2Fhtml&schema=vimeo\\\" width=\\\"1280\\\" height=\\\"720\\\" scrolling=\\\"no\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\",\n  \"url\": \"http://player.vimeo.com/video/114925873\",\n  \"title\": \"The Mobify Bundle\",\n  \"favicon\": \"http://player.vimeo.com/favicon.ico\",\n  \"image\": \"http://i.vimeocdn.com/video/501180862_1280.jpg\"\n}\n[/block]\n***\n\n## A. Introduction to the Mobify Bundle\n\nThe Mobify Bundle is comprised of:\n\n* **adaptive.js**\n\n     This file transforms the original HTML into the mobile-friendly HTML that is served to mobile visitors.\n     You do not see this file in development since it is compiled from the following component files:\n\n     * **Router:** The router determines what view should be loaded on the current page.\n     * **Views:** Select and transform content from the original page in your views.\n     * **Templates:** Templates define the layout of your page on mobile. They use the content from the views.\n\nThese components are described in greater detail in the following sections.\n\n* **CSS**\n\n     Adaptive.js allows you to completely re-style your site on mobile by replacing your desktop CSS.\n     We provide a Sass framework to build CSS. Also, you can write plain CSS instead.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Sass\",\n  \"body\": \"Read more about Sass in our [Introduction to Sass](doc:introduction-to-sass) guide.\"\n}\n[/block]\n* **User Interface JavaScript**\n\n     After the adaptive.js file creates the new mobile-friendly HTML document, add user interface JavaScript to the new document for interactivity.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"User Interface JavaScript\",\n  \"body\": \"Read more in our [Add User Interface JavaScript](doc:add-user-interface-javascript) tutorial.\"\n}\n[/block]\n***\n\n## B. The Router\n\nThe router analyzes the current page to determine its page type. Then, it loads\nthe corresponding view file for that page type.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Router\",\n  \"body\": \"Read more about the [Router](doc:router).\"\n}\n[/block]\n***\n\n## C. Views\n\nSelect and transform content from the original page in your views.\nThis is a way to store content from the original page and to then re-use this content on the mobile version of the page.\n\nThe content is stored in the page context.  Later, the content is called in the templates.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Views\",\n  \"body\": \"Read more about [Views](doc:views).\"\n}\n[/block]\n***\n\n## D. Templates\n\nTemplates define the layout of your page on mobile.\nUse the content that you selected or transformed in the corresponding view to build the layout for the page using the template.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Templates\",\n  \"body\": \"Read more about [Templates](doc:templates).\"\n}\n[/block]\n***\n\nWhen you create a bundle, the router, views, and templates are compiled into the `adaptive.js` file.\n\nThis is the main file that runs on your visitors' devices.  Also, the bundle file provides instructions on how to transform the page for mobile.",
        "excerpt": "The Mobify bundle is a set of files that transforms your site’s layout and performance for mobile.",
        "slug": "the-mobify-bundle",
        "type": "basic",
        "title": "The Mobify Bundle"
      }
    ],
    "project": "54da9ecd44b1090d00072b60",
    "reference": false,
    "slug": "overview",
    "title": "Overview",
    "version": "5568d523d33aad0d00ec8ce4"
  },
  {
    "__v": 2,
    "_id": "5568d524d33aad0d00ec8cea",
    "createdAt": "2015-03-11T01:12:01.043Z",
    "from_sync": false,
    "order": 3,
    "pages": [
      {
        "__v": 1,
        "_id": "5568d525d33aad0d00ec8d19",
        "api": {
          "auth": "required",
          "params": [],
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "url": ""
        },
        "body": "# What is the Router?\n\nThe router is part of the compiled Adaptive.js transformation file. Before compilation, the router is a single file that you can edit for functionality.\n\nThe function of the router is to determine which view to render for the current page.  Because the Mobify tag is the same on every page of your site, you need to specify the correct behaviour for each page.  Using matching functions, you define a set of routes.\n\nThere are three important things to remember about the router:\n\n1. Only one route is matched when resolving a page\n2. Routes are checked in the order in which they were added to the router object\n3. The first route to match is returned\n\nFind the `adaptation/router.js` router JavaScript file in your project directory.\n\n****\n\n## A. Matching Functions\n\nThe router uses matching functions to decide which view to render. There are three types of matching functions:\n\n1. `Router.selectorMatch`\n2. `Router.urlMatch`\n3. JavaScript Function Match\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Router API\",\n  \"body\": \"Read the Router function entries in our [Adaptive.js API](doc:adaptivejs-api).\"\n}\n[/block]\nThese matching functions are described in detail in the following sections.\n\n\n***\n\n### 1. Router.selectorMatch\n\nThis matching function uses a jQuery-style selector to check for the existence of an HTML element to determine whether to match on this route.\n\nExample:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"// If the “body.home” selector is in the desktop HTML,\\n// render the Home view.\\nrouter.add(Router.selectorMatch('body.home'), Home)\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nThis is our recommended method. It allows you to account for changes in URL structure or different variations of a template.\n\n***\n\n### 2. Router.urlMatch\n\nThis matching function allows you to check the current page’s URL to determine whether to match on this route.\n\nExample:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"// Router.urlMatch checks if a particular URL fragment\\n// is in the current page’s URL.\\n// The URL fragment here contains a regular expression.\\n//\\n// If the URL match returns true, render the Product view.\\nrouter.add(Router.urlMatch('/product/\\\\d+/'), Product)\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n***\n\n### 3. JavaScript Function Match\n\nThis matching function allows you to write a JavaScript function that returns true or false, depending on whether to match on this route.\n\nExample:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"// If there are both a Navigation and an About section\\n// on this page, the function will return true.\\n//\\n// The router then renders the About view.\\nrouter.add(function() {\\n\\n  // Check if there is at least one page element with the class\\n  // name \\\"about\\\" and if there is at least one page element with\\n  // the class name \\\"navigation\\\".\\n  return $('.about').length > 0 && $('.navigation').length > 0;\\n}, About)\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n****\n\n## B. Adding A New Route\n\n1\\. Add a reference to the new view in the dependencies array of the router.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"// Add 'views/newView' to the array\\ndefine([\\n    'adaptivejs/selectorEngine',\\n    'adaptivejs/router',\\n    'views/home',\\n    'views/newView'\\n    ], ...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n2\\. Refer to the new view in the function arguments.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"...\\n// Add 'NewView' to the function arguments\\nfunction($, Router, Home, NewView)\\n...</code></pre>\\n3. Add a route using a matching function.<pre><code class=\\\"language-javascript\\\">...\\n// Add a new route\\n.add(Router.selectorMatch('#element'), NewView)\\n...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nThat's it!  The final `router.js` file looks like this:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"define([\\n    'adaptivejs/selectorEngine',\\n    'adaptivejs/router',\\n    'views/home',\\n    'views/newView' // add 'views/newView' to array\\n    ],\\n// add 'NewView' to function arguments\\nfunction($, Router, Home, NewView) {\\n    var router = new Router();\\n\\n    router\\n        .add(Router.selectorMatch('body.home'), Home)\\n        // add new route\\n        .add(Router.selectorMatch('#element'), NewView);\\n\\n    return router;\\n});\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n****\n\n## C. Ignore a Page\n\nThe `Router.Ignore` constant allows you to ignore or blacklist a page, in conjunction with a JavaScript Function Match.  This is useful when there is a certain page that is out of scope, or if it has a responsive layout that does not require further adaptation.\n\nExample:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"// Skip this page from the Mobify adaptation if there is an\\n// element on the page with class “blog-header”.\\nrouter.add(function() {\\n  return $('.blog-header').length > 0;\\n}, Router.Ignore)\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"To ensure that these routes behave properly, add these to the router first.\"\n}\n[/block]",
        "category": "5568d524d33aad0d00ec8cea",
        "createdAt": "2015-03-11T01:18:02.895Z",
        "excerpt": "The router determines which view to render for the current page.",
        "githubsync": "",
        "hidden": false,
        "link_external": false,
        "link_url": "",
        "order": 0,
        "project": "54da9ecd44b1090d00072b60",
        "slug": "router",
        "sync_unique": "",
        "title": "Router",
        "type": "basic",
        "updates": [],
        "user": "54daa360ee3b8419007e45ff",
        "version": "5568d523d33aad0d00ec8ce4"
      },
      {
        "__v": 3,
        "_id": "5568d525d33aad0d00ec8d1a",
        "api": {
          "auth": "required",
          "params": [],
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "url": ""
        },
        "body": "# A. What is a View?\n\nA view is a part of the compiled `adaptive.js` transformation file.  Before compilation, each view is an individual file that you edit.\n\nIn a view, you select or transform the content from the original desktop version of a page for the adapted mobile version of the page.\n\nThink of a view as a way to store content from the original page. The page context stores the content.\n\nAt a later time, the template calls the content to use it again in the mobile-adapted page.\n\nA view can include partial views (for example, a header and a footer), extend a parent view, or stand on its own.\n\nFind view files in the `adaptation/views` folder of your project directory.\n\n***\n\n# B. The Components of a View\n\n***\n\n## a. View.context\n\nIn the context section, you define the content to select or to transform from the original page.\nYou can create many keys to store your content.\n\nHere is an example of content selection without modifications directly from the original page:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"...\\n\\n/**\\n * Returns an element selected from the page.\\n *\\n * @param {Object} context\\n * @return {Object} page element selection.\\n */\\nhero: function(context) {\\n\\n    // Returns the element with the hero ID.\\n    return $('#hero');\\n}\\n\\n...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nThe following is another example, this time of content selection with some transformations from the original page:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"...\\n\\n/**\\n * Returns the description with the break tags removed.\\n *\\n * @param {Object} context\\n * @return {Object} transformed page element selection.\\n */\\ndescription: function(context) {\\n\\n    // Store the description.\\n    var $description = $('.description');\\n\\n    // Find the break tags in the description.\\n    // Remove the instances of the break tag in the description.\\n    $description.find('br').remove();\\n\\n    // Return the modified description.\\n    return $description;\\n}\\n\\n...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n***\n\n## b. View.preProcess\n\nThe `preProcess` function runs before the `context` keys are evaluated.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Use the `preProcess` function to clean up the markup before the `context` keys run.\"\n}\n[/block]\nFor example:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"...\\n\\n/**\\n * Returns the post-processed text with the line breaks removed.\\n *\\n * @param {Object} context\\n * @return {Object} pre-processed product list.\\n */\\npreProcess: function(context) {\\n\\n    // Run the base view preProcess function if it exists\\n    if (BaseView.preProcess) {\\n        context = BaseView.preProcess(context);\\n\\n        // Remove all the line breaks for mobile.\\n        $('br').remove();\\n    }\\n\\n    // Return the page with the line breaks removed.\\n    return context;\\n}\\n\\n...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n***\n\n## c. View.postProcess\n\nThe `postProcess` function runs after the `context` keys are evaluated.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Use this `postProcess` function to selectively transform elements after you mark the elements to transform in `context`.\"\n}\n[/block]\nFor example:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"...\\n\\n/**\\n * Returns the post-processed text with the line breaks removed.\\n *\\n * @param {Object} context\\n * @return {Object} pre-processed product list.\\n */\\npostProcess: function(context) {\\n\\n    // Run the base view preProcess function if it exists\\n    if (BaseView.postProcess) {\\n        context = BaseView.postProcess(context);\\n\\n       // Remove all the line breaks for mobile.\\n        $('br').remove();\\n    }\\n\\n    // Return the page with the line breaks removed.\\n    return context;\\n}\\n\\n...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n***\n\n## d. View.template\n\nThis is the template file that renders the current view after the view finishes loading.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"By default, we use Dust.js as our templating engine.\",\n  \"title\": \"Dust.js\"\n}\n[/block]\nAn example of how the template associated with the view is defined:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"...\\n\\ndefine(['adaptivejs/selectorEngine',\\n        'views/base',\\n        'dust!templates/home'],\\nfunction($, BaseView, template){\\n    return {\\n        template: template,\\n\\n...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nNotice how the `dust!templates/home` template is loaded in the dependencies array.\nThe `dust!` prefix uses the Dust.js plugin to compile the `templates/home` template to render this view.\n\n***\n\n# C. View Inheritance\n\n***\n\n## a. View.includes\n\nA view can include partial views with an `includes` statement. This is useful when a piece is reused across multiple views, like a header, a footer, or a pagination.\n\nFor example:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"...\\n\\ndefine(['adaptivejs/selectorEngine',\\n        'views/base',\\n        'includes/_pagination',\\n        'dust!templates/home'],\\nfunction($, BaseView, pagination, template){\\n    return {\\n        ...\\n        template: template,\\n        includes: {\\n            'pagination': pagination\\n        }\\n...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nBy convention, we add partial views in the `includes` folder, and prefix the file name with an underscore.\n\n***\n\n## b. View.extend\n\nA view can extend a parent view.  In that case, the view inherits all of the parent methods including the `preProcess`, `postProcess`, `context`, and `includes` method.\n\nIf a key is defined in both the parent and child view, the child's key overrides the parent's key.\n\nMost views in Adaptive.js inherit from the `base.js` file. The `base.js` file includes basic content selections and the `base.dust` base template.\n\nAn example of a view extending the base view:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"...\\n\\ndefine(['adaptivejs/selectorEngine',\\n        'views/base',\\n        'dust!templates/home'],\\nfunction($, BaseView, template){\\n    return {\\n        template: template,\\n        extend: BaseView,\\n\\n...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n\n\n***\n\nGo on to [Create a New View](doc:create-a-new-view) or learn to [Work with External Resources](doc:work-with-external-resources) in your view files.",
        "category": "5568d524d33aad0d00ec8cea",
        "createdAt": "2015-03-11T01:48:38.015Z",
        "excerpt": "A view selects and transforms the content that is displayed on your adapted page.",
        "githubsync": "",
        "hidden": false,
        "link_external": false,
        "link_url": "",
        "order": 1,
        "project": "54da9ecd44b1090d00072b60",
        "slug": "views",
        "sync_unique": "",
        "title": "Views",
        "type": "basic",
        "updates": [
          "554a68e258f5650d00ae43fc"
        ],
        "user": "54daa360ee3b8419007e45ff",
        "version": "5568d523d33aad0d00ec8ce4"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cea",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d1b",
        "createdAt": "2015-03-11T02:07:37.216Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 2,
        "body": "# A. What is a Template?\n\nA template is a part of the compiled adaptive.js transformation file.  In the template, you define the layout of your mobile page.  \nYou build the layout for the page from the content that you selected or transformed in the view that corresponds to this particular template.\n\nFind template files in the `adaptation/templates` folder of your project directory.\n\n***\n\n## a. Dust.js\n\nOur templates are written in Dust.js, which is a templating engine maintained by LinkedIn.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Dust.js\",\n  \"body\": \"Read the official [Dust.js documentation at http://linkedin.github.io/dustjs/](http://linkedin.github.io/dustjs/) .\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Dust.js Syntax\",\n  \"body\": \"See our [Dust.js Cheat Sheet](doc:dustjs-cheat-sheet) for help with syntax.\"\n}\n[/block]\n----------------------------------  \n\n## b. Base Template\n\nIn most template files, the first line references the base template is:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{<\\\"templates/base\\\"/}\",\n      \"language\": \"sass\"\n    }\n  ]\n}\n[/block]\nThis loads the `adaptation/templates/base.dust` file, which is the master template file for the mobile experience.  The master template includes the skeleton HTML for each page.\n\n----------------------------------\n\n## c. Blocks\n\nIn the `adaptation/templates/base.dust` file, there are several templating blocks.  These templating blocks look something like this:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{+contentBlock}\\n  ...\\n{/contentBlock}\",\n      \"language\": \"sass\"\n    }\n  ]\n}\n[/block]\nBlocks allow you to define default content in the base template. Then you have the ability to override the blocks in the child template.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read more about blocks in our [Dust.js Cheat Sheet](doc:dustjs-cheat-sheet).\",\n  \"title\": \"\"\n}\n[/block]\n----------------------------------\n\n### i. Content Block\n\nThe content block is the main content area between the header and footer. You override this block in the child template in almost all cases.\n\nFor example, in the `adaptation/templates/home.dust` file, the overridden block looks like this:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{<contentBlock}\\n  ...\\n{/contentBlock}\",\n      \"language\": \"sass\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read more about overriding blocks in our [Dust.js Cheat Sheet](doc:dustjs-cheat-sheet).\"\n}\n[/block]\n---------------------------------- \n\n### ii. UI Scripts Block\n\nThe code in the UI Scripts block calls the the user interface (UI) JavaScript for this template.  The content is auto-generated and appears here for your reference.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{<uiScripts}\\n  ...\\n{/uiScripts}\",\n      \"language\": \"sass\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read more about UI JavaScript in our [Use the Existing Desktop JavaScript](doc:use-the-existing-desktop-javascript) and in the [Dust.js Cheat Sheet](doc:dustjs-cheat-sheet).\"\n}\n[/block]\n----------------------------------\n\n## d. Partials\n\nTo reuse pieces of HTML, you create partial template files that are included on different templates.\n\nFind partials in the `adaptation/templates/partials` folder.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read more about partials in our [Dust.js Cheat Sheet](doc:dustjs-cheat-sheet).\"\n}\n[/block]\n----------------------------------\n\n### i. Header\n\nIn the `adaptation/templates/base.dust` base template, there is an include for the header partial:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{>\\\"templates/partials/_header\\\"/}\",\n      \"language\": \"sass\"\n    }\n  ]\n}\n[/block]\nThis loads the `adaptation/templates/partials/_header.dust` template, which includes the global header for your mobile site.\n\n----------------------------------\n\n### ii. Footer\n\nThere is also an include for the footer partial in the `adaptation/templates/base.dust` base template:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{>\\\"templates/partials/_footer\\\"/}\",\n      \"language\": \"sass\"\n    }\n  ]\n}\n[/block]\n***\n\nNow you are able to read Dust.js templates!",
        "excerpt": "The template contains the definition of the mobile page layout.",
        "slug": "templates",
        "type": "basic",
        "title": "Templates"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cea",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d22",
        "createdAt": "2015-04-20T23:27:51.469Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 3,
        "body": "Follow this process to create a new web view, such as for a home view, category view, product description page view, etc.\n\n---\n\n1\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n2\\. To change to your project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n3\\. To create a new view with the Yeoman generator, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"yo adaptivejs:view\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nThis process creates your new view, template file, and UI script.\n\n***\n\nNext, add your new view to the [Router](doc:router).",
        "excerpt": "Work through this process to create a new web view for your mobile site adaptation.",
        "slug": "create-a-new-view",
        "type": "basic",
        "title": "Create a New View"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cea",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "553c0f32579cdf0d0028825d"
        ],
        "_id": "5568d525d33aad0d00ec8d1c",
        "createdAt": "2015-03-11T02:59:01.850Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 4,
        "body": "# A. Overview\n\nDust.js is the default templating engine used by Adaptive.js. This document gives an overview of the templating language.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read the [official Dust.js documentation at http://www.dustjs.com/](http://www.dustjs.com/).\",\n  \"title\": \"Dust.js\"\n}\n[/block]\n----------------------------------\n\n# B. Referencing Keys from the View\n\nTo reference keys in the view, surround the key name in brackets like\nthis: `{key}`.\n\nFor example, in the view file, select all of the content marked as an `article`:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"'articles': function(context) {\\n    return $('.article');\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nThen inside the template file, refer to these view selections with the curly brace `{articles}` like this:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"<div class=\\\"articles\\\">\\n    {articles}\\n</div>\",\n      \"language\": \"html\"\n    }\n  ]\n}\n[/block]\nThe combined effect of this code in the view and in the template files is the output of all of the elements on the page with the `article` class name.\n\n----------------------------------\n\n## a. Key Contexts\n\nIt is also possible to have multiple levels of keys. In this example, we create a `header` key with multiple keys inside of it.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"'header': {\\n    'nav': function(context) {\\n        return $('#nav');\\n    },\\n    'logo': function(context) {\\n        return $('#logo');\\n    }\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nYou can template this in two different ways. In the first example, you can\nuse the dot notation to directly reference individual keys inside of\n`header`:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"<div class=\\\"x-logo\\\">\\n    {header.logo}\\n</div>\\n\\n{header.nav}\",\n      \"language\": \"html\"\n    }\n  ]\n}\n[/block]\nOr, you can descend into the `header` context and reference keys with a\nshorter notation:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{#header}\\n    <div class=\\\"x-logo\\\">\\n        {logo}\\n    </div>\\n\\n    {nav}\\n{/header}\",\n      \"language\": \"html\"\n    }\n  ]\n}\n[/block]\nEither of these approaches yields the same final markup.\n\n----------------------------------\n\n# C. Conditionals: {?condition}\n\nYou can conditionally include markup on the page, depending whether a key exists or not.\n\nFor example, to select a logo in your view include the code:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"'logo': function(context) {\\n    return $('#logo');\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nWe can output different markup depending on whether the `logo` key exists.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{?logo}\\n    <section class=\\\"x-logo\\\">\\n        {logo}\\n    </section>\\n{:else}\\n    <img src=\\\"logo.png\\\" />\\n{/logo}\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nIn this example, if the `logo` key exists on the page, we output the selection from the view. Otherwise, we show the static `logo.png` image.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"In these conditional structures, the `else` block is optional.\",\n  \"title\": \"Else Block\"\n}\n[/block]\n----------------------------------\n\n# D. Negative Conditionals: {^condition}\n\nAchieve the same effect of conditional markup on a page with a negative conditional.\n\nLet's use the example in the Conditionals section with the `logo` key:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{^logo}\\n    <img src=\\\"logo.png\\\" />\\n{:else}\\n    <section class=\\\"x-logo\\\">\\n        {logo}\\n    </section>\\n{/logo}\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nSimilarly, the `else` block is still optional.\n\n----------------------------------\n\n# E. Loops: {#condition}\n\nTo select a set of elements in the view, iterate over them in the template.\n\nFor example, if there is the following block of HTML in the desktop site version:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"<div id=\\\"carousel\\\">\\n    <div class=\\\"carousel-container\\\">\\n        <img src=\\\"image1.jpg\\\" />\\n        <img src=\\\"image2.jpg\\\" />\\n        <img src=\\\"image3.jpg\\\" />\\n        <img src=\\\"image4.jpg\\\" />\\n        <img src=\\\"image5.jpg\\\" />\\n    </div>\\n</div>\",\n      \"language\": \"html\"\n    }\n  ]\n}\n[/block]\nIn the Adaptive.js view file, select on the images with the JavaScript the code snippet:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"'slides': function(context) {\\n    return $('#carousel img');\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nThen in the template file, iterate over the images with code like:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"<ul class=\\\"carousel\\\">\\n    {#slides}\\n        <li>{.}</li>\\n    {/slides}\\n</ul>\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nThe `{.}` notation refers to the current element. It iterates through each element in the `slides` conditional and prints out each image inside a new `<li>` list item tag.\n\nIn the output file, the HTML is:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"<ul class=\\\"carousel\\\">\\n    <li><img src=\\\"image1.jpg\\\" /></li>\\n    <li><img src=\\\"image2.jpg\\\" /></li>\\n    <li><img src=\\\"image3.jpg\\\" /></li>\\n    <li><img src=\\\"image4.jpg\\\" /></li>\\n    <li><img src=\\\"image5.jpg\\\" /></li>\\n</ul>\",\n      \"language\": \"html\"\n    }\n  ]\n}\n[/block]\n----------------------------------\n\n# F. Partials: {>partial/}\n\nYou can include partial templates in your template. This is useful when a piece\nof markup needs to be used on multiple templates.\n\nFor example, let's use the following code in the template to look for the `_cartItems.dust` partial:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"<h1>Cart</h1>\\n\\n{>_cartItems/}\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nThe contents of the partial are:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"<ul>\\n    <li>Bananas ($1.99)</li>\\n    <li>Oranges ($2.29)</li>\\n    <li>Strawberries ($3.99)</li>\\n</ul>\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nNow the output HTML becomes:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"<h1>Cart</h1>\\n\\n<ul>\\n    <li>Bananas ($1.99)</li>\\n    <li>Oranges ($2.29)</li>\\n    <li>Strawberries ($3.99)</li>\\n</ul>\",\n      \"language\": \"html\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"As a best practice, prefix the partial template file names with an '_' underscore character.\",\n  \"title\": \"Best Practice\"\n}\n[/block]\n----------------------------------\n\n# G. Blocks: {+partial}\n\nCreate named blocks in your templates with the option to override them later.\n\nPre-define several blocks in the common base template, and then override\ncertain blocks as necessary.\n\nIn this example, the base `base.dust` template has a default header:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"<header>\\n    {+header}\\n        <h1>Default Header</h1>\\n    {/header}\\n</header>\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nThis code defines the `header` section. You can override the contents of this section now.\n\n----------------------------------\n\n# H. Block Overrides: {<override}\n\nAssuming the same base template in the previous example, we can override the\ndefault header block in a child template like this:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{>\\\"templates/base\\\"/}\\n\\n{<header}\\n    <h1>Home</h1>\\n{/header}\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nIn this example, we inherit the `base.dust` template and then override its`header` block.\n\nThe final HTML will look like this:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"<header>\\n    <h1>Home</h1>\\n</header>\",\n      \"language\": \"html\"\n    }\n  ]\n}\n[/block]\n----------------------------------\n\n# I. Extending Blocks with {\\_SUPER\\_}\n\nTo extend a block rather than to completely override it, use the `{_SUPER_}` form.\n\nLet us say that we have a base `base.dust` template with the block:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{+scripts}\\n    {trackingScripts}\\n{/scripts}\",\n      \"language\": \"sass\"\n    }\n  ]\n}\n[/block]\nHere, we define a block called `scripts` and we populate it with a key called `trackingScripts`.\n\nOn another given template, we can add a new script in addition to the\ntracking scripts with the `{_SUPER_}` code.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{>\\\"templates/base\\\"/}\\n\\n{<scripts}\\n    {_SUPER_}\\n    <script>\\n         ...\\n    </script>\\n{/scripts}\",\n      \"language\": \"sass\"\n    }\n  ]\n}\n[/block]\nThe `{_SUPER_}` block refers to all of the content of the `{trackingScripts}` block. Then a new script is added to the page after the tracking scripts.\n\nThe final HTML looks like this:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"<!-- tracking scripts -->\\n<script href=\\\"analytics.js\\\"></script>\\n\\n<!-- new script -->\\n<script>\\n    ...\\n</script>\",\n      \"language\": \"html\"\n    }\n  ]\n}\n[/block]\n----------------------------------\n\n# J. Path Resolution {@getUrl}\n\nAdaptive.js provides a Dust.js helper for resolving paths to assets. The helper takes three arguments:\n[block:parameters]\n{\n  \"data\": {\n    \"h-0\": \"Argument Name\",\n    \"h-1\": \"Argument Description\",\n    \"0-0\": \"path\",\n    \"0-1\": \"The relative path to the asset.\",\n    \"1-0\": \"baseUrl (optional)\",\n    \"1-1\": \"The origin part of the assets url.\",\n    \"2-0\": \"cacheBreaker (optional)\",\n    \"2-1\": \"A string, tacked onto the end of the URL as a `querystring` parameter to force caches to fetch a new version of the asset.\"\n  },\n  \"cols\": 2,\n  \"rows\": 3\n}\n[/block]\nIf you don't specify the `baseUrl` argument, or the `cacheBreaker` argument, the helper\nautomatically fills in the proper values.\n\nFor example, use the following code in the view file:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"<link href=\\\"{@getUrl path=\\\"/assets/css/stylesheet.css\\\" /}\\\"\\nrel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\",\n      \"language\": \"html\"\n    }\n  ]\n}\n[/block]\nThis compiles to the following in the final output HTML:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"<link href=\\\"http://localhost:8080/assets/css/stylesheet.css?a1s2d3f4\\\"\\nrel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\",\n      \"language\": \"html\"\n    }\n  ]\n}\n[/block]\n----------------------------------\n\n# K. Base Template: base.dust\n\nThe `base.dust` template file is the basis for all other template files on your site.\n\nAt the top of most of the template files, the template inherits from the base template:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{>\\\"templates/base\\\"/}\\n\\n{<contentBlock}\\n    ...\\n{/contentBlock}\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nThe code snippet above includes all the code from the `base.dust` base template and then\noverrides the `contentBlock` block with your own template-specific content.",
        "excerpt": "A quick reference guide for the Dust.js syntax in your Adaptive.js views.",
        "slug": "dustjs-cheat-sheet",
        "type": "basic",
        "title": "Dust.js Cheat Sheet"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cea",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d23",
        "createdAt": "2015-04-20T23:35:25.187Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 5,
        "body": "Adaptive.js has special handling for external resources, including:\n\n* stylesheets\n* external JavaScript files\n* images\n* iframes\n\nWhen a browser encounters these resources, it starts to download the resource contents.\nHowever, Adaptive.js prevents the download from occurring during the transformation process.\n\nAdaptive.js does this by changing the `src` or `href` attributes of an HTML tag to `x-src` or `x-href`.\nThis prevention is done in case the resources are removed or changed for mobile.\n\nFor example, an image tag changes from `<img src=\"hero.jpg\" />` to `<img x-src=\"hero.jpg\" />`.\n\nTo replace the desktop hero image with a mobile-friendly one, you do the replacement in the view:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"// Store the hero image from the\\n// interim HTML in the $hero variable.\\nvar $hero = $('img[x-src=\\\"hero.jpg\\\"]');\\n\\n// Change the $hero x-src attribute to\\n// the mobile version of the hero image.\\n$hero.attr('x-src', \\\"hero-mobile.jpg\\\");\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nIn the view, you must use the `x-src` or `x-href` attributes. Once the transformation process is complete, Adaptive.js automatically swaps the `x-src` and `x-href` attributes back to `src `and `href`.\n\nFrom the previous example, the adapted page has the image tag `<img src=\"hero-mobile.jpg\" />`.",
        "excerpt": "Load external objects such as images into your mobile site adaptation.",
        "slug": "work-with-external-resources",
        "type": "basic",
        "title": "Work with External Resources"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cea",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d1d",
        "createdAt": "2015-03-17T21:06:37.679Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 6,
        "body": "## Grunt\n\nGrunt is a JavaScript task runner that Adaptive.js uses to perform routine development tasks. There are a few custom Grunt tasks that we have specifically for Adaptive.js.\nUse these commands in either Command Prompt (Windows) or Terminal (Mac).\n\n***\n\n### 1. Start a local server on your computer\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt preview\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Leave this command window open. It is running the preview server that watches for changes to your project files so your bundle recompiles as you save changes.\"\n}\n[/block]\nThis builds your project and starts an Adaptive.js server at default ports 8080 for HTTP and 8443 for HTTPS.\n\nTo change HTTP and HTTPS ports from the default, run the following command with custom port numbers:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt preview --port httpPortNumber --https-port httpsPortNumber\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n***\n\n### 2. Push a new bundle to Mobify Cloud\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt push\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n***\n\n### 3. Run automated tests on the mobile site\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt nightwatch\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Nightwatch.js\",\n  \"body\": \"Learn about Nightwatch.js in the [Automated Testing Overview](doc:automated-testing-overview).\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Official Grunt Documentation\",\n  \"body\": \"For more information on Grunt, read [the Official Grunt Documentation at http://gruntjs.com/](http://gruntjs.com/).\"\n}\n[/block]\n***\n\n## Bower\n\nBower is a JavaScript package manager that includes JavaScript libraries into your project.\nWith Bower, you can install third-party packages like jQuery, or Mobify libraries like Scooch, Bellows, and Pikabu.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"For more information on Bower, read [the official Bower documentation at http://www.bower.io](http://www.bower.io).\",\n  \"title\": \"Official Bower Documentation\"\n}\n[/block]\n***\n\n### 1. Add a New Bower Component\n\n#### A. Install the Plugin\n\n\n1\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n2\\. To change to your project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n3\\. To install a plugin of your choice, enter the command:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"bower install packageName --save\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n4\\. Replace `packageName` with the plugin to install, for example `pinny`. This downloads the specified package into your project’s `bower_components` folder.\n\nThe Bower `--save` flag automatically adds the package dependency line into the `bower.json` of the project.\n\n***\n\n#### B. Add a Path to the Plugin\n\n1\\. In the `assets/js/ui/config.js` file, add the relative path to the plugin file. \n\nThis example shows the path for the Pinny plugin.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"The config.js file listing\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/PzwcAev4QdScX1vY4050\",\n        \"configjs.png\",\n        \"627\",\n        \"344\",\n        \"#74b06c\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"There could be other plugin paths that are required along with a plugin. Follow your particular plugin README on GitHub for proper usage.\"\n}\n[/block]\n***\n\n### Update a Bower Component\n\n***\n\n#### A. Update the Version of the Plugin\n\n* In the `bower.json` file, change the version number of the component to update.\n\n  The example continues with Pinny.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"The bower.json file listing\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/1axUS6ISTHa5GaMm3ogR\",\n        \"bowerjs.png\",\n        \"306\",\n        \"400\",\n        \"#4380a6\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"To find out the next upgrade version for that plugin, visit the plugin GitHub release page.  For example, Pinny has its release page at\\n[https://github.com/mobify/pinny/releases](https://github.com/mobify/pinny/releases).\"\n}\n[/block]\n***\n\n#### B. Run the Terminal Commands\n\n1\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n2\\. To change to your project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n3\\. To clear the Bower plugin cache, enter the command:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"bower cache clean\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n4\\. To update the Bower plugin, enter the command:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"bower update packageName\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nWhen you run this `bower update` command, it pulls in any dependencies that the plugin needs.\n\nResolve any issues that come up about which version to use. Always use the most recent version.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"The Bower update\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/hZRih1H1Qi9a6RhmTf0Q\",\n        \"bowerupdate.png\",\n        \"927\",\n        \"327\",\n        \"#18b242\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n***\n\n## Yeoman\n\nYeoman is a scaffolding tool for web applications.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"As a best practice, use the Yeoman custom Adaptive.js generator to create new Adaptive.js projects.\"\n}\n[/block]\n1\\. Open a new Terminal (Mac) or Command Prompt (Windows) \n\n2\\. To generate a scaffold for a new Adaptive.js project, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"yo adaptivejs\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n3\\. To generate a new view within an Adaptive.js project, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"yo adaptivejs:view\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Official Yeoman Documentation\",\n  \"body\": \"For more information on Yeoman, read [the official Yeoman documentation at http://yeoman.io/](http://yeoman.io/).\"\n}\n[/block]\n***\n\n## Require.js\n\nRequire.js is a JavaScript file and module loader. It allows you to define dependencies for your JavaScript module.\nThis definition ensures that the required dependencies load before you use them within the module.\n\nWe use Require.js for all JavaScript in Adaptive.js projects, including the router, views, and user interface JavaScript.\n\nIn the Router `adaptation/router.js` file, notice the first line has a `define()` function call.  This function takes as its parameters:\n\n* **an array:** file dependencies for the function to execute\n* **a function:** logic for this module\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"define(\\n\\n    // The array of file dependencies,\\n    // with the DOM, router, and home view.\\n    [‘$’, ‘adaptivejs/router’, ‘views/home’],\\n\\n    // The logic function for this module.\\n    // It takes the DOM, the router, and home\\n    // as parameters.\\n\\tfunction($, Router, Home) {\\n\\n\\t...\\n\\n});\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nNotice that the array of dependencies corresponds to the arguments of the function. Within the function,\nyou now refer to the dependencies as JavaScript objects. This is the pattern for almost all JavaScript files in Adaptive.js.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Official Require.js Documentation\",\n  \"body\": \"For more information on Require.js, read [the official Require.js documentation at http://requirejs.org/](http://requirejs.org/).\"\n}\n[/block]",
        "excerpt": "A quick introduction to the open-source libraries that Adaptive.js uses.",
        "slug": "work-with-adaptivejs-dependencies",
        "type": "basic",
        "title": "Work with Adaptive.js Dependencies"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cea",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d1e",
        "createdAt": "2015-03-17T21:39:30.385Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 7,
        "body": "Replace images for mobile when:\n\n* the image contains text.\n* the mobile and the desktop images require different image dimensions.\n* the mobile images require different art direction than their desktop counterparts.\n\n****\n\n## 1. Create a Mobile-Specific Image\n\n* Use Adobe Photoshop or your preferred image manipulation tool to generate the mobile-specific image.\n\nHere are our guidelines for creating mobile-specific images:\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Export images at least at twice the intended display size.\\n\\n* Most mobile devices have high density displays.\",\n  \"title\": \"Best Practice\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"View your images at the intended display size before exporting.\\n\\n* Ensure that text is readable when scaled down.\",\n  \"title\": \"Best Practice\"\n}\n[/block]\n****\n\n## 2. Update the Desktop Image HTML\n\n* By convention, add the `data-mobile-src` attribute to your image HTML with the location of your mobile-specific image.\n[block:parameters]\n{\n  \"data\": {\n    \"h-0\": \"Original HTML\",\n    \"h-1\": \"Updated HTML\",\n    \"0-0\": \"`<img src=\\\"product.jpg\\\" />`\",\n    \"0-1\": \"`<img src=\\\"product.jpg\\\" data-mobile-src=\\\"product-mobile.jpg\\\" />`\"\n  },\n  \"cols\": 2,\n  \"rows\": 1\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"The mobile asset does not download on desktop browsers. Only the asset in the `src` attribute downloads.\"\n}\n[/block]\n****\n\n## 3. Update the Adaptive.js View\n\nOn mobile, use the `data-mobile-src` image instead of the original desktop image.\n\n* To switch the desktop and the mobile images, update the view file to contain this function:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"...\\n\\n/**\\n * Returns the page context with the\\n * src tag overwritten with the\\n * data-mobile-src tag.\\n *\\n * @param {Object} context\\n * @return {Object} transformed page context\\n */\\npreProcess: function(context) {\\n\\n    $('img').each(function() {\\n\\n        var $img = $(this);\\n\\n        // Overwrite the src attribute with\\n        // the data-mobile-src attribute\\n        $img.attr('x-src', $img.attr('data-mobile-src'));\\n    });\\n\\n    return context;\\n}\\n\\n...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Use the `x-src` attribute instead of `src` when you manipulate images because Adaptive.js [handles external resources](doc:views) in a particular way.\"\n}\n[/block]\n***\n\nNow you have the mobile-specific images instead of the desktop images!",
        "excerpt": "Use mobile-specific images to replace desktop images.",
        "slug": "replace-images-for-mobile",
        "type": "basic",
        "title": "Replace Images for Mobile"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cea",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "5543c5ce795b590d001dc973"
        ],
        "_id": "5568d525d33aad0d00ec8d1f",
        "createdAt": "2015-03-17T23:17:16.797Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 8,
        "body": "Git is an open-source tool that allows you to control different versions of components in your project. Use Git to work on new features of your mobile site in branches. Test those branches for functionality before you merge them into the master version of your project.\n\nThis workflow document outlines how.\n\n---\n\n## 1. Develop a new Feature in a Git Branch off the Master Base\n\nTo develop new features in your project, create a new feature branch in Git.  The new branch is created from the `master` base by default.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Checkout a new feature branch off master.\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/Y4UnLENRLu5SLZfZtsBQ\",\n        \"checkout-1.png\",\n        \"406\",\n        \"164\",\n        \"#fc0404\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n1\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n2\\. To change to your local Git project repository, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/github/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n3\\. To create a new Git branch off master, enter the following commands on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git checkout master\\ngit checkout -b featureBranchName1\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"For a complete tutorial on Git branches, see the [Using Branches](https://www.atlassian.com/git/tutorials/using-branches/) tutorial from the Getting Git Right documentation set.\"\n}\n[/block]\n4\\. To commit the work in this feature branch, frequently enter the following commands on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git add -A\\ngit commit -m \\\"your commit message\\\"\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n5\\. As you work, ensure that there are no linting errors:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt lint\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nWhen you finish development, your QA tests the branch.\n\n***\n\n## 2. Test the Branch\n\nTest the new feature. Preview your local server on test devices.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Follow the tutorials [Preview a Local Adaptive.js Site on a Device](doc:preview-a-local-adaptivejs-site-on-a-device) or  [Preview a Local Server on your Computer](doc:preview-a-local-server-on-your-computer) to start to preview.\",\n  \"title\": \"Previewing\"\n}\n[/block]\n***\n\n## 3. Develop a Second Feature in a Git Branch off Master\n\nCreate a second feature branch off `master`.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"checkout a new second feature branch off master\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/Gyek8CToQvOiWLu6gH9p\",\n        \"checkout-2.png\",\n        \"407\",\n        \"240\",\n        \"#048bf9\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n1\\. To check which branch you are currently on, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git branch\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n2\\. Examine the output for the currently checked out branch. If your current branch is not  `master`, continue to the next step.\n\n3\\. To change to the `master` branch it Git, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git checkout master\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Keep distinct feature development separate even as you develop multiple project features in parallel.\",\n  \"title\": \"Best Practice\"\n}\n[/block]\n4\\. To create a second feature branch in Git, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git checkout -b featureBranchName2\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n***\n\n## 4. Test the Second Feature Branch\n\nTest the second feature branch with the same procedure as for the first branch.\n\n***\n\n## 5. Merge the First and Second Feature Branches into a Release Branch\n\nOnce both features pass QA, merge the two branches into a single release branch. This release branch is a new branch off `master`.\n\nThe branch successively merges the changes from the first branch and the second branch.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"The Git `merge` command uses the current branch as the branch into which changes from another branch are merged into. Read about the Git `merge` command in the [official Git merge documentation](http://git-scm.com/docs/git-merge) page.\",\n  \"title\": \"git merge\"\n}\n[/block]\nCreate a release branch off `master`.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"checkout a new feature release branch off master\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/X47udyVQN6xjzt5tBJwg\",\n        \"checkout-f.png\",\n        \"348\",\n        \"278\",\n        \"#058af7\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n1\\. To check which branch you are currently on, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git branch\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n2\\. Examine the output for the currently checked out branch. If your current branch is not  `master`, continue with the next step. If you are already on the `master` branch, skip ahead to create the release branch.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git checkout master\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n3\\. To change to the `master` branch it Git, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git checkout master\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice\",\n  \"body\": \"Keep distinct feature development separate even as you develop multiple project features in parallel.\"\n}\n[/block]\n4\\. To create the release branch in Git, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git checkout -b releaseBranchName\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nYou are now in the release branch. Now, merge the first feature branch into the release branch.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"merge the first branch into the feature release branch\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/JpA2vRpSgCZDeWX1QtOV\",\n        \"merge-1.png\",\n        \"421\",\n        \"259\",\n        \"#048cfc\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n5\\. To merge the `featureBranchName1` branch into the current branch, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git merge featureBranchName1\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nNow, merge the second feature branch into the feature release branch.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"merge the second branch into the feature release branch\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/fwlahLdTR2u3yZgkb89N\",\n        \"merge-2.png\",\n        \"412\",\n        \"244\",\n        \"#fb0404\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n6\\. To merge the `featureBranchName2` second feature branch into the current release branch, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git merge featureBranchName2\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nYour release branch now has all of the commits of the first and second feature branch.\n\n7\\. If you are done with the first and second feature branches, delete them with the commands:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git branch -d featureBranchName1\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git branch -d featureBranchName2\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nTest the release branch to ensure that the merge steps did not introduce problems.  Use the same test procedures as for the individual branches.\n\nWhen you are ready, merge the release branch into `master`.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"merge the feature release branch into master\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/VaWl4YCJQVKmApQlr3Nq\",\n        \"merge-f.png\",\n        \"342\",\n        \"89\",\n        \"#ac7434\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n8\\. To go back to the `master` branch, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git checkout master\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n9\\. To merge the `releaseBranchName` release branch into the `master` branch that is currently checked out, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git merge releaseBranchName\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n***\n\n## 6. Create a Bundle\n\nAfter the new feature test, create a new Mobify bundle from the feature release branch.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Create a New Bundle\",\n  \"body\": \"Follow the steps in the [Create a New Bundle](doc:create-a-new-bundle) tutorial.\"\n}\n[/block]\n***\n\n## 7. Test the Bundle\n\nPreview the bundle on various devices to test the bundle. Follow the previewing tutorials as before.\n\n***\n\n## 8. Publish the Bundle\n\nPublish the bundle to deploy to your site visitors.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Publishing\",\n  \"body\": \"Work through the [Publish a Bundle](doc:publish-bundle) tutorial to display your mobile site.\"\n}\n[/block]\n***\n\n## 9. Smoketest the Bundle\n\nRegress the changes after they go live.\n\n***\n\n## 10. Merge to Master\n\nEnsure that the `master` branch is in sync with the newly published bundle.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git checkout master\\ngit merge releaseBranchName\\ngit push\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]",
        "excerpt": "Use this workflow in your mobile site development.",
        "slug": "organize-your-development-workflow",
        "type": "basic",
        "title": "Organize your Development Workflow with Git"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cea",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d20",
        "createdAt": "2015-03-17T23:58:30.457Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 9,
        "body": "Build your site without installing a Mobify tag if:\n\n* the tag needs IT approval before its installation\n* the tag is accidentally missing on some pages\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Install the Mobify Tag before you launch the mobile site. This tutorial allows you to temporarily build your site while you install the tag.\"\n}\n[/block]\n***\n\n## 1. Download Charles\n\nCharles is a web debugging proxy application. We can use it to inject the Mobify tag on your site, using its Rewrite Tool, when accessing your site on your computer.\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"This does not inject the tag for your site visitors — just for your computer.\"\n}\n[/block]\n[Download Charles](http://www.charlesproxy.com/download/)\n\n***\n\n## 2. Get the Mobify Tag\n\nYou have access the Mobify Tag at any time. To retrieve the tag, follow these steps.\n\n***\n\n1. In your browser, go to [Mobify Cloud at https://cloud.mobify.com](https://cloud.mobify.com).\n\n2. Click on your Adaptive.js project.\n\n3. On the **\"Bundles/Configure\"** link button cluster, click the **\"Configure\"** link button.\n\n4. In the side menu links, click **\"Tag\"**.\n\n5. Scroll down to the **\"Install Tag\"** section, then copy the Mobify Tag from the HTML in the text box.\n\n***\n\n## 3. Add the Charles Rewrite Rule\n\n1\\. Open Charles.\n\n2\\. On the Charles menu bar, navigate to the **\"Tools\"** menu.\n\n3\\. In the **\"Tools\"** menu, select the **\"Rewrite\"** menu option.\n\n4\\. In the **\"Rewrite Settings\"** dialog box, enable the **“Enable Rewrite”** toggle.  \n\n5\\. Also in the **\"Rewrite Settings\"** dialog box, under the **\"Sets\"** section, click the **\"Add\"** button to create a new rewrite rule.\n\n6\\. In the **\"Name\"** form field, type in the name of the new rewrite rule.\n\n7\\. Under the **\"Locations\"** section, click the **\"Add\"** button.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Edit Location Dialog Box\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/KTQYFF2SSU2dB916eqNI\",\n        \"edit-location.png\",\n        \"656\",\n        \"609\",\n        \"#30476d\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n8\\. In the **\"Edit Location\"* dialog box, leave all of the form fields blank, except for the **\"Host\"** form field.\n\n9\\. In the **\"Host\"** form filed, enter the URL of your site:\n\n* **Host:** `www.yourSiteURL.com`\n\n10\\. Click the **\"OK\"** button.\n\n11\\. In the **\"Rewrite Settings\"** dialog box, under the **\"Rules\"** section, click the **\"Add\"** button to create the actual rule.\n\n12\\. In the **\"Rewrite Rule\"** dialog box, enter these values into their respective form fields:\n\n\n  * **Type:** Body\n  * **Where:** Response\n  * **Match:**\n    * **Value:** `<head>`\n  * **Replace:**\n    * **Value:** `<head><!--paste the Mobify tag here-->`\n    * Enable the **\"Replace First\"** toggle.\n  \n13\\. Click the **\"OK\"** button to set these values in the **\"Rewrite Rule\"** dialog box.\n\n14\\. In the **\"Rewrite Settings\"** dialog box, click the **\"Apply\"** button.  Then click the **\"OK\"** button.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Leave the Charles application open to run for the next step.\"\n}\n[/block]\n***\n\n## 4. Verify Tag Spoofing\n\n1. In your local computer browser, go to your website.\n\n2. Check the page source to verify that the Mobify tag is now in the `<head>` section.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"It takes a moment for spoofing to activate. **Spoofing occurs only on your local computer that is running Charles.**\"\n}\n[/block]\n***\n\nNow you have enabled the Mobify tag spoofing on your site on your local computer! Visitors that access your site over the internet still do not have the Mobify tag. Make sure that you install the Mobify tag before you deploy your mobile site.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Previewing\",\n  \"body\": \"Follow the [Preview your Project on a Device](doc:preview-on-device) or [Preview your Project](doc:preview-your-project) tutorials to preview your site.\"\n}\n[/block]",
        "excerpt": "Follow this tutorial to temporarily bypass the installation of the Mobify Tag while you build your mobile site.",
        "slug": "build-without-mobify-tag",
        "type": "basic",
        "title": "Build Without a Mobify Tag Installed"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cea",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "5547be9970b82f0d0027c2ed",
          "5553cf6beac63f0d003e6cbd"
        ],
        "_id": "5568d525d33aad0d00ec8d21",
        "createdAt": "2015-03-20T20:10:35.797Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 11,
        "body": "[block:html]\n{\n  \"html\": \"<table border=\\\"0\\\" align=\\\"center\\\">\\n  <tr>\\n    <th><a class=\\\"section-title\\\" href=\\\"#/adaptive/\\\">Adaptive</a></th>\\n    <th><a class=\\\"section-title\\\" href=\\\"#/defaults/\\\">Defaults</a></th>\\n    <th><a class=\\\"section-title\\\" href=\\\"#/i18n/\\\">Internationalization</a></th>\\n  </tr>\\n  <tr>\\n    <td>\\n      <ul>\\n            <li>\\n                <a href=\\\"#/adaptive-disable/\\\">\\n                    Adaptive.disable\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/adaptive-init/\\\">\\n                    Adaptive.init\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/adaptive-renderPage/\\\">\\n                    Adaptive.renderPage\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/adaptive-restore/\\\">\\n                    Adaptive.restore\\n                </a>\\n            </li>\\n        </ul>\\n    </td>\\n    <td>\\n    \\t<ul>\\n      \\t<li>\\n                    <a href=\\\"#/defaults-getContext/\\\">\\n                        Defaults.getContext\\n                    </a>\\n                </li>\\n            </ul>      \\n    </td>\\n    <td>\\n        <ul>\\n            <li>\\n                <a href=\\\"#/i18n-constructor/\\\">\\n                    I18n Constructor\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/i18n-setDefaultLocale/\\\">\\n                    I18n.prototype.setDefaultLocale\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/i18n-setLocale/\\\">\\n                    I18n.prototype.setLocale\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/i18n-translate/\\\">\\n                    I18n.prototype.translate\\n                </a>\\n            </li>\\n        </ul>\\n    </td>\\n  </tr>\\n  <tr>\\n    <th><a class=\\\"section-title\\\" href=\\\"#/require-plugins/\\\">Require.js Plugin</a></th>\\n    <th><a class=\\\"section-title\\\" href=\\\"#/require-plugins/\\\">ResizeImages</a></th>\\n    <th><a class=\\\"section-title\\\" href=\\\"#/router/\\\">Router</a></th>\\n  </tr>\\n  <tr>\\n    <td>\\n\\t\\t\\t<ul>\\n            <li>\\n                <a href=\\\"#/dust-plugin/\\\">\\n                    Require.js Dust Plugin\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/external-plugin/\\\">\\n                    Require.js External Plugin\\n                </a>\\n            </li>\\n        </ul>\\n    </td>\\n    <td>\\n          \\t<ul>\\n            <li>\\n                <a href=\\\"#/resize-images-getImageURL/\\\">\\n                    ResizeImages.getImageURL\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/resize-images-processOptions/\\\">\\n                    ResizeImages.processOptions\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/resize-images-resize/\\\">\\n                    ResizeImages.resize\\n                </a>\\n            </li>\\n        </ul>\\n    </td>\\n    <td>\\n                <ul>\\n            <li>\\n                <a href=\\\"#/router-ignore/\\\">\\n                    Router.Ignore\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/router-add/\\\">\\n                    Router.prototype.add\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/router-getRoutes/\\\">\\n                    Router.prototype.getRoutes\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/router-resolve/\\\">\\n                    Router.prototype.resolve\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/router-selectorMatch/\\\">\\n                    Router.prototype.selectorMatch\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/router-urlMatch/\\\">\\n                    Router.prototype.urlMatch\\n                </a>\\n            </li>\\n        </ul>\\n    </td>\\n  </tr>\\n\\t<tr>\\n    <th><a class=\\\"section-title\\\" href=\\\"#/utils/\\\">Utils</a></th>\\n    <th><a class=\\\"section-title\\\" href=\\\"#/view-processor/\\\">View Processor</a></th>\\n\\t</tr>\\n  <tr>\\n    <td>\\n              <ul>\\n            <li>\\n                <a href=\\\"#/utils-absolutify/\\\">\\n                    Utils.absolutify\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-clone/\\\">\\n                    Utils.clone\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-domIsReady/\\\">\\n                    Utils.domIsReady\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-extend/\\\">\\n                    Utils.extend\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-getAdaptiveBuild/\\\">\\n                    Utils.getAdaptiveBuild\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-getAssetUrl/\\\">\\n                    Utils.getAssetUrl\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-getBuildOrigin/\\\">\\n                    Utils.getBuildOrigin\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-getDoctype/\\\">\\n                    Utils.getDoctype\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-viewportProperties/\\\">\\n                    Utils.getMetaViewportProperties\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-getPhysicalScreenSize/\\\">\\n                    Utils.getPhysicalScreenSize\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-isDebug/\\\">\\n                    Utils.isDebug\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-isFunction/\\\">\\n                    Utils.isFunction\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-isObject/\\\">\\n                    Utils.isObject\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-isRegExp/\\\">\\n                    Utils.isRegExp\\n                </a>\\n            </li>\\n\\n            <li>\\n                <a href=\\\"#/utils-keys/\\\">\\n                    Utils.keys\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-matchMedia/\\\">\\n                    Utils.matchMedia\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-outerHTML/\\\">\\n                    Utils.outerHTML\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-removeBySelector/\\\">\\n                    Utils.removeBySelector\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-removeElements/\\\">\\n                    Utils.removeElements\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-supportsLocalStorage/\\\">\\n                    Utils.supportsLocalStorage\\n                </a>\\n            </li>\\n            <li>\\n                <a href=\\\"#/utils-values/\\\">\\n                    Utils.values\\n                </a>\\n            </li>\\n        </ul>\\n    </td>\\n    <td>\\n      <ul>\\n            <li>\\n                <a href=\\\"#/view-evaluateContext/\\\">\\n                    View.evaluateContext\\n                </a>\\n            </li>\\n        </ul>\\n    </td>\\n  </tr>\\n</table>\\n\\n<table border=\\\"0\\\" width=\\\"80%\\\" align=\\\"center\\\" bgcolor=\\\"#DFDFDF\\\">\\n    <tr>\\n        <td><h2><a id=\\\"/adaptive/\\\">Adaptive</a></h2></td>\\n    </tr>\\n    <tr>\\n        <td>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"adaptive-disable\\\">Adaptive.disable(url)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>disable</code> function disables the Adaptive.js transformations in your current session. It sets a cookie that stops Adaptive.js from loading.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>url</td>\\n                            <td>String</td>\\n                            <td><i>optional</i> Where the page should redirect after disabling adaptation. If the function is called before we have rendered out a new page (in capturing mode) the URL parameter is ignored and we simply call Adaptive.restore().</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-html\\\">&lt;a href=\\\"#\\\" onclick=\\\"Adaptive.disable()\\\"&gt;Back to desktop&lt;/a&gt;</code></pre></p>\\n                    </td></tr>\\n            </table>\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/adaptive-init/\\\">Adaptive.init(callback)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>init</code> function kicks off adaptation, prevents all resources from downloading on the page, and passes the original document to your callback.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>callback</td>\\n                            <td>Function</td>\\n                            <td><i>optional</i> A function to call after the current command finishes execution. Function which gets executed once the init function is finished. The callback is passed the original document.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">Adaptive.init(function(doc){\\n    // Render the original document.\\n    Adaptive.renderPage(doc.documentElement.outerHTML);\\n});</code></pre></p>\\n                    </td></tr>\\n            </table>\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/adaptive-renderPage/\\\">Adaptive.renderPage(htmlString)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>renderPage</code> function rewrites the original document with the one that is provided by the <code>htmlString</code> argument.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>htmlString</td>\\n                            <td>String</td>\\n                            <td>The HTML representation of the adapted page.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">Adaptive.renderPage('<html><body>New Document</body></html>');</code></pre></p>\\n                    </td></tr>\\n            </table>\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/adaptive-restore/\\\">Adaptive.restore()</a>\\n</h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>restore</code> function reverts your page to display the original source document.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">// Use the Router to resolve a captured document.\\nvar view = router.resolve(capturedDocument);\\n\\n// If a view is not found, use the restore function\\n//  to bring back the desktop site.\\nif (!view)\\n{\\n    return Adaptive.restore();\\n}</code></pre></p>\\n</td></tr>\\n</table> <!-- Ends the renderPage table -->\\n</td>\\n</tr>\\n</table> <!-- Ends the Adaptive table -->\\n<table border=\\\"0\\\" width=\\\"80%\\\" align=\\\"center\\\">\\n    <tr>\\n        <td><h2><a id=\\\"/defaults/\\\">Defaults</a></h2></td>\\n    </tr>\\n    <tr>\\n        <td>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/defaults-getContext/\\\">Defaults.getContext(document)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>getContext</code> function returns a context with a group of default keys such as <code>buildDirectory</code>.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>document</td>\\n                            <td>String</td>\\n                            <td>The document which should be used to determine defaults.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">var context = Defaults.getContext(document);</code></pre></p>\\n                    </td></tr>\\n            </table> <!-- Ends the getContext table -->\\n</td>\\n</tr>\\n</table> <!-- Ends the Defaults table -->\\n<table border=\\\"0\\\" width=\\\"80%\\\" align=\\\"center\\\">\\n    <tr>\\n        <td><h2><a id=\\\"/i18n/\\\">(Internationalization) I18n</a></h2></td>\\n    </tr>\\n    <tr>\\n        <td>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"i18n-constructor\\\">new I18n(defaultLocale, dictionary)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe constructor creates a new instance of an <code>i18n</code> translator object.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>defaultLaocale</td>\\n                            <td>String</td>\\n                            <td>The locale which should be the default when doing lookups</td>\\n                        </tr>\\n                        <tr>\\n                            <td>dictionary</td>\\n                            <td>Object</td>\\n                            <td>The dictionary used to look up translations</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">var translator = new I18n('en-US', dictionary);</code></pre></p>\\n                    </td></tr>\\n            </table>\\n            <p><hr width=\\\"90%\\\" align=\\\"center\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/i18n-setDefaultLocale/\\\">I18n.prototype.setDefaultLocale(locale)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>setDefaultLocale</code> function sets the default locale to look at if no current locale is set.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>locale</td>\\n                            <td>String</td>\\n                            <td>The locale which should be the default when doing lookups</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">translator.setDefaultLocale('en-CA');</code></pre></p>\\n                    </td></tr>\\n            </table>\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/i18n-setLocale/\\\">I18n.prototype.setLocale(locale)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>setLocate</code> function sets the current locale to use when doing translations.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>locale</td>\\n                            <td>String</td>\\n                            <td>The locale to use as the current locale.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">var translator = new I18n('en-US', dictionary);\\n// Set the locale to Germany.\\ntranslator.setLocale('de-DE');</code></pre></p>\\n                    </td></tr>\\n            </table>\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/i18n-translate/\\\">I18n.prototype.translate(key)</a>\\n</h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>translate</code> function returns the matching key for the current locale from the i18n dictionary. If no key was found, the key from the default locale will be returned. If no key in the default locale is returned, a message is returned saying the key could not be found.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">var translator = new I18n('en-US', dictionary);\\n\\ntranslator.setLocale('de-DE')\\ntranslator.translate('hello');\\n// Returns 'Guten Tag'</code></pre></p>\\n</td></tr>\\n</table> <!-- Ends the translate table -->\\n</td>\\n</tr>\\n</table> <!-- Ends the I18n table -->\\n\\n<table border=\\\"0\\\" width=\\\"80%\\\" align=\\\"center\\\">\\n    <tr>\\n        <td><h2><a id=\\\"/require-plugins/\\\">Require Plugins</a></h2></td>\\n    </tr>\\n    <tr>\\n        <td>\\n            <p>Modules are loaded with <code>require.js</code> in the <a href=\\\"http://requirejs.org/docs/whyamd.html\\\" target=\\\"_blank\\\">AMD format</a>.</p> <!--  blank_-->\\n        </td>\\n    </tr>\\n    <tr>\\n        <td>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/dust-plugin/\\\">Require.js Dust Plugin (Adaptation and UI)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\n<p>You can also load templates into Adaptation views and UI scripts using the <coce>dust</code> plugin provided with Adaptive.js. Templates live in the <code>adaptation/templates</code> folder for the adaptation, and the <code>assets/templates</code> folder for UI. They are loaded similarly to modules, with the addition of <code>dust!</code> before the module name to indicate that they need to be processed with the <code>require.js</code> <code>dust</code> plugin: [old code smaple loaction]</p>\\n<p>The <code>dust</code> plugin returns a function that you can use to process the markup from the template. It takes two arguments.</p>\\n<p>Like with modules, remember not to include the <code>.dust</code> after filenames.</p>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>context</td>\\n                            <td></td>\\n                            <td>Data that you want to pass to the template. Dust tags in the template like <code>foo</code> are replaced with the values provided here.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>callback</td>\\n                            <td> </td>\\n                            <td>A callback function that processes the returned content. The first parameter contains any errors encountered during rendering, and the second contains the HTML to be rendered.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Samples:</b><br></p>\\n<p>In the Adaptation:<br>\\n<pre><code class=\\\"language-javascript\\\">define([\\n    'adaptivejs/selectorEngine',\\n    'views/base',\\n    'dust!templates/home'\\n],\\nfunction($, BaseView, template) {\\n    return {\\n        template: template,\\n        extend: base,\\n        // ...\\n    }\\n});</code></pre></p>\\n<p>In the UI:<br>\\n<code class=\\\"language-javascript\\\">define(\\n    ['dust!templates/myTemplate'],\\n    function(myTmpl) {\\n        myTmpl({ foo: 'bar' }, function(err, html) {\\n            console.log('HTML :', html);\\n        });\\n    });</code></pre></p>\\n                </td></tr>\\n            </table> <!-- Ends the Dust plugin table -->\\n</td>\\n</tr>\\n<tr>\\n    <td>\\n        <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <tr><td><b><h3><a id=\\\"/external-plugin/\\\">Require.js External Plugin (UI)</a></h3></b></td></tr>\\n            <tr><td></td></tr>\\n            <tr><td>\\n                <p></p>\\n<p>In addition to loading new modules, you can reuse modules from the adaptation\\n using the <code>external</code> plugin for <code>require.js</code>. For example, let's say you have a template <code>_viewPartial</code> that you would like to use in both the adaptation in the UI. You would include the partial in your adaptation view, and then in your UI scripts, you would indicate to Adaptive.js that you have already built that template, and request that it be loaded into the UI without including it in the UI scripts again: [old code sample]</p>\\n<p>Note that with the second module in the dependency array, here we've also\\nadded the <code>dust!</code> to indicate that this is a <code>dust</code> template and not a module that we're reusing.\\n<p></p>\\n            </td></tr>\\n            <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">define(\\n    ['external!someModule',\\n    'external!dust!templates/partials/_viewPartial'],\\n    function(someModule, viewPartial) {\\n        someModule();\\n        viewPartial({ foo: 'bar' }, function(err, html)) {\\n            console.log('HTML: ', html);\\n    });\\n});</code></pre></p>\\n                </td></tr>\\n        </table> <!-- Ends the External plugin table_ -->\\n</td>\\n</tr>\\n</table> <!-- Ends the Require.js plugins table -->\\n<table border=\\\"0\\\" width=\\\"80%\\\" align=\\\"center\\\">\\n    <tr>\\n        <td><h2><a id=\\\"/resize-images/\\\">ResizeImages</a></h2></td>\\n    </tr>\\n    <tr>\\n        <td>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/resize-images-getImageURL/\\\">ResizeImages.getImageURL(url, options)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\n<p>The <code>getImageURL</code> function returns the URL that would be set as the value of the src as above.<br>\\nThis function is provided as a utility only for dealing with special cases such as CSS background images or lazy loader code. If you wish to resize images represented by an img element, use the <code>resize</code> function instead.</p>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>url</td>\\n                            <td>String</td>\\n                            <td>A string containing the original image URL that needs resizing.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>options</td>\\n                            <td>Object</td>\\n                            <td>An object that contains the image resize settings to apply. The <code>maxWidth</code> and <code>maxHeight</code> parameters are in raw device pixels here and do not have a default value.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>String</td>\\n                            <td>The URL to set as the value of the src above.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Samples:</b><br></p>\\n<p>In the Adaptation:<br>\\n<pre><code class=\\\"language-javascript\\\">var productImage = document.querySelector('.product-image')[0];\\nvar originalURL = productImage.src;\\nvar resizedURL = ResizeImages.getImageURL(originalURL, {\\n    cacheHours: 1\\n});\\nproductImage.src = resizedURL;\\n// http://ir0.mobify.com/project-mobify-com/c1/\\n// http://www.mobify.com/static/i/home/hero-2up.png</code></pre></p>\\n                </td></tr>\\n            </table> <!-- Ends the getImageURL table -->\\n</td>\\n</tr>\\n<tr>\\n    <td>\\n        <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <tr><td><b><h3><a id=\\\"/resize-images-processOptions/\\\">ResizeImages.processOptions()</a></h3></b></td></tr>\\n            <tr><td></td></tr>\\n            <tr><td>\\n                <p></p>\\n<p>The <code>processOptions</code> function returns an object that has the default image options set. The image width and the height are different for each device type for image display optimization.</p>\\n<p></p>\\n            </td></tr>\\n            <tr><td>\\n            <p></p>\\n            <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <caption><b>Output</b><br></caption>\\n                <tr bgcolor=\\\"#C0C0C0\\\">\\n                    <th>Type</th>\\n                    <th>Description</th>\\n                </tr>\\n                <tr>\\n                    <td>Object</td>\\n                    <td>The object that has the default image options set for the device.</td>\\n                </tr>\\n            </table>\\n            <p></p>\\n            </td></tr>\\n            <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">ResizeImages.processOptions();\\n\\n// returns (for an iPhone 5 visiting the site http://www.example.com/):\\n// {\\n//     proto: '//',\\n//     host: 'ir0.mobify.com',\\n//     projectName: \\\"oss-www-example-com\\\",\\n//     sourceAttribute: \\\"x-src\\\",\\n//     targetAttribute: \\\"x-src\\\",\\n//     webp: false,\\n//     onerror: 'ResizeImages.restoreOriginalSrc(event);'\\n//     maxWidth: 640\\n// }</code></pre></p>\\n                </td></tr>\\n        </table> <!-- Ends the processOptions table-->\\n</td>\\n</tr>\\n<tr>\\n    <td>\\n        <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <tr><td><b><h3><a id=\\\"/resize-images-resize/\\\">ResizeImages.resize(images, options)</a></h3></b></td></tr>\\n            <tr><td></td></tr>\\n            <tr><td>\\n                <p></p>\\n<p>The <code>resize</code> function rewrites the <code>src</code> tag of every image in the images array with the URL of the resized image.</p>\\n                <p></p>\\n            </td></tr>\\n            <tr><td>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Input</b><br></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Parameter Name</th>\\n                        <th>Parameter Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>images</td>\\n                        <td>Array</td>\\n                        <td>An array of img and/or picture elements</td>\\n                    </tr>\\n                    <tr>\\n                        <td>options</td>\\n                        <td>Object</td>\\n                        <td>An object containing the image resize settings to apply as above, except that the `maxWidth` and `maxHeight` parameters are in raw device pixels here and do not have a default value.<br>\\n<li><b>cacheBreaker:</b> A string added to the final image URL to break the cache.</li>\\n<li><b>cacheHours:</b> Sets the length of time (in hours) for the image(s) to be cacheable, both on the CDN and in the browser. Defaults to 8 hours.</li>\\n<li><b>devicePixelRatio:</b> A number representing the ratio of CSS pixels to real device pixels, Exposed for testing purposes. Defaults to window.devicePixelRatio.</li>\\n<li><b>format:</b> A string designating the format of resized image. Values: 'jpg', 'png', 'webp', 'q' (original format). Defaults to no change of format. Note: Non-animated GIFs are converted to PNG and animated GIFs cannot have their format changed.</li>\\n<li><b>maxHeight:</b> Maximum height of the resized image, in CSS pixels. Must use in conjunction with maxWidth.</li>\\n<li><b>maxWidth:</b> Maximum width of the resized image, in CSS pixels. Defaults to device width.</li>\\n<li><b>quality:</b> An integer from 1-100. Sets the quality of the output image. The original image must be a jpg or webp image, or the format must be set to jpg or webp for this to have any effect.</li>\\n<li><b>resize:</b> A boolean that controls whether to scale the images. If 'false', the images are served through the image resizer CDN and possibly re-encoded, but not resized. Defaults to 'true'.</li>\\n<li><b>sourceAttribute:</b> The attribute to get the source value from. Defaults to 'x-src'.</li>\\n<li><b>targetAttribute:</b> The attribute to set with the resized URL. Defaults to 'x-src'.</li>\\n                        </td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n            </td></tr>\\n<tr><td><p><b>Code Sample:</b><br></p>\\n<pre><code class=\\\"language-javascript\\\">var images = document.querySelectorAll('img');\\nResizeImages.resize(images, {\\n    format: 'jpg',\\n    quality: 80\\n});</code></pre></p></td></tr>\\n<tr><td>\\n<p><b>Profiles:</b><br></p>\\n<p>Some options presets are provided on ResizeImages.profiles<br>\\n<li>SHORT_CACHE sets a 2 hour cache lifetime on the resulting asset, for images that might change without changing URL.</li>\\n<li>LONG_CACHE sets a 1 week cache lifetime for assets that will remain valid for longer periods.</li><br>\\nYou can combine these profiles with your own options objects like so:<br>\\n<pre><code class=\\\"language-javascript\\\">var options = Utils.extend({\\n    yourOptions\\n}, ResizeImages.profiles.SHORT_CACHE);</code></pre>\\n</td></tr>\\n<tr><td>\\n<p><b>Best Practices</b>:<br></p>\\n<p>Be cautious when using this API — any assets used with it will be served with caching headers, as such, it is important to be sure that caching them will not be problematic.<p>\\n<p>Image types that should not be used with this API:<br>\\n<li>Tracking pixels</li>\\n<li>Dynamically generated images (e.g. counters)</li>\\n<li>Images that will change, but whose URL cannot be changed</li></p>\\n</td></tr>\\n</table> <!-- Ends the resize table -->\\n</td>\\n</tr>\\n</table> <!-- Ends the ResizeImages table -->\\n<table border=\\\"0\\\" width=\\\"80%\\\" align=\\\"center\\\">\\n    <tr>\\n        <td><h2><a id=\\\"/router/\\\">Router</a></h2></td>\\n    </tr>\\n    <tr>\\n        <td>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/router-ignore/\\\">Router.Ignore</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n<p>The <code>Ignore</code> constant is used in conjunction with a function match that returns a truthy value. Use this constant to skip adaptations and to fall back to the desktop site.</p>\\n                </td></tr>\\n                <p></p>\\n<tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">router.add(function() {\\n    // To force the ignore, the function match returns a truthy value.\\n    return $('.my-page-to-ignore').length;\\n}, Router.Ignore)</code></pre></p>\\n</td></tr>\\n</table><!-- ends the Ignore table -->\\n<p><hr width=\\\"90%\\\"></p>\\n<table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n    <tr><td><b><h3><a id=\\\"/router-add/\\\">Router.prototype.add(function, view)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>add</code> function adds a route to the router. The route is matched if the function evaluates to a truthy value. When the route is matched, the <code>resolve</code> method returns the router.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>function</td>\\n                            <td>Function</td>\\n                            <td>Function which returns true when the route should match.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>view</td>\\n                            <td>Object</td>\\n                            <td>The view to render if the matching function returns true.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Object</td>\\n                            <td>The router.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Samples:</b><br></p>\\n<p>Single call:<br><pre><code class=\\\"language-javascript\\\">router.prototype.add(Router.selectorMatch('body.home'), HomeView);</code></pre><br>\\nChaining: The add function returns the router itself, so it supports function chaining.\\n<pre><code class=\\\"language-javascript\\\">router.add(Router.selectorMatch('body.home'), HomeView)\\n    .add(Router.selectorMatch('.cartItem'), CartView)\\n    .add(Router.urlMatch('/order/confirmation'), ConfirmationView);</code></pre></p>\\n</td></tr>\\n</table><!-- ends the Add table -->\\n<p><hr width=\\\"90%\\\"></p>\\n<table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n    <tr><td><b><h3><a id=\\\"/router-getRoutes/\\\">Router.prototype.getRoutes()</a>\\n</h3></b></td></tr>\\n    <tr><td></td></tr>\\n    <tr><td>\\n        <p></p>\\nThe <code>getRoutes</code> function returns an array with all the routes that have been added to the router. Use this function for debugging or doing more complex things with the router.\\n        <p></p>\\n    </td></tr>\\n    <p></p>\\n    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n        <caption><b>Output</b><br></caption>\\n        <tr bgcolor=\\\"#C0C0C0\\\">\\n            <th>Type</th>\\n            <th>Description</th>\\n        </tr>\\n        <tr>\\n            <td>Array</td>\\n            <td>The array of routes that have been added to the router.</td>\\n        </tr>\\n    </table>\\n    <p></p>\\n    <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">router.add(Router.selectorMatch('body.home'), HomeView)\\n\\nrouter.getRoutes();\\n// returns [{func: function(){...}, view: HomeView}]</code></pre></p>\\n</td></tr>\\n</table><!-- ends the getRoutes table -->\\n<p><hr width=\\\"90%\\\"></p>\\n<table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n    <tr><td><b><h3><a id=\\\"/router-resolve/\\\">Router.prototype.resolve(document)</a></h3></b></td></tr>\\n    <tr><td></td></tr>\\n    <tr><td>\\n        <p></p>\\nThe <code>resolve</code> function evaluates each route against the provided document until a route is matched. The function returns the view associated with the matched route, or a blank to fall back to the desktop site version.\\n        <p></p>\\n    </td></tr>\\n    <tr><td>\\n        <p></p>\\n        <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <caption><b>Input</b><br></caption>\\n            <tr bgcolor=\\\"#C0C0C0\\\">\\n                <th>Parameter Name</th>\\n                <th>Parameter Type</th>\\n                <th>Description</th>\\n            </tr>\\n            <tr>\\n                <td>document</td>\\n                <td>Object</td>\\n                <td>The document to run the matching criteria on.</td>\\n            </tr>\\n        </table>\\n        <p></p>\\n        <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <caption><b>Output</b><br></caption>\\n            <tr bgcolor=\\\"#C0C0C0\\\">\\n                <th>Type</th>\\n                <th>Description</th>\\n            </tr>\\n            <tr>\\n                <td>Object</td>\\n                <td>The view object, or a blank.</td>\\n            </tr>\\n        </table>\\n        <p></p>\\n        </td></tr>\\n        <tr><td><p><b>Code Sample:</b><br></p>\\n        <p><pre><code class=\\\"language-javascript\\\">var view = router.resolve(capturedDocument);\\n// If the view is blank, fall back to the desktop site.\\nif (!view) {\\n    console.error('No routes were matched. Render the original document.');\\n    Adaptive.restore();\\n    return;\\n}</code></pre></p>\\n        </td></tr>\\n</table><!-- Ends the Resolve table -->\\n<p><hr width=\\\"90%\\\"></p>\\n<table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n    <tr><td><b><h3><a id=\\\"/router-selectorMatch/\\\">Router.selectorMatch(selector)</a></h3></b></td></tr>\\n    <tr><td></td></tr>\\n    <tr><td>\\n        <p></p>\\nThe <code>selectorMatch</code> function returns a function that checks if the given selector is in the document. The returned function evaluates to true or false.\\n        <p></p>\\n    </td></tr>\\n    <tr><td>\\n        <p></p>\\n        <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <caption><b>Input</b><br></caption>\\n            <tr bgcolor=\\\"#C0C0C0\\\">\\n                <th>Parameter Name</th>\\n                <th>Parameter Type</th>\\n                <th>Description</th>\\n            </tr>\\n            <tr>\\n                <td>selector</td>\\n                <td>String</td>\\n                <td>Selector to check for.</td>\\n            </tr>\\n        </table>\\n        <p></p>\\n        <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <caption><b>Output</b><br></caption>\\n            <tr bgcolor=\\\"#C0C0C0\\\">\\n                <th>Type</th>\\n                <th>Description</th>\\n            </tr>\\n            <tr>\\n                <td>Function</td>\\n                <td>The function to evaluate to a Boolean value.</td>\\n            </tr>\\n        </table>\\n        <p></p>\\n    </td></tr>\\n    <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">Router.selectorMatch('body.home')</code></pre></p>\\n</td></tr>\\n</table><!-- ends the selectorMatch table -->\\n<p><hr width=\\\"90%\\\"></p>\\n<table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n    <tr><td><b><h3><a id=\\\"/router-urlMatch/\\\">Router.urlMatch(urlFragment)</a>\\n</h3></b></td></tr>\\n    <tr><td></td></tr>\\n    <tr><td>\\n        <p></p>\\nThe <code>urlMatch</code> function returns a function which checks if the <code>urlFragment</code> parameter is in the current page's path name. The returned function evaluates to true or false. Pass the <code>urlFragment</code> parameter as a String or as a regular expression. The String is converted to a regular expression if it isn't one already.\\n        <p></p>\\n    </td></tr>\\n    <tr><td>\\n        <p></p>\\n        <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <caption><b>Input</b><br></caption>\\n            <tr bgcolor=\\\"#C0C0C0\\\">\\n                <th>Parameter Name</th>\\n                <th>Parameter Type</th>\\n                <th>Description</th>\\n            </tr>\\n            <tr>\\n                <td>urlFragment</td>\\n                <td>String</td>\\n                <td>The portion of the URL to match in <code>document.URL</code></td>\\n            </tr>\\n        </table>\\n        <p></p>\\n        <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <caption><b>Output</b><br></caption>\\n            <tr bgcolor=\\\"#C0C0C0\\\">\\n                <th>Type</th>\\n                <th>Description</th>\\n            </tr>\\n            <tr>\\n                <td>Function</td>\\n                <td>The function to evaluate to a Boolean value.</td>\\n            </tr>\\n        </table>\\n        <p></p>\\n    </td></tr>\\n    <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">Router.urlMatch('/category/muffins')</code></pre></p\\n</td></tr>\\n</table><!-- ends the urlMatch table -->\\n</td>\\n</tr>\\n</table> <!-- Ends the Router table -->\\n<table border=\\\"0\\\" width=\\\"80%\\\" align=\\\"center\\\">\\n    <tr>\\n        <td><h2><a id=\\\"/utils/\\\">Utils</a></h2></td>\\n    </tr>\\n    <tr>\\n        <td><p>Include this package in the <code>require</code> portion of your JavaScript file with the <code>adaptivejs/utils</code> line.</p></td>\\n    </tr>\\n    <tr>\\n        <td>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-absolutify/\\\">Utils.absolutify(url)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>absolutify</code> function takes a relative or an absolute URL and absolutizes it relative to the current document's location.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>url</td>\\n                            <td>String</td>\\n                            <td>The URL, or URL fragment to absolutize.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">// We're on http://cloud.mobify.com\\nconsole.log(Utils.absolutify('docs/'));\\n// logs http://cloud.mobify.com/docs/</code></pre></p>\\n                    </td></tr>\\n            </table>\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-clone/\\\">Utils.clone(object)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>clone</code> function returns a new object which is a copy of the passed object.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>object</td>\\n                            <td>Object</td>\\n                            <td>The object to copy.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Object</td>\\n                            <td>The clone of the original object.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">var stormTrooper2 = Utils.spawn(stormTrooper);</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the Clone table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-domIsReady/\\\">Utils.domIsReady()</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>domIsReady</code> function returns true or false based on the `document.readyState == interactive` document state.\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Boolean</td>\\n                            <td>True if the DOM is ready.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n            </table><!-- Ends the DOMisReady table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-extend/\\\">Utils.extend(targetObject, sourceObject)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>extend</code> function adds all properties of the source object onto the target object. The function returns the target object.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>targetObject</td>\\n                            <td>Object</td>\\n                            <td>The object to which the properties are assigned to.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>sourceObject</td>\\n                            <td>Object</td>\\n                            <td>The object from which to copy the properties.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Object</td>\\n                            <td>The target object that has its properties extended from the source object..</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">var newChild = Utils.extend(child, parent);</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the Extend table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-getAdaptiveBuild/\\\">Utils.getAdaptiveBuild()</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>getAdaptiveBuild</code> function returns a String of the <code>src</code> source attribute of the Adaptive.js build script.\\n                    <p></p>\\n                </td></tr>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>String</td>\\n                            <td>The source attribute of the Adaptive.js script  build.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">console.log(Utils.getAdaptiveBuild());\\n// logs http://localhost:8080/build/adaptive.js</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the GetAdaptiveBuild table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-getAssetUrl/\\\">Utils.getAssetUrl(path, [basePath], [cacheBreaker])</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>getAssetUrl</code> function returns a String that contains the URL of an asset given the path, base path, and cache breaker. Provide the cache breaker as an argument, a hash of the file contents, or a build date. The function appends a random set of characters to make the URL unique every time.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>path</td>\\n                            <td>String</td>\\n                            <td>The path to the asset.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>baseURL</td>\\n                            <td>String</td>\\n                            <td><i>optional</i> The origin part of the URL for the asset.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>cacheBreaker</td>\\n                            <td>String</td>\\n                            <td><i>optional</i> The cache breaker to use in the asset URL.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>String</td>\\n                            <td>The URL of the the asset.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">var url = Utils.getAssetUrl('css/stylesheet.css'));\\n// Returns http://localhost:8080/css/stylesheet.css?a1s2d3f4</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the getAssetURL table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-getBuildOrigin/\\\">Utils.getBuildOrigin()</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>getBuildOrigin</code> function tells you where the Adaptive.js build file is served from. The function returns a String of the origin part of the Adaptive.js build URL. Use this function to reference a build image or a JavaScript file.\\n                    <p></p>\\n                </td></tr>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Output</b><br></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>String</td>\\n                        <td>The origin portion of the Adaptive.js build URL.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">// If we're on http://localhost:8080/adaptive.js\\nconsole.log(Utils.getBuildOrigin());\\n// Logs http://localhost:8080/\\n\\n// If we're on http://cdn.mobify.com/projects/foo/mobify.js\\nconsole.log(Utils.getBuildOrigin());\\n// Logs http://cdn.mobify.com/projects/foo/</code></pre></p>\\n                </td></tr>\\n            </table><!-- Ends the getBuildOrigin table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-getDoctype/\\\">Utils.getDoctype([document])</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>getDoctype</code> function returns a String for the type of the provided document. If no document is passed in, the current document is used.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>document</td>\\n                            <td>Object</td>\\n                            <td><i>optional</i> The document for which to check the type.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>String</td>\\n                            <td>The <code>DOCTYPE</code> attribute tag.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">console.log(Utils.getDoctype());\\n// logs \\\"<!DOCTYPE HTML>\\\"</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the GetDocType table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-viewportProperties/\\\">Utils.getMetaViewportProperties()</a></h3></b></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>getMetaViewportProperties</code> function returns an object that represents the parsed content attribute of the viewport meta tag. It returns false if no viewport meta tag is present.\\n                    <p></p>\\n                </td></tr>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Output</b><br></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>Object or Boolean</td>\\n                        <td>An object that contains the attribute of the viewport meta tag. False if there is no viewport meta tag.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">var viewport = Utils.getMetaViewportProperties();\\n// viewport = {\\n//     width: \\\"device-width\\\",\\n//     initial-scale: \\\"1.0\\\",\\n//     maximum-scale: \\\"1.0\\\",\\n//     user-scalable: \\\"no\\\"\\n// }</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the GetMetaViewPortProperties table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-getPhysicalScreenSize/\\\">Utils.getPhysicalScreenSize()</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>getPhysicalScreenSize</code> function returns an object with the physical screen's width and height of the device in pixels as object keys.\\n                    <p></p>\\n                </td></tr>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Output</b><br></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>Object</td>\\n                        <td>An object whose keys represent the width and height of the physical device in pixels.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">var screenSize = Utils.getPhysicalScreenSize();\\n// screenSize = {\\n//     width: 1440,\\n//     height: 900\\n// }</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the getPhysicalScreenSize table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-isDebug/\\\">Utils.isDebug()</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>isDebug</code> function checks the <code>document.cookie</code> to check whether the site is in debugging mode. Use this when you only want to execute a piece of code in testing mode.\\n                    <p></p>\\n                </td></tr>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Output</b><br></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>Boolean</td>\\n                        <td>A Boolean value that indicates true when the site is in debug mode.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">console.log(Utils.isDebug());\\n// Logs true after going through http://preview.mobify.com</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the isDebug table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-isFunction/\\\">Utils.isFunction(value)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>isFunction</code> function returns true if the passed value is a function.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>value</td>\\n                            <td>Object</td>\\n                            <td>The object to investigate.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Boolean</td>\\n                            <td>A Boolean that indicates true if the argument passed to the function is itself a function.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">//returns true\\nUtils.isFunction(function(){return 'I am a function';});</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the isFunction table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-isObject/\\\">Utils.isObject(value)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>isObject</code> function returns true if the argument passed to it is an object. This function is mostly used with the Router.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>value</td>\\n                            <td>Object</td>\\n                            <td>The object to investigate.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Boolean</td>\\n                            <td>A Boolean that indicates true if the argument passed to the function is an object.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">// returns true\\nUtils.isObject({});</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the isObject table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-isRegExp/\\\">Utils.isRegExp(value)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>isRegExp</code> function returns true if the argument passed to it is a regular expression.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>value</td>\\n                            <td>Object</td>\\n                            <td>The object to investigate.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Boolean</td>\\n                            <td>A Boolean that indicates true if the argument passed to the function is a regular expression.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">Utils.isRegExp(/realRegExp/);\\n// Returns true\\n\\nUtils.isRegExp('/notRexExp/');\\n// Returns false</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the isRegExp table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-keys/\\\">Utils.keys(object)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>keys</code> function returns an array of each of the objects keys that are part of the object itself, and not inherited from the object's prototype.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>object</td>\\n                            <td>Object</td>\\n                            <td>The object from which to return the keys.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Array</td>\\n                            <td>An array of the object's keys.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">var obj = {'a': 'aardvark', 'b': 'basilisk'}\\nconsole.log(Utils.keys(obj));\\n// prints ['a', 'b']</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the keys table -->\\n            <p><hr width=\\\"90%\\\" align=\\\"center\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-matchMedia/\\\">Utils.matchMedia(mediaQuery)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>matchMedia</code> is a Polyfill function that returns a </code>MediaQueryList</code> object which stores the results of running the provided media query. The match media functionality may not be implemented in every browser, so we use our own version of the function to ensure that it always executes.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>mediaQuery</td>\\n                            <td>String</td>\\n                            <td>The media query to run against the page.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Object</td>\\n                            <td>The object that stores the media query matches.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">console.log(Utils.matchMedia(\\\"(min-width: 400px)\\\").matches);\\n// logs true</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the matchMedia table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-outerHTML/\\\">Utils.outerHTML()</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>outerHTML</code> function is a Polyfill function which returns the serialized <code>htmlElement</code> piece of HTML, which is the DOM as a String, and its descendants. Use this function to replace some of the content with a regular expression or with the String representation of a part of the document. This Polyfill function ensures that the method works for browsers which don't have the <code>outerHTML</code> function implemented.\\n                    <p></p>\\n                </td></tr>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>String</td>\\n                            <td>The HTML around the selected element.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-html\\\">&lt;!-- In the original document HTML: --&gt;\\n&lt;div id=\\\"header\\\"&gt;&lt;p&gt;content&lt;/p&gt;&lt;/div&gt;\\n</code></pre></p>\\n<p><pre><code class=\\\"language-javascript\\\">// In your JavaScript code:\\nvar el = document.getElementById('#header');\\nconsole.log(Utils.outerHTML(el));\\n// logs &lt;div id=\\\"header\\\"&gt;&lt;p&gt;content&lt;/p&gt;&lt;/div&gt;</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the outerHTML table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-removeBySelector/\\\">Utils.removeBySelector(selector, [document])</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>removeBySelector</code> function removes all elements that match the provided selector from the provided document. The function returns an array of DOM elements that were removed. If no document is specified, the elements are removed from the current document.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>selector</td>\\n                            <td>Object</td>\\n                            <td>The selector which matches the elements to remove.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>document</td>\\n                            <td>Object</td>\\n                            <td><i>optional</i> The document from which to remove the elements. If none is specified, the current document is used.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Array</td>\\n                            <td>The list of DOM elements that were removed from the document.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">// Removes all scripts from the current document\\nvar scripts = Utils.removeBySelector('script');</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the removeBySelector table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-removeElements/\\\">Utils.removeElements(elements, [document])</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>removeElements</code> function removes all elements in the list from the provided document. If no document is specified, the elements are removed from the current document.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>elements</td>\\n                            <td>Array</td>\\n                            <td>The array of elements to remove.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>document</td>\\n                            <td>Object</td>\\n                            <td><i>optional</i> The document from which to remove the elements. If none is specified, the current document is used.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">// Removes all scripts from the current document\\nvar scripts = $('script');\\nUtils.removeElements(scripts);</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the removeElements table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-supportsLocalStorage/\\\">Utils.supportsLocalStorage()</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>supportsLocalStorage</code> function returns true if the device supports local storage for persistent storage between pages. Use this function to store pages and to retrieve them later instead of requesting them from the site. An example on the site of this is for checking items that are currently in the cart.\\n                    <p></p>\\n                </td></tr>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Boolean</td>\\n                            <td>Returns true if the device supports local storage.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">\\nif (Utils.supportsLocalStorage()) {\\n    // Store the basket data to localStorage\\n    localStorage.setItem('basketData', data);\\n}</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the SupportsLocalStorage table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/utils-values/\\\">Utils.values(object)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>values</code> function returns an array of the values that correspond to properties of the object. It does not include properties inherited from a parent object. It is the opposite of the <code>Utils.keys</code> function.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>object</td>\\n                            <td>Object</td>\\n                            <td>The object whose values to return.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Array</td>\\n                            <td>The properties of the object.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">var obj = {'a': 'aardvark', 'b': 'basilisk'}\\nconsole.log(Utils.keys(obj)); // prints ['aardvark', 'basilisk']</code></pre></p>\\n                    </td></tr>\\n            </table><!-- Ends the Values table -->\\n        </td>\\n    </tr>\\n</table> <!-- Ends the Utils table -->\\n<table border=\\\"0\\\" width=\\\"80%\\\" align=\\\"center\\\">\\n    <tr>\\n        <td><h2><a id=\\\"/view-processor/\\\">View Processor</a></h2></td>\\n    </tr>\\n    <tr>\\n        <td>\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"/view-evaluateContext/\\\">View.evaluateContext(view, defaultContext)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>evaluateContext</code> function takes a view and an object with any default context keys to add. It returns a context object. The returned context is made up of the view's context as well as the contexts from all the includes and its parent view. Any keys that are functions are evaluated.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>view</td>\\n                            <td>Object</td>\\n                            <td>The view whose context to combine with the <code>defaultContext</code></td>\\n                        </tr>\\n                        <tr>\\n                            <td>defaultContext</td>\\n                            <td>Object</td>\\n                            <td>The object with the default context keys to add to those of the <code>view</code> context.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Object</td>\\n                            <td>The context that contains the context of the view, its parent view, and that any includes.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n            </table>\\n        </td>\\n    </tr>\\n</table><!-- Ends the View table -->\"\n}\n[/block]",
        "excerpt": "Browse the commands in the Adaptive.js software suite to program your awesome mobile adaptation.",
        "slug": "adaptivejs-api",
        "type": "basic",
        "title": "Adaptive.js API"
      }
    ],
    "project": "54da9ecd44b1090d00072b60",
    "reference": false,
    "slug": "adapting",
    "title": "Adapting",
    "version": "5568d523d33aad0d00ec8ce4"
  },
  {
    "version": "5568d523d33aad0d00ec8ce4",
    "project": "54da9ecd44b1090d00072b60",
    "pages": [],
    "_id": "5568d524d33aad0d00ec8cef",
    "reference": false,
    "createdAt": "2015-04-08T21:13:13.896Z",
    "from_sync": false,
    "order": 4,
    "slug": "scripting",
    "title": "Scripting",
    "__v": 0
  },
  {
    "__v": 1,
    "_id": "5568d524d33aad0d00ec8cec",
    "createdAt": "2015-03-18T17:27:02.894Z",
    "from_sync": false,
    "order": 5,
    "pages": [
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cec",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d524d33aad0d00ec8cfa",
        "createdAt": "2015-03-18T18:00:35.987Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 0,
        "body": "# A. What is Sass?\n\nSass is an acronym that stands for \"Syntactically Awesome Stylesheets\".\n\nSass is a CSS preprocessing language. This means that you write your CSS with\nSass in a manner that is more like programming. Then, your code is compiled to CSS for your website.\n\nWhat are some of the reasons for you to write with Sass? Sass provides programmatic features\nthat plain CSS does not have. Some of these features are:\n\n- Variables\n- Nested selectors\n- Partial files\n- Mixins\n- Math functions\n- Color functions\n\nSass is **incredibly powerful** but also very **easy to abuse**. Be sure to\nauthor your stylesheets responsibly.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"To start with Sass, read our [CSS and Sass Best Practices](doc:css-and-sass-best-practices)  guide. The guide has advice that is specific to Adaptive.js projects.\",\n  \"title\": \"Best Practices: CSS and Sass\"\n}\n[/block]\n***\n\n# B. Nesting\n\nBy nesting selectors, you avoid the repetition of selector prefixes.\n\nExample:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \".t-home {\\n    .c-button {\\n        padding: 10px;\\n\\n        &:active {\\n            background-color: #cc0000;\\n        }\\n    }\\n    .c-heading {\\n        font-size: 18px;\\n    }\\n}\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nThe above example compiles to the following CSS:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \".t-home .c-button {\\n    padding: 10px;\\n}\\n.t-home .c-button:active {\\n    background-color: #cc0000;\\n}\\n.t-home .c-heading {\\n    font-size: 18px;\\n}\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nIn Adaptive.js, we use nesting to scope styles to certain templates or components.\n\n***\n\n# C. Variables\n\nBy defining variables, you can re-use common values.\n\nExample:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"$brand-color: #0000ff;\\n\\n.t-product {\\n    .c-icon {\\n        background-color: $brand-color;\\n    }\\n    p {\\n        color: $brand-color;\\n    }\\n}\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nThe above example compiles to the following CSS:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \".t-product .c-icon {\\n    background-color: #0000ff;\\n}\\n.t-product p {\\n    background-color: #0000ff;\\n}\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nIn Adaptive.js, we define variables in `assets/styles/vellum/_variable.scss`.\n\n***\n\n# D. Mixins\n\nBy defining mixins, you can apply a set of styles to your class definitions.\n\nExample:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"@mixin tap-highlight {\\n    -webkit-tap-highlight-color: transparent;\\n\\n    &:active {\\n        background-color: $brand-color;\\n    }\\n}\\n\\n.t-category {\\n    .c-button {\\n        @include tap-highlight;\\n\\n        padding: 10px;\\n    }\\n}\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nThe above example compiles to the following CSS:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \".t-category .c-button {\\n    padding: 10px;\\n    -webkit-tap-highlight-color: transparent;\\n}\\n.t-category .c-buton {\\n    background-color: #0000ff;\\n}\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nIn Adaptive.js, we define mixins in `assets/styles/vellum/utilities`.\n\n***\n\n# E. Resources\n\nLearn more about Sass and master it!\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read the official [Sass documentation](http://sass-lang.com/documentation/file.SASS_REFERENCE.html).\",\n  \"title\": \"Official Sass Documentation\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Learn about Sass in general in the [Sass Basics](http://sass-lang.com/guide) summary.\",\n  \"title\": \"Sass Basics\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Sass Functions\",\n  \"body\": \"View [all the Sass functions](http://sass-lang.com/documentation/Sass/Script/Functions.html) in one convenient reference.\"\n}\n[/block]",
        "excerpt": "Get started with Sass, our favourite CSS preprocessing language.",
        "slug": "introduction-to-sass",
        "type": "basic",
        "title": "Introduction to Sass"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cec",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d524d33aad0d00ec8cf9",
        "createdAt": "2015-03-18T17:33:56.181Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 1,
        "body": "# A. CSS Best Practices\n\nWe cover a wide range of practices in our Code Style repository, including one section that \nis devoted specifically for\n[CSS Best Practices](https://github.com/mobify/mobify-code-style/tree/master/css/css-best-practices#css-best-practices).\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Keep your selector specificity [as low as possible](http://csswizardry.com/2012/05/keep-your-css-selectors-short/).\\nIf you do not know how, learn [to measure specificity](http://www.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/).\",\n  \"title\": \"Best Practice: CSS\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Write [self-documenting selectors](https://github.com/mobify/mobify-code-style/tree/master/css/css-best-practices#self-documenting-selectors).\",\n  \"title\": \"Best Practice: CSS\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Choose a class name convention for your classes and keep your code consistent with it.  Here are some class name convention guides:\\n\\n* [SMACSS](http://smacss.com/)\\n* [OOCSS](http://www.smashingmagazine.com/2011/12/12/an-introduction-to-object-oriented-css-oocss/)\\n* [BEM](http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/)\",\n  \"title\": \"Best Practice: CSS\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Mobify has a name convention approach called [CSM](https://github.com/mobify/mobify-code-style/tree/master/css/class-naming-conventions#class-naming-conventions).\",\n  \"title\": \"CSM Name Convention\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Watch these useful presentations that summarize modern CSS methodologies.  These new methodologies solve some old problems that still occur:\\n\\n* Jonathan Snook’s [CSS is a Mess](http://vimeo.com/99877232)\\n* Andy Hume’s [CSS For Grown Ups](http://lanyrd.com/2012/sxsw-interactive/spmqc/)\",\n  \"title\": \"CSS Methodologies\"\n}\n[/block]\n***\n\n# B. Sass Best Practices\n\nSome Sass best practices focus on how to author your code responsibly. Because\nit is so easy to write CSS with Sass, it is also dangerously easy to go\ntoo far and to author code that elongates your stylesheet files!\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Nest only when necessary, never more than [4 levels deep](http://thesassway.com/beginner/the-inception-rule).\",\n  \"title\": \"Best Practice: Sass\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Beware of [nested comma separated selectors](https://github.com/mobify/mobify-code-style/tree/master/css/sass-best-practices#beware-nested-comma-separated-selectors) in multiple layers.\",\n  \"title\": \"Best Practice: Sass\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Generally, avoid using the `@extend` [extension](https://github.com/mobify/mobify-code-style/tree/master/css/sass-best-practices#extends\\\")`\\nIf you cannot avoid `@extend`, only [extend placeholder classes](http://8gramgorilla.com/mastering-sass-extends-and-placeholders/).\",\n  \"title\": \"Best Practice: Sass\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Have a variable [name convention](https://github.com/mobify/mobify-code-style/tree/master/css/sass-best-practices#variable-naming-convention).\",\n  \"title\": \"Best Practice: Sass\"\n}\n[/block]\n***\n\n# C. Adaptive.js Sass Best Practices\n\nWhen you build an Adaptive.js project, there are many CSS and Sass methods that\nMobify recommends as good practices. \n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"The practices and methodologies that are particular to an Adaptive.js project are explained in complete detail in [Mobify’s Code Style repository](https://github.com/mobify/mobify-code-style/tree/master/css).\",\n  \"title\": \"Mobify's Code Style\"\n}\n[/block]",
        "excerpt": "Learn the best practices for CSS and Sass.",
        "slug": "css-and-sass-best-practices",
        "type": "basic",
        "title": "CSS and Sass Best Practices"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cec",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d524d33aad0d00ec8cfb",
        "createdAt": "2015-03-18T18:38:42.865Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 2,
        "body": "At Mobify, we leverage Open Source tools to make mobile site development easier and quicker. This makes our code cleaner and more reusable.\n\nHere is a quick overview of our favorite tools.\n\n***\n\n# A. Sass\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Sass Official Site\",\n  \"body\": \"Read about Sass at the Official [Sass site at http://sass-lang.com/](http://sass-lang.com).\"\n}\n[/block]\nMobify uses Sass as the CSS preprocessing language. Sass in automatically compiled by Adaptive.js so you do not have to do it yourself.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Learn more in our [Introduction to Sass](doc:introduction-to-sass).\"\n}\n[/block]\n***\n\n# B. Autoprefixer\n\nAutoprefixer is a tool that helps to eliminate the need to write browser prefixes such as\n`-webkit-` and `-moz-` for CSS.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Autoprefixer Official Site\",\n  \"body\": \"Read about [Autoprefixer on the GitHub site](https://github.com/ai/autoprefixer).\"\n}\n[/block]\nBecause Autoprefixer is built in to Adaptive.js, you will not need to write browser prefixes in your Sass.\n\nFor example, simply write `box-sizing: border-box` in your SCSS file and the\ncompiled CSS automatically includes all the browser prefixes.\n\nExample:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"body {\\n    box-sizing: border-box;\\n}\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\nThe above example compiles to the following CSS:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"body {\\n    box-sizing: border-box;\\n    -webkit-box-sizing: border-box;\\n}\",\n      \"language\": \"css\"\n    }\n  ]\n}\n[/block]\n***\n\n# C. Vellum\n\nVellum is a Mobify Open Source project. It is a starting point for initial base CSS styles in a project.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Vellum GitHub Repository\",\n  \"body\": \"Read about [Vellum in its Mobify GitHub repository](https://github.com/mobify/vellum).\"\n}\n[/block]\nAfter you import Vellum into your project, change the stub styles to\nsuit your project. Change the variables to match the\nbrand, spacing, and aesthetics of your website. Change the tag\nstyles to work the way that you want their plain styles to work.\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Think of Vellum as a collection of global styles. Because of this global nature, do not declare any classes or IDs in Vellum.\"\n}\n[/block]\nInstead, write these declarations in your template or component styles.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"For more about our recommended SCSS file structure, read our [Philosophy & Structure](https://github.com/mobify/mobify-code-style/tree/master/css/introduction#philosophy--structure) document.\"\n}\n[/block]\n***\n\n# D. Spline\n\nSpline is a Sass mixin and function library. It is an Open Source project\nthat Mobify maintains.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Spline GitHub Repository\",\n  \"body\": \"Read about [Spline in its Mobify GitHub repository](https://github.com/mobify/spline).\"\n}\n[/block]\nIn the Spline collection, we put the most useful mixins and functions for authoring CSS that override the client markup and client styles.\n\n***\n\n# E. Stencil\n\nStencil is a Mobify Open Source library of reusable components and utilities which\ninclude:\n\n- Alerts\n- Breadcrumbs\n- Buttons\n- A grid\n\nStencil also stores common utility classes such as:\n\n- Dimension (common widths)\n- Spacing (margins)\n- Visibility\n- Text (for example, capitalization or text alignment)\n\nThis is a growing library of components and utilities. We add more of these components\nover time to capture common patterns that we encounter in CSS.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Stencil GitHub Repository\",\n  \"body\": \"Read about [Stencil in its Mobify GitHub repository](https://github.com/mobify/stencil).\"\n}\n[/block]\n***\n\n# F. SCSS-Lint\n\nFinally, we use the SCSS-Lint tool for linting. This tool checks your SCSS files to\nwarn you about CSS code style violations. With SCSS-Lint, we ensure that\neveryone authors CSS in a consistent manner.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read the Mobify [SCSS-Lint rules](https://github.com/mobify/mobify-code-style/blob/master/css/.scss-lint.yml) for our guidelines to write CSS.\"\n}\n[/block]",
        "excerpt": "Read about the tools that Adaptive.js projects use to author CSS.",
        "slug": "tools-for-designers-and-developers",
        "type": "basic",
        "title": "Tools for Designers and Developers"
      }
    ],
    "project": "54da9ecd44b1090d00072b60",
    "reference": false,
    "slug": "styling-your-project",
    "title": "Styling Your Project",
    "version": "5568d523d33aad0d00ec8ce4"
  },
  {
    "__v": 1,
    "_id": "5568d524d33aad0d00ec8ce6",
    "createdAt": "2015-02-13T00:38:26.075Z",
    "from_sync": false,
    "order": 6,
    "pages": [
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce6",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d24",
        "createdAt": "2015-03-10T21:07:21.311Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 0,
        "body": "# 1. Start the Adaptive.js Server\n\nThis step starts the server that runs the Adaptive.js server locally.  Running the server locally enables you to preview the mobile version of the site in your browser.\n\n1\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n2\\. To change to your project directory, enter the following command on the command line :\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n3\\. To start the preview, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt preview\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n This builds your project and starts an Adaptive.js server at default ports 8080 for HTTP and 8443 for HTTPS.\n\nTo change the HTTP and HTTPS port numbers, enter the following command with your own custom port numbers:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt preview --port httpPortNumber --https-port httpsPortNumber\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nEnsure that you replace the `httpPortNumber` and `httpsPortNumber` arguments with numbers.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Leave this command prompt open during the next step. It is running the preview server that is needed by the browser in the next tutorial step.\"\n}\n[/block]\n---\n\n# 2. Start the Browser Preview\n\n1\\. Go to the [Mobify Preview at http://preview.mobify.com](http://preview.mobify.com).\n\n2\\. On the **\"Mobify Preview\"** page, set the **\"Site URL\"** and **\"Bundle Location\"** form fields to the following values:\n\n* **Site URL:** `http://www.YourSiteURLHere.com`\n* **Bundle Location:** `http://localhost:8080/adaptive.js`\n\n3\\. Click **\"Preview\"**.\n\nThis sets cookies in your browser to preview your Adaptive.js site on your local server.\n\nAs you make changes to your local project, you also see these changes reflected when you refresh your browser.\n\n---\n\nSet your preview to simulate a mobile device.\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://www.filepicker.io/api/file/W9kg4X5BQUuFiiqFYRee\",\n        \"mobifyPreviewiPhone6.png\",\n        \"561\",\n        \"782\",\n        \"#0d9ac5\",\n        \"\"\n      ],\n      \"caption\": \"Mobify Preview in a simulated device view.\"\n    }\n  ]\n}\n[/block]\nFor Chrome users:\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Chrome is Mobify's browser of choice. Use Chrome to preview and debug all of your Mobify sites.\"\n}\n[/block]\n1\\. Right click anywhere on the preview page and select the **\"Inspect Element\"** menu option.\n\n2\\. In the upper left-hand corner, from the **\"Device\"** dropdown box, select a mobile device name.\n\n3\\. Refresh the page view in your browser.\n\nYour mobile site preview now has the correct dimensions of the mobile device of your choice.\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://www.filepicker.io/api/file/E0XOpLpvQPKk2hxY073H\",\n        \"merlinsPreviewiPhone6.png\",\n        \"565\",\n        \"778\",\n        \"#3e80c5\",\n        \"\"\n      ],\n      \"caption\": \"A sample website in Mobify Preview as a simulated device view in Chrome.\"\n    }\n  ]\n}\n[/block]",
        "excerpt": "Once you have the Adaptive.js SDK and your project files, preview your Adaptive.js project on your computer.",
        "slug": "preview-your-project",
        "type": "basic",
        "title": "Preview your Project"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce6",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d25",
        "createdAt": "2015-03-10T21:18:07.476Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 2,
        "body": "There are sometimes slight differences between a bundle on Mobify Cloud\nand a development project on the local server.  To preview this publication of a bundle on a mobile device, follow the steps in this guide.\n\nThe following steps also work for a Mobify Cloud bundle preview on a computer.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"If you want to preview on a computer one of your projects that is stored on your local server, go to the [Preview a Local Server on your Computer](doc:preview-a-local-server-on-your-computer) guide instead.\",\n  \"title\": \"Preview a Local Project on Computer\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"If you want to preview on a mobile device one of your projects that is stored on your local server, go to the [Preview a Local Adaptive.js Site on a Device](doc:preview-a-local-adaptivejs-site-on-a-device) guide instead.\",\n  \"title\": \"Preview a Local Project on Mobile Device\"\n}\n[/block]\n***\n\n# Preview the Cloud Bundle Site on a Device\n\n1\\. In your browser, sign in to [Mobify Cloud at http://cloud.mobify.com](http://cloud.mobify.com).\n\n2\\. In the **Projects** section, under the **Adaptive.js** heading, select your project.\n\nThe page view is now in the **\"Bundles\"** tab of the **\"Bundles/Configure\"** link button cluster.\n\n3\\. Hover over your desired bundle and and click the **\"Preview\"** button.\n\n4\\. In the same bundle line, click the **\"View On Device\"** button.\n\n5\\. In the same bundle line, type your email address into the form field, and click the **\"Send Preview To Device\"** button to send an email with a test link to your mobile device.\n\nThe following steps also work for a Mobify Cloud bundle preview on a computer.\n\n6\\. On your mobile device, open your email client and check your email.\n\n7\\. In the email, click the **\"Preview\"** link to go the URL in your mobile web browser.\n\n8\\. On the Mobify Preview page in the mobile browser, check that the **\"Site URL\"** form field contains the correct URL.\n\n9\\. Tap **\"Preview\"** to see the cloud bundle in your mobile web browser.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"The preview link you receive in your email has the **\\\"Site URL\\\"** field pre-filled with the URL you provided during project creation. To preview against a different environment, like a staging server, replace the **\\\"Site URL\\\"** field with the URL of the staging server. To share the customized preview link, follow the steps in the [Customize a Preview Link](doc:create-a-custom-preview-link) tutorial.\",\n  \"title\": \"Preview Against Staging Server\"\n}\n[/block]\n***\n\nYou now see a preview of this bundle on your device. Go to your site to verify that it works correctly.",
        "excerpt": "Preview your actual project bundle on Cloud on a mobile device before the bundle's publication.",
        "slug": "preview-bundle-on-device",
        "type": "basic",
        "title": "Preview a Bundle on a Device"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce6",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d26",
        "createdAt": "2015-03-10T21:34:24.209Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 3,
        "body": "Generate a permalink with values from the Mobify Preview form.\n\n***\n\n1\\. In a browser, navigate to [Mobify Preview at http://preview.mobify.com](http://preview.mobify.com).\n\n2\\. Fill in the form fields on the Mobify Preview page with your project values.\n\n3\\. Click the **\"Preview Permalink\"** link in the bottom right corner of the form.\n\nIn the browser window, the URL bar changes to the permalink.\n\n4\\. Select and copy the new URL in the address bar of your browser.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Custom Preview Link\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/8XOwVBSNaWNGPEnGxBQ8\",\n        \"custom-preview-link-ani.gif\",\n        \"391\",\n        \"690\",\n        \"#0780a1\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n***\n\nNow, share this link with others through email or instant message.  The URL has the custom values that you placed in the form.",
        "excerpt": "Create a custom preview link if you need to use a staging URL, load a specific page of the site, or that use a specific bundle. Then share the link.",
        "slug": "create-custom-preview-link",
        "type": "basic",
        "title": "Customize a Preview Link"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce6",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d27",
        "createdAt": "2015-03-10T21:43:05.088Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 4,
        "body": "# A. The Desktop Site is Showing Instead of the Mobile Site Version After Clicking Preview\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Ensure that the Site URL that you entered does not redirect to another one.\",\n  \"title\": \"URL Redirect\"\n}\n[/block]\nFor example, the `http://yourwebsite.com` URL redirects to the `http://yourwebsite.com/home` URL.\n\n1. If the URL that you originally entered redirects to another, go back to [Mobify Preview at http://preview.mobify.com](http://preview.mobify.com).\n\n2. Enter the URL that your original URL redirects to into the **\"Site URL\"** form field.\n\n***\n\n# B. The Preview is Lost on Refresh or on Page Transition\n\nThis problem occurs because the cookies and any other local settings are reset during refresh or page transition.\n\n1. Go back to [Mobify Preview at http://preview.mobify.com](http://preview.mobify.com) on your development computer browser.\n\n2. Use the same settings as when you initialized the preview to reactivate it.\n\n***\n\n# C. The Preview is Lost After you Open Developer Tools\n\nWhen you open Developer Tools, the browser changes its user agent.  This deactivates the preview.\n\n1. To resolve this, go back to [Mobify Preview at http://preview.mobify.com](http://preview.mobify.com).\n\n2. Use the same settings as the ones that you used when you initialized the preview. \n\nResetting the settings to those initial values reactivates the preview against the new user agent.\n\n***\n\n# D. Blank Page Appears After Clicking Preview\n\n1. Check if the page that you are visiting is served on HTTPS.\n\n2. If it is, click the shield icon in Chrome to accept the security certificate. This is necessary only once per session.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Security Certificate in Chrome\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/5elOZYkZQiyB5LDIte9t\",\n        \"https-shield-ani.gif\",\n        \"391\",\n        \"698\",\n        \"#0e7995\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"We recommend that you use Chrome for all your Mobify development projects.\",\n  \"title\": \"\"\n}\n[/block]\n***\n\n# E. Security Warning Appears After Clicking Preview\n\nThe security warning occurs when you visit HTTPS pages on Android phones.\n\nTo resolve this:\n\n1\\. On your device, open the web browser.\n2\\. Go to `https://YourSiteURL:8443/adaptive.js` (ensure that you enter the **S** in HTTPS before your site URL).\n3\\. Accept the SSL certificate.\n4\\. Also on your device browser, go to [Mobify Preview http://preview.mobify.com](http://preview.mobify.com).\n5\\. Use the following settings:\n  - **Site URL:** `https://www.YourSiteURL.com` (ensure that you enter **S** in the HTTPS before your site URL)\n   - **Bundle Location:** `https://your.IP.address:8443/adaptive.js` (also ensure that you enter the HTTPS before your IP address)\n6\\. Click **\"Preview\"**.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"To find your IP address, follow the steps in the Identify Your Computer's IP Address section in the [Preview your Project on a Device](doc:preview-a-local-adaptivejs-site-on-a-device) tutorial.\",\n  \"title\": \"Find your IP Address\"\n}\n[/block]",
        "excerpt": "Get solutions to some common problems that occur during the preview process.  \nBrowse the section headings to find a specific topic.",
        "slug": "preview-troubleshooting",
        "type": "basic",
        "title": "Preview Troubleshooting"
      }
    ],
    "project": "54da9ecd44b1090d00072b60",
    "reference": false,
    "slug": "previewing",
    "title": "Previewing",
    "version": "5568d523d33aad0d00ec8ce4"
  },
  {
    "__v": 1,
    "_id": "5568d524d33aad0d00ec8cee",
    "createdAt": "2015-03-20T19:04:25.702Z",
    "from_sync": false,
    "order": 7,
    "pages": [
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cee",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d07",
        "createdAt": "2015-04-21T23:14:27.074Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 0,
        "body": "1\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n2\\. To change to your project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n3\\. To save your credentials, follow the instructions in the [Authorize your Computer to Push Bundles](doc:3-authorize) tutorial.\n\nSave your credentials on your computer to avoid logging in every time you create a new bundle.\n\n4\\. To push a new bundle from your local project files to Mobify Cloud, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt push -m \\\"message or comment\\\"\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n5\\. To see your new bundle, go to [Mobify Cloud at http://cloud.mobify.com/](http://cloud.mobify.com/).\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Mobify automatically minifies your bundle during the build process. The reduced file size improves your site performance.\"\n}\n[/block]",
        "excerpt": "When your project is ready for production, push your bundle to Mobify Cloud.",
        "slug": "push-bundle",
        "type": "basic",
        "title": "Push a Bundle"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cee",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d05",
        "createdAt": "2015-03-20T19:05:23.558Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 1,
        "body": "1\\. Go to [Mobify Cloud at http://cloud.mobify.com](http://cloud.mobify.com).\n\n2\\. In the **Projects** section, under the **Adaptive.js** heading, click on your Adaptive.js project name.\n\n3\\. In the **\"Bundles\"** section, hover over the bundle that you want to publish.\n\n4\\. Click the **“Publish”** button.\n\nThis is now the bundle that is used on your site.  Your customers see this deployed\nbundle when they visit your site with their mobile devices.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Delay After Bundle Deployment\",\n  \"body\": \"Your site visitors download the bundle from the server that is\\nclosest to their location. Although this ensures the fastest bundle download,\\nit may still take 5 - 10 minutes for your site visitors to see the new bundle\\nafter its deployment. This is because Mobify replicates your bundle across\\ndozens of worldwide servers on multiple Content Delivery Networks. The\\nreplication process takes a few minutes.\"\n}\n[/block]",
        "excerpt": "After your bundle is tested, publish it to make it visible to your mobile site visitors.",
        "slug": "publish-bundle",
        "type": "basic",
        "title": "Publish a Bundle"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8cee",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d06",
        "createdAt": "2015-03-20T19:41:13.020Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 2,
        "body": "1\\. In your web browser, go to [Mobify Cloud at http://cloud.mobify.com](http://cloud.mobify.com).\n\n2\\. In the **Projects** section, under the **Adaptive.js** heading, click on your Adaptive.js project name.\n\nIn the **\"Published Bundle\"** box, the current bundle is displayed.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Previously Published Bundles\",\n  \"body\": \"To see the detailed history of all of the bundles that were published for this project, click the **\\\"Publish History\\\"** link button in the **\\\"Published Bundle\\\"** box. Examine this list to select the bundle to revert to.\"\n}\n[/block]\nThe **\"Bundles\"** section lists all of the bundles created in this Adaptive.js project.\n\n3\\. In the **\"Bundles\"** section, hover over the bundle you want to revert to.\n\n4\\. Click the **“Publish”** button.\n\nYour mobile site rolls back to a previously deployed version.\n\nThe current bundle that you had prior to this step is still kept on the Mobify Cloud for you to switch to at another time.",
        "excerpt": "If you want your mobile site to go back to a previously published bundle,\nroll back to that version.",
        "slug": "roll-back-bundle",
        "type": "basic",
        "title": "Roll Back to a Previous Bundle"
      }
    ],
    "project": "54da9ecd44b1090d00072b60",
    "reference": false,
    "slug": "publishing",
    "title": "Publishing",
    "version": "5568d523d33aad0d00ec8ce4"
  },
  {
    "__v": 1,
    "_id": "5568d524d33aad0d00ec8ce9",
    "createdAt": "2015-03-09T00:05:06.591Z",
    "from_sync": false,
    "order": 8,
    "pages": [
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce9",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d524d33aad0d00ec8cf6",
        "createdAt": "2015-03-09T00:09:18.191Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 0,
        "body": "[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"If you need to debug on a legacy Android device, the stock Android browser, or on a different device, follow the [Debug on Legacy Android with the Stock Browser (and on Other Devices)](doc:debug-with-weinre) guide instead.\"\n}\n[/block]\n***\n\n## 1. Enable the Android Developer Options Menu\n\n1. On your Android 4+ device, navigate to the **\"Settings\"** menu.\n\n2. Select the **\"About Device\"** (or **\"About Phone\"**) option.\n\n3. Tap the **\"Build Number\"** 7 times.\n\n***\n\n## 2. Enable USB Debugging on Android Device\n\n1\\. On your Android device, navigate back to the **\"Settings\"** menu.\n\n2\\. Turn on the **\"Developer Options\"** toggle.\n\nOn some devices, the **\"Developer Options\"** is another menu option.\n\n3\\. Under the **\"Developer Options\"** menu, enable **\"USB Debugging\"**.\n\nThis enables the debug mode when the USB cable is connected.\n\n***\n\n## 3. Enable USB discovery in Chrome\n\n1\\. On your computer, open Chrome and go to `chrome://inspect`.\n\nThe **\"Developer Options\"** page loads by default.\n\n2\\. Under the **\"Devices\"** header, enable the **\"Discover USB Devices\"** checkbox.\n\n***\n\n## 4. Connect the Android Device to the Computer\n\n1. Connect your Android 4+ device to your computer with a USB cable.\n\n2. On your Android device, allow USB debugging if you see an alert for permission.\n\nTo prevent the alert in the future, enable the **\"Always allow from this computer\"** toggle, then tap OK.\n\n***\n\n## 5. Open the Page to Debug\n\n1. On your Android 4+ device connected to your computer, open Chrome.\n\n2. Go to `http://preview.mobify.com` to preview your bundle.\n\n3. Fill in the form fields with your site information.\n\n4. Click **\"Preview\"**.\n\n5. Go to your page for debugging.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Learn to [Preview a Local Adaptive.js Site on a Device](doc:preview-a-local-adaptivejs-site-on-a-device) or to [Preview a Local Server on your Computer](doc:preview-a-local-server-on-your-computer).\",\n  \"title\": \"Mobify Preview\"\n}\n[/block]\n***\n\n## 6. Inspect the Page\n\n1. On your computer, open Chrome and go to `chrome://inspect`.\n\n2. On the menu side bar, click the **\"Pages\"** link.\n\n3. Under the **\"Pages\"** heading, find the page that you want to debug.\n\n4. Click **\"Inspect\"** below the page title.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Enable [network port forwarding](https://developer.chrome.com/devtools/docs/remote-debugging#reverse-port-forwarding) if you experience trouble with your ports.\",\n  \"title\": \"Network Port Forwarding\"\n}\n[/block]\n***\n\nUse the **Chrome Developer Tools** to debug the page on your Android 4+ device.",
        "excerpt": "Inspect the device with the Chrome browser if you find an issue with your site on an Android 4+ device.",
        "slug": "debug-on-android",
        "type": "basic",
        "title": "Debug on Android 4+ Devices with Chrome"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce9",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d524d33aad0d00ec8cf7",
        "createdAt": "2015-03-19T18:57:51.377Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 1,
        "body": "Apple provides an excellent developer experience for debugging on Mac OS X.\nHowever, it is not possible to remotely debug iOS devices on Windows.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"If you need to debug an iOS device on Windows, follow the [Debug on Legacy Android with the Stock Browser (and on Other Devices)](doc:debug-with-weinre) guide instead.\"\n}\n[/block]\n***\n\n## 1. Debugging on an iOS Device\n\nAs you test your mobile site, you observe issues on specific devices.\nIf the issue occurs on an iOS device, use this guide to inspect the device.\n\n***\n\n### A. Enable Safari Web Inspector on your iOS device\n\n1. Open the **\"Settings\"** app on your iOS device.\n\n2. Navigate to **\"Safari > Advanced\"**.\n\n3. Turn on the **\"Web Inspector\"** toggle.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Enable Safari Web Inspector\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/UHBRJDLVRhaXCz8C9HqQ\",\n        \"enable-safari-web-inspector-ani.gif\",\n        \"370\",\n        \"683\",\n        \"#2a9ce7\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n***\n\n### B. Enable the Develop menu on your Mac\n\n1. On your Mac, open the Safari browser.\n\n2. In the Safari menu bar, navigate to the **\"Safari\"** menu.\n\n3. Select **\"Preferences…\"**\n\n4. In the Safari browser preferences, switch to the **\"Advanced\"** tab.\n\n5. In the **\"Advanced\"** tab, turn on the **\"Show Develop menu in menu bar\"** toggle.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Enable Safari Develop Menu\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/Z9TMHvDoRO2n6ELVhfSd\",\n        \"enable-safari-develop-menu-ani.gif\",\n        \"414\",\n        \"302\",\n        \"#5384be\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n***\n\n### C. Connect your iOS device to your Mac with a USB cable.\n\n***\n\n### D. Open the page for debugging\n\n1. On the iOS device connected to your Mac, open Safari.\n\n2. Go to `http://preview.mobify.com` to preview your bundle.\n\n3. Fill in the form fields with your site information.\n\n4. Click **\"Preview\"**.\n\n5. Navigate to the page for debugging.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Learn to [Preview your Project](doc:preview-your-project) or to [Preview your Project on a Device](doc:preview-on-device).\",\n  \"title\": \"Preview\"\n}\n[/block]\n\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Preview on Computer\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/JxtfRKnTYiROxQxC4J5a\",\n        \"preview-on-computer-ani.gif\",\n        \"366\",\n        \"682\",\n        \"#057fa4\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n***\n\n### E. Inspect the page\n\n1. On your Mac, open Safari.\n\n2. In the Safari menu bar, choose the **\"Develop\"** menu.\n\n3. Scroll to the menu option that has your iOS device name.\n\n4. Select the page for debugging.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Inspect Device\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/pJON7MWpRgKo42WJcHAA\",\n        \"safari-inspect-device-ani.gif\",\n        \"651\",\n        \"365\",\n        \"#ac9470\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n***\n\nUse the Safari Web Inspector to remotely debug the page on your iOS device.\n\n***\n\n## 2. Debugging on an iOS Simulator\n\nTo debug issues on different versions of iOS, use iOS Simulator.\nDownload older versions of iOS within iOS Simulator to debug older versions of the operating system.\n\n***\n\n### A. Download XCode\n\n1. On your Mac, click on the App Store icon in your dock.\n\n2. Type **“Xcode”** in your search bar to find Xcode.\n\n3. Follow the installation instructions.\n\n***\n\n### B. Install the iOS Simulator\n\n1. On your Mac, open Xcode.\n\n2. On the Xcode menu bar, select **\"Xcode\"**.\n\n3. Navigate to the **\"Preferences\"** menu option.\n\n4. Click **\"Downloads\"**.\n\n5. In the **\"Components\"** tab, select the iOS Simulator versions that you would like.\n\n6. Click **“Install”**.\n\n***\n\n### C. Run the iOS Simulator\n\n1. On the Xcode menu bar, select **\"Xcode\"**.\n\n2. Navigate to the **\"Open Developer Tool\"** menu option.\n\n3. Click **\"iOS Simulator\"**.\n\n***\n\n### D. Open the page for debugging\n\n1. In iOS Simulator, open Safari.\n\n2. Navigate to `Mobify Preview at http://preview.mobify.com` to preview your bundle.\n\n3. Fill in the form fields with your site information.\n\n4. Click **\"Preview\"**.\n\nNavigate to the page for debugging.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Preview\",\n  \"body\": \"Learn to [Preview your Project](doc:preview-your-project) or to [Preview your Project on a Device](doc:preview-on-device).\"\n}\n[/block]\n\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Preview on Device\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/qyU9VXmhQ4SOhYn4AFNx\",\n        \"preview-on-device-ani.gif\",\n        \"366\",\n        \"682\",\n        \"#057ea6\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n***\n\n### E. Inspect the page\n\n1. In the Safari on your Mac, on the Safari menu bar, choose the **\"Develop\"** menu.\n\n2. Scroll to the **iOS Simulator** option.\n\n3. Select the page for debugging.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Preview on Simulator\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/lsM4TLvZRnqksqLschHx\",\n        \"safari-inspect-simulator-ani.gif\",\n        \"689\",\n        \"403\",\n        \"#916b67\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n***\n\nUse the Safari Web Inspector to debug the page in iOS Simulator.",
        "excerpt": "Debug on either an iOS device directly or debug on an iOS simulator.",
        "slug": "debug-on-ios-devices",
        "type": "basic",
        "title": "Debug on iOS Devices and the iOS Simulator"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce9",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d524d33aad0d00ec8cf8",
        "createdAt": "2015-03-19T19:36:04.074Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 3,
        "body": "## A. User Profiles\n\nFor Mobify Preview, we recommend that you use a separate Chrome user profile.\n\nThe preview sets cookies on your site to enable the mobile site.\n\nTo visit the desktop site in a separate window while you work on the mobile version,\nyou need to browse them with different user profiles.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Follow the Google tutorial to find out how to [Add a new user profile in Chrome](https://support.google.com/chrome/answer/2364824?hl=en).\"\n}\n[/block]\n***\n\n## B. Developer Tools Console\n\nWhile you preview your site in Chrome, you get a lot of great information in\nthe Developer Tools Console.\n\nNotice in the Console that there is a section called **\"Evaluated Context\"**. This\nsection shows all of the content that Adaptive.js selected for this page.\nAlso, this includes the content selected in `base.js` and the page view.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"See the Adaptive.js Context\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/SGH0gtkCS1uqqPaVNfzN\",\n        \"adaptivejs-context.png\",\n        \"552\",\n        \"388\",\n        \"#b4186f\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n***\n\n## C. View Source vs. Elements\n\n1\\. Use the **\"Elements\"** tab in Developer Tools.  There, you see the rendered HTML of\nthe mobile site based on your Adaptive.js templates.\n\nThis is different from the original HTML of the desktop page.\n\n2\\. To view the desktop page HTML, navigate to **View** > **Developer** > **View Source**.\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Remember that **\\\"View Source\\\"** shows the original desktop HTML, and that **\\\"Elements\\\"** shows the HTML that was rendered for the mobile site version.\"\n}\n[/block]\n***\n\n## D. Debugging JavaScript\n\nAdaptive.js is great because it allows you to use all of your usual JavaScript debugging techniques.\n\nWhen you debug the router, a view, or a user interface JavaScript file, add `console.log()` to your code.\nThis outputs the content to the command-line terminal.\n\nOr, add debugger statements to pause execution and step through the code.\n\n***\n\n## E. Search Sources\n\nAs you hunt down bugs, it is useful for you to search through the code that is running on the current page.\n\n1. To search the resources that are used on this page, open **\"Developer Tools\"**.\n\n2. Go to the **\"Search\"** tab.\n\n3. Type in a search term and click **\"Enter\"**.\n\nThe search results populate with matches in any resource (HTML, JS, CSS) that is on the current page.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Searching Sources\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/ly28wTuMSKigBEa9pu3D\",\n        \"search-sources-ani.gif\",\n        \"595\",\n        \"572\",\n        \"#a55441\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n***\n\nFor further resources on Chrome Developer Tools, visit these links:\n\n* [Secrets of the Browser Developer Tools](http://devtoolsecrets.com/)\n\n* The blog entry [Lesser-Known JavaScript Debugging Techniques](http://amasad.me/2014/03/09/lesser-known-javascript-debugging-techniques/) on Amjad Masad's blog.",
        "excerpt": "We recommend Chrome Developer Tools for Adaptive.js site development.",
        "slug": "chrome-developer-tools-tips-and-tricks",
        "type": "basic",
        "title": "Chrome Developer Tools, Tips, and Tricks"
      }
    ],
    "project": "54da9ecd44b1090d00072b60",
    "reference": false,
    "slug": "debugging",
    "title": "Debugging",
    "version": "5568d523d33aad0d00ec8ce4"
  },
  {
    "__v": 1,
    "_id": "5568d524d33aad0d00ec8ce8",
    "createdAt": "2015-03-02T22:52:27.799Z",
    "from_sync": false,
    "order": 9,
    "pages": [
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce8",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d524d33aad0d00ec8cfc",
        "createdAt": "2015-03-02T22:53:03.455Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 0,
        "body": "The goal of our automated tests is to simulate User Acceptance Tests (UAT) as closely as possible. The conversion flow is one of the important pieces that needs to pass the UAT. Examples of this conversion flow for a Mobify site are checkout and reservation flow.\n\nRefer to the testing triangle graphic.\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://www.filepicker.io/api/file/kUDCTzSLGffkzICmYw56\",\n        \"testing-triangle.png\",\n        \"504\",\n        \"426\",\n        \"#181818\",\n        \"\"\n      ],\n      \"caption\": \"The Testing Triangle\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Layers of Automation\",\n  \"body\": \"Read more about the [Layers of Test Automation](http://qa-matters.com/2014/12/28/layers-of-test-automation/) on the QA Matters site.\"\n}\n[/block]\nThe Unit Tests are usually written at a very granular level by developers to test single features that are pending items during development. Toward the top of the pyramid, the tests are less granular in nature and demand a more finished project from end-to-end.\n\nIntegration testing can be done at any time. However, we recommend in particular that as you develop views, you also write integration tests to ensure that the desktop site transforms into its mobile version correctly. Integration Testing is most useful during development. It also helps with regression testing during maintenance after a site is completed.\n\nTo simulate an end-to-end test, we use Nightwatch.js. This implies that the project that we test is in a fairly complete state. We then step through the site and ensure that the visitor can reach the checkout confirmation page.\n\nThese tests need to be automated because there are many repeated page elements that need to be tested each time there is a change to the site. For this task, Mobify has developed a fork from Nightwatch.js with Mobify-specific assertions. These assertions enable us to test Adaptive.js sites easily.\n\nEach time that even an incremental update is made to our site, we test for the checkout flow because it is so critical to the success of the site.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Automated Testing on Components\",\n  \"body\": \"Although Nightwatch.js is meant for end-to-end testing, it is also possible to run tests on components (header, footer), or on pages (product listings, etc).\"\n}\n[/block]\nRead the [Integration Testing](doc:integration-testing-overview) to ensure that your mobile site has been transformed correctly from desktop. Or read the [System Testing Overview](doc:nightwatchjs-overview) to write an automated test to simulate user interaction of your mobile site.",
        "excerpt": "Learn why we run automated testing for Mobify sites.",
        "slug": "automated-testing-overview",
        "type": "basic",
        "title": "Automated Testing Overview"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce8",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "5549299aee219b0d0017432d"
        ],
        "_id": "5568d524d33aad0d00ec8d00",
        "createdAt": "2015-04-15T20:23:58.455Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 0,
        "body": "Nightwatch.js is a tool that automates user interaction for browser end-to-end tests. These system tests are written in Node.js and run against Selenium.\n\n---------------------\n\n## A. How Nightwatch.js Works\n\nTo perform the functionality that you specify in JavaScript, Nightwatch.js wraps around the Selenium browser automation tool.\n\nNightwatch.js allows you to write browser tests in JavaScript, which are then interpreted into Selenium WebDriver instructions. Selenium then executes its commands on the browser and returns their output.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Nightwatch.js Guide\",\n  \"body\": \"Read more about [how Nightwatch.js works](http://nightwatchjs.org/guide) in the official Nightwatch.js guide.\"\n}\n[/block]\nThe Nightwatch.js description of Selenium is adequate for these tests.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Selenium Documentation\",\n  \"body\": \"However, if you are curious, read more about [how Selenium works](http://www.seleniumhq.org/docs) in the official Selenium documentation.\"\n}\n[/block]\nMobify has extended Nightwatch.js's functionality with a custom set of commands and assertions for Mobify-specific sites.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Mobify's Custom Nightwatch.js Commands and Assertions\",\n  \"body\": \"Browse the [Mobify Custom Nightwatch.js Commands and Assertions API](http://mobifydevcenter.readme.io/v1.0/docs/custom-nightwatchjs-commands-and-assertions-api).\"\n}\n[/block]\nFor example in this code snippet, the `preview` function is specific to Mobify.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"...\\nmodule.exports = {\\n    'setUp': function(browser) {\\n        browser\\n            .preview()\\n            ...\\n            .waitForElementVisible(selectors.content);\\n    },\\n...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n---------------------\n\n## B. How to Run Nightwatch.js Tests\n\nEvery Mobify project that has been created with the Adaptive Generator has an option to include Nightwatch.js in your local project.\n\n### a. Run Tests on Local Projects\n\nRun tests on your local project in Terminal (OS X, Linux) or Command Prompt (Windows) to test the local version of the mobile site. Tests execute in the browser and results are output to the command line. This way, you see which element is being tested at a given time.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Learn how to Run Local Automated Tests\",\n  \"body\": \"Work through our [Run Local Automated Tests with Nightwatch.js](https://cloud.mobify.com/docs/adaptivejs/testing/run-local-tests) tutorial.\"\n}\n[/block]\n### b. Run Tests on Uploaded Project Bundles\n\nFor automated tests on bundles that have already been uploaded, CircleCI provides our continuous integration. It runs tests automatically on code changes that have recently been pushed to the GitHub repository. The push passes with a green indicator check mark if all tests pass. You can set CircleCI to send you an email with the test results. It is also easy to add screenshots to the output if you need them.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Learn how to Run Continuous Integration Tests with CircleCI\",\n  \"body\": \"Work through our [Add a Project for Integration Testing](https://cloud.mobify.com/docs/adaptivejs/testing/add-project-circleci) and [Check Automated CircleCI Tests of Cloud Project Bundles](https://cloud.mobify.com/docs/adaptivejs/testing/check-circleci-tests) tutorials.\"\n}\n[/block]",
        "excerpt": "Use Nightwatch.js for your system tests.",
        "slug": "nightwatchjs-overview",
        "type": "basic",
        "title": "System Testing Overview"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce8",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "55492b106a82a10d00817a1a",
          "55492d3dee219b0d0017434a",
          "5563700b468acf1700093adf",
          "556372df4e990b2100d4251b"
        ],
        "_id": "5568d524d33aad0d00ec8cfd",
        "createdAt": "2015-03-18T21:03:13.143Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 1,
        "body": "Nightwatch.js is an end-to-end browser testing tool. It uses Node.js to operate the Selenium WebDriver tools. The JavaScript test instructions that you write in Nightwatch.js rely on CSS selectors to select elements from the webpage. Mobify has implemented its own custom extension of Nightwatch.js to work specifically with features that are common to transformed sites.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Refer to our Mobify [Custom Nightwatch.js Commands and Assertions API](doc:custom-nightwatchjs-commands-and-assertions-api).\",\n  \"title\": \"Custom Nightwatch.js API\"\n}\n[/block]\nThis is similar to the approach that you are already familiar with from building your site because element selections are commonly used in creating the mobile site adaptation in the view files.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"To refresh your memory, skim through the context section in our overview of [Views](doc:views).\",\n  \"title\": \"Views: Context\"\n}\n[/block]\nSimilarly to the Views selection process, you edit the Nightwatch.js test configuration files in the `projectName-mobile/tests/system` directory of your project.\n\nWith the default configuration of Adaptive.js, the `tests` folder already exists within your project directory.\n\n---------------------\n\n## 1. Retrieve your Project from its  GitHub Repository\n\nFollow the next set of steps to download your project to a local directory.\n\nIf you already have a local project to test, skip to **Step 2. Write the Nightwatch.js Test Scripts**.\n\n---------------------\n\n### A. Add your SSH key to GitHub\n\nTo set up your computer to communicate with GitHub, add your SSH key\nto GitHub. This is done only once per computer.\n\n[Add your SSH key to GitHub](https://help.github.com/articles/generating-ssh-keys/)\n\n---------------------\n\n### B. Clone the GitHub repository\n\n1\\. In your web browser, [go to GitHub at http://www.github.com](http://www.github.com) and navigate to your GitHub project repository\n\n2\\. Locate the \"clone URL\" option on the sidebar.\n\n3\\. Click the \"SSH\" toggle link to switch to the SSH option.\n\n4\\. Copy the resulting URL to your clipboard using the button beside the URL bar.\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://www.filepicker.io/api/file/vonYNKAJTIe6VFSITq0N\",\n        \"github-clone-url-ani.gif\",\n        \"226\",\n        \"177\",\n        \"#996c48\",\n        \"\"\n      ],\n      \"caption\": \"GitHub Clone URL\"\n    }\n  ]\n}\n[/block]\n5\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n6\\. To change to your project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n7\\. To clone the GitHub repository, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git clone git://replaceCopiedURL\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nSubstitute the `git://replaceCopiedURL` argument in the command with the URL that you copied to your clipboard in the previous step.\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://www.filepicker.io/api/file/JzZ6qtgdR7OL2dNcAmf8\",\n        \"git-clone-ani.gif\",\n        \"614\",\n        \"347\",\n        \"#3d93b0\",\n        \"\"\n      ],\n      \"caption\": \"GitHub clone command\"\n    }\n  ]\n}\n[/block]\n---------------------\n\n## 2. Write the Nightwatch.js Test Scripts\n\nThe test files use commands and `verify` and `assert` statements to do their work.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"As a best practice, always define your selectors separately at the top of each test file. This improves code maintainability because selectors often change.\"\n}\n[/block]\n---------------------\n\n### A. Create a Simple Nightwatch.js Test File\n\n1\\. In your local project directory, locate the `projectName-mobile/tests/system` directory.\n\n2\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n3\\. To change to the `system` test folder of your local project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/localGitHubRepository/projectName-mobile/test/system\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nDefine your test files in this directory. This directory is included by default with your project structure.\n\n4\\. To create a new directory called `pages` in the `projectName-mobile/tests/system` directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"mkdir pages\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n5\\. Launch a text editor app to create a new JavaScript file in this directory.\n\n6\\. Copy the script listed below into your editor app. Save it as the `index.js` file in the `projectName-mobile/tests/system/pages` directory.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"var selectors = {\\n  body: 'body'\\n}\\n\\nmodule.exports = {\\n    'setUp': function(browser) {\\n        browser.preview()\\n    },\\n\\n    'Index test': function(browser) {\\n        // Page level tests go here, product index, PDP...\\n        browser\\n            // Verify that the <body> tag is present.\\n            .verify.elementPresent(selectors.body)\\n           .end();\\n    }\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n---------------------\n\n### B. Write More Test Files\n\nIn this optional step, repeat the previous **Step A. Create a Test File** to include any other tests for your mobile site.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Refer to our [Custom Nightwatch.js Commands and Assertions API](doc:custom-nightwatchjs-commands-and-assertions-api) to learn to write Nightwatch.js tests for Mobify sites.\",\n  \"title\": \"Custom Nightwatch.js API\"\n}\n[/block]\n---------------------\n\n## 3. Run the Automated Nightwatch.js Tests\n\nExecute your Nightwatch.js tests with Grunt.\n\n---------------------\n\n### A. Install the NPM Packages\n\nYour Adaptive.js project has specific NPM package dependencies which are needed to run your project. These only need to be installed once.\n\n1\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n2\\. To change to your project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n3\\. To install the NPM packages, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"npm install\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nOr if you need administrative privileges, precede the command with `sudo` as follows:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"sudo npm install\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n---------------------\n\n### B. Run Nightwatch.js\n\nUse the Grunt JavaScript task runner to execute your Nightwatch.js tests.\n\n1\\. Start your local Adaptive.js server:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt preview\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n\n\n2\\. To run the Nightwatch.js tests,  enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt nightwatch\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nNow Grunt successively runs your test scripts.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Running Specific Tests\",\n  \"body\": \"`grunt nightwatch --group <group>` runs tests under a subfolder specified at <group>\\n\\n`grunt nightwatch --test <path>` runs the single test specified at <path>\"\n}\n[/block]\nBy default, the Nightwatch.js tests are run against a Preview environment specified inside `tests/system/site.json`. Change the `activeProfile` value to `production` in order to bypass the Preview step and run tests directly against production. \n\nGrunt launches Chrome as it executes the Nightwatch.js tests. You see each test as it executes on the browser.\n\nChrome is Mobify's preferred browser. To change to another browser, in the Selenium section, change the content of the `tests/system/nightwatch.json` config file.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"\\\"selenium\\\": {\\n        ...\\n        \\\"cli_args\\\": {\\n            \\\"webdriver.chrome.driver\\\": \\\"./node_modules/nightwatch-commands/selenium/drivers/chromedriver\\\"\\n        }\\n    },\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nIf you remove this line, Selenium uses its default browser, Firefox.\n\nThe results of the Nightwatch.js tests display on the command line.",
        "excerpt": "Write a simple Nightwatch.js test and execute it on a local version of your mobile site.",
        "slug": "run-local-automated-test",
        "type": "basic",
        "title": "Run a Local Automated Test"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce8",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d524d33aad0d00ec8cfe",
        "createdAt": "2015-03-18T21:16:41.665Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 3,
        "body": "There are a several of advantages to running your tests in CircleCI:\n\n* You or your team members do not forget to run tests. Every change that gets committed to the repository is tested. This also includes merges which are often not tested manually. For example, such a merge can occur when a dev merges changes from a currently checked out branch into `master` or `development` and accidentally breaks something.\n\n* You can set up notifications for your team when a test on CircleCI fails. This is great for teaching the \"build should never fail\" mindset. Once the build breaks, it becomes difficult for the team to figure out whether the build was already broken or if recent changes broke something new.\n\n* CircleCI builds from a blank slate so it allows you to catch errors that were introduced by dependency updates. For example, someone decides to upgrade the project to a new version of Nightwatch.js or Adaptive.js. If everyone else on the team then does not run `npm install` manually on their own machines, the bugs that are introduced by that update will not be caught. By contrast, CircleCI will build the project from a blank slate and catch these errors.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read the [Continuous Integration article on ThroughtWorks](http://www.thoughtworks.com/continuous-integration) for more information about continuous integration practices in software.\",\n  \"title\": \"Continuous Integration\"\n}\n[/block]\n---------------------\n\n## 1. Build your Project in CircleCI\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"To add new project to CircleCI, you need to be an administrator for the CircleCI account. Ask your system administrator for access privileges.\"\n}\n[/block]\n1\\. Click on the upper right hand **\"Log In\"** link to sign in to [CircleCI at  https://circleci.com/](https://circleci.com/) with your GitHub account credentials.\n\n2\\. On the left-hand side menu, select the **\"Add Projects\"** menu option.\n\n3\\. On the **\"Add Projects\"** page, under the first **\"Your accounts\"** section, click the **\"mobify\"** link.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"If you are Mobify partner, select your company name and URL instead.\"\n}\n[/block]\n\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Chose Your Account\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/fBMbY9gyQTSaYPLJPCii\",\n        \"circleci-choose-account.png\",\n        \"1056\",\n        \"442\",\n        \"#754a3b\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n4\\. On the **\"Add Projects\"** page, in the second section, filter or scroll for your project repository.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Choose Your GitHub Repository\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/KSbDbnXVRHq34RV0BSmE\",\n        \"circleci-choose-repository.png\",\n        \"1058\",\n        \"266\",\n        \"#377648\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n5\\. Click the **\"Build Project\"** button beside the repository name.\n\nCircleCI installs dependencies and starts to build.\n\nThe side bar loads with all of the branch activities for that project.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"The Building Repository\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/Ei6yl11CQmuP3XLHcVni\",\n        \"circleci-repository-build.png\",\n        \"1096\",\n        \"238\",\n        \"#109786\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\nIn the side bar under the project name, the Nightwatch.js tests that recently ran on the project are listed. The successful ones have a green checkmark indicator and failed attempts have a red cross.\n\nThe test either passes or fails.\n\n6\\. Scroll to the top heading of the page to see the Nightwatch.js test status displayed.\n\n---------------------\n\n## 2. Add the CircleCI Configuration File to your GitHub Repository to Execute Automated Testing\n\n1\\. Copy this `circle.yml` configuration file listing for a simple CircleCI Nightwatch.js tests.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"dependencies:\\n    override:\\n        - gem install sass compass:\\n            timeout: 600\\n        - npm install:\\n            timeout: 600\\n    post:\\n        - chmod 755 ./node_modules/nightwatch-commands/selenium/drivers/chromedriver:\\n            timeout: 10\\n\\ntest:\\n    pre:\\n        - grunt preview:\\n            background: true\\n            timeout: 120\\n        - sleep 5\\n    override:\\n        - grunt nightwatch:\\n            timeout: 600\",\n      \"language\": \"yaml\"\n    }\n  ]\n}\n[/block]\n2\\. Go to [GitHub at https://github.com/mobify/](https://github.com/mobify/).\n\nIf you are a Mobify partner, sign in to your company GitHub repository.\n\n3\\. Filter to find your project in the repository.\n\nFor example, start to type \"merlin\" to find the `merlins-potions-adaptive` repository.\n\n4\\. Click on your project name to view its code repository in GitHub.\n\n5\\. At the top of the project branch, near the name of the project, click the **\"+\"** link to create a new file at the root level of the project.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Add a New File to the GitHub Repository\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/871Ivlk3RDis29bIqLUe\",\n        \"github-add-file.png\",\n        \"894\",\n        \"319\",\n        \"#723059\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n6\\. In the **\"Name your file...\"** text box, enter the `circle.yml` file name.\n\n7\\. Paste the contents of your clipboard with the simple CircleCI script into the **\"Edit new file\"** text field.\n\n8\\. Scroll to the bottom of the page to commit the new file. Type in any additional descriptions in the provided text fields.\n\n9\\. Select the **\"Create a new branch for this commit ... \"** toggle to create a new branch for the test.\n\nName your branch with our lower caps and dash-separated `name-of-new-branch` name convention.\n\n10\\. Click the **\"Propose new file\"** button.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Commit New File in GitHub\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/2ticJA0BSLmfbCSZxPBe\",\n        \"github-commit-new-file.png\",\n        \"918\",\n        \"367\",\n        \"#51332a\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n11\\. On the next page, fill out the details of your pull request and click the **\"Create pull request\"** button.\n\n12\\. The next page that appears shows your new **\"Create circle.yml #PullRequestNumber\"** pull request.\n\n13\\. Hover over the indicator beside your commit number to see the status of the CircleCI test. It displays a message similar to **\"Pending: CircleCI is running your tests.\"**\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Test Indicator\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/GPQ6PT8Q5udxQNAZVBYN\",\n        \"test-indicator.png\",\n        \"790\",\n        \"60\",\n        \"#b79670\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n14\\. Click on the colored indicator to see the execution of CircleCI on your project in the CircleCI site.\n\nThe test executes with a success message if Nightwatch is correctly configured.\n\n15\\. Navigate with the **\"Back\"** button of your browser to GitHub to check your pull request.\n\nYour test status indicators show red crosses for failed tests and green check marks for successful tests.\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://www.filepicker.io/api/file/ouovi5sfRcWgWK4iRSlg\",\n        \"test-execution-indicators.png\",\n        \"876\",\n        \"447\",\n        \"#616e94\",\n        \"\"\n      ],\n      \"caption\": \"The Test Execturion Indicator Marks\"\n    }\n  ]\n}\n[/block]",
        "excerpt": "Link an existing project in a GitHub repository to CircleCI for continuous integration testing.",
        "slug": "add-project-to-circleci",
        "type": "basic",
        "title": "1. Add a Project to CircleCI"
      },
      {
        "__v": 2,
        "_id": "5568d524d33aad0d00ec8cff",
        "api": {
          "auth": "required",
          "params": [],
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "url": ""
        },
        "body": "CircleCI provides the continuous integration for Mobify's project bundles in Mobify Cloud.\n\nUsers with administrative permissions on the project in GitHub add each project to CircleCI, either at the initial project set up phase or at a later time. Then CircleCI performs the same Nightwatch.js automated test as on a local desktop machine except on Circle's machines.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Work through the [Add a Project to CircleCI](doc:add-project-to-circleci) with CircleCI tutorial.\",\n  \"title\": \"Add a Project to CircleCI\"\n}\n[/block]\n\nThe CircleCI configuration `circle.yml` file template contains some commands that are now familiar to you: `npm install`, `grunt preview`, `grunt nightwatch`.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"dependencies:\\n    override:\\n        - gem install sass compass:\\n            timeout: 600\\n        - npm install:\\n            timeout: 600\\n    post:\\n        - chmod 755 ./node_modules/nightwatch-commands/selenium/drivers/chromedriver:\\n            timeout: 10\\n\\ntest:\\n    pre:\\n        - grunt preview:\\n            background: true\\n            timeout: 120\\n        - sleep 5\\n    override:\\n        - grunt nightwatch:\\n            timeout: 600\",\n      \"language\": \"yaml\"\n    }\n  ]\n}\n[/block]\n\n---------------------\n\n## Check Test Results on CircleCI\n\nFollow these steps to check the results of the automated Nightwatch.js test.\n\n1\\. Click on the upper right hand **\"Log In\"** link to sign in to [CircleCi at  https://circleci.com/](https://circleci.com/) with your GitHub account credentials.\n\n2\\. On the left-hand side menu, select the **\"Add Projects\"** menu option.\n\n3\\. On the **\"Add Projects\"** page, under the **\"Your Organizations\"** section, click the **\"mobify\"** link.\n\nIf you are Mobify partner, select your company name instead.\n\n4\\. On the **\"Start following your projects\"** page, filter or scroll for your project repository.\n\n5\\. Click the **\"Follow\"** button beside the repository name.\n\nThe side bar loads with all of the branch activities for that project.\n\nIn the side bar under the project name, the Nightwatch.js tests that recently ran on the project are listed. The successful ones have a green checkmark indicator and failed attempts have a red cross.\n\n6\\. Click on each test name to investigate its output log.\n\nCircleCI has the option to also take screen shots of its test stages. CircleCI also integrates into HipChat to warn the subscribed users of any failed tests.",
        "category": "5568d524d33aad0d00ec8ce8",
        "createdAt": "2015-03-18T22:21:20.882Z",
        "excerpt": "Check the results of Nightwatch.js tests on project bundles in Cloud in CircleCI.",
        "githubsync": "",
        "hidden": false,
        "link_external": false,
        "link_url": "",
        "order": 4,
        "project": "54da9ecd44b1090d00072b60",
        "slug": "check-circleci-tests",
        "sync_unique": "",
        "title": "2. Check Automated CircleCI Tests",
        "type": "basic",
        "updates": [],
        "user": "54daa360ee3b8419007e45ff",
        "version": "5568d523d33aad0d00ec8ce4"
      }
    ],
    "project": "54da9ecd44b1090d00072b60",
    "reference": false,
    "slug": "automated-testing",
    "title": "Automated Testing",
    "version": "5568d523d33aad0d00ec8ce4"
  },
  {
    "__v": 1,
    "_id": "5568d524d33aad0d00ec8ceb",
    "createdAt": "2015-03-16T21:11:50.028Z",
    "from_sync": false,
    "order": 10,
    "pages": [
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ceb",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "55491570afc5ed0d00e14664"
        ],
        "_id": "5568d525d33aad0d00ec8d0b",
        "createdAt": "2015-03-25T18:06:28.046Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 0,
        "body": "Run integration tests to ensure that the mobile page has been created correctly from its desktop counterpart.\n\nTo that end, integration tests involve checking that the components that you expect to appear on the mobile site are actually present there. Integration testing can be done at any time, during or after mobile site development. However, we recommend that you write the integration tests as you develop each Adaptive.js view.\n\n***\n## A. The Differences Between an Integration Test and a System Test\n\nSystem tests simulate end-to-end tests. These tests demand that the views and templates are complete and can be done towards the end stages of development.\n\nHowever, this is not strictly to say that Integration Tests are only for the early stages for development. Integration tests still have value after the development is complete also. In particular, integration tests should be run during maintenance, particularly when views and/or templates are changed.\n\n***\n## B. When to Run Integration Tests\n\nWrite tests as views are developed. Since integration tests run quickly, run them often. In particular, run the test after you make any changes to the view. Definitely test before you build a bundle.\n\n***\n\n## C. Integration Testing Commands\n\nUse one of these commands to perform your integration test. The functionality of each command is summarized by this table for your reference:\n[block:parameters]\n{\n  \"data\": {\n    \"1-0\": \"**build step**\",\n    \"2-0\": \"**integration**\",\n    \"3-0\": \"**output**\",\n    \"0-1\": \"`grunt test`\",\n    \"0-2\": \"`grunt test_skip_build`\",\n    \"0-3\": \"`grunt test_browser`\",\n    \"1-1\": \"x\",\n    \"2-1\": \"x\",\n    \"3-1\": \"console\",\n    \"3-2\": \"console\",\n    \"3-3\": \"browser\",\n    \"2-2\": \"x\",\n    \"1-3\": \"x\",\n    \"2-3\": \"x\"\n  },\n  \"cols\": 4,\n  \"rows\": 4\n}\n[/block]\n\n* The `grunt test` command runs the build step, the integration tests, and then outputs the test results to the command line.\n\n* The `grunt test_skip_build` command runs the integration test and outputs the test results to the command line.\n\n* If you use the `grunt test_browser` command, in your browser, go to `http://localhost:8888/tests/runner` to see the results. Refresh the page to re-run the tests.\n\n\n***\n\n## D. How to Write the Tests\n\nThe goal of integration testing is to ensure that the desktop page is transformed correctly to its mobile counterpart. A large part of that entails testing for expected components to appear in the adapted site.\n\nWrite your assertions in in the `expect` style. This style has a descriptive test name that tells us what the test is checking.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Use the Expect Library\",\n  \"body\": \"The [`expect` library](http://chaijs.com/api/bdd/) uses language chains that make assertions more readable. For example, `expect(title).to.be.a(‘string’)` is a self-explanatory command.\"\n}\n[/block]\nThe `expect` language chains make assertions that read like natural language.\n\nFor example, refer to this code snippet of a context test for a `pageBody` element:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"...\\n\\n'context pageBody is a Zepto object': function($, context){\\n  var $pageBody = context.pageBody;\\n  expect($pageBody).to.have.length.above(0);\\n},\\n  \\n...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Use Descriptive Variables\",\n  \"body\": \"Choose variable names that directly describe the components that they represent.\"\n}\n[/block]\nFrom the previous context test code snippet, the `$pageBody` variable represents the page body context property. Moreover, it follows our convention where a variable for a Zepto or JQuery object is preceded by the `$` symbol.\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Test multiple page conditions with multiple fixtures in one test script.\",\n  \"title\": \"Best Practice: Test with Multiple Fixtures\"\n}\n[/block]\nSave fixtures for the normal state of a page, its variations, and for its exceptional cases. For example, a product description page has a normal state, a sale, and an error.\n\nThe following table contains more examples.\n[block:parameters]\n{\n  \"data\": {\n    \"h-0\": \"Normal Page\",\n    \"0-0\": \"Product Description\",\n    \"h-1\": \"Exceptional State\",\n    \"0-1\": \"Sale\",\n    \"1-1\": \"Cart with Items\",\n    \"1-0\": \"Empty Cart Page\",\n    \"2-0\": \"Not Logged In\",\n    \"2-1\": \"Logged In\",\n    \"3-0\": \"Page With a Form\",\n    \"3-1\": \"Page with Form Errors\\n(missing name, email, postal code, etc...)\"\n  },\n  \"cols\": 2,\n  \"rows\": 4\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Test Global Site Features in a Separate Test Files\",\n  \"body\": \"Global includes, such as a header and a footer, have their own test files.\"\n}\n[/block]\nIf the states of globally included page elements change on different templates, create a new block of tests for that file. Use fixtures that represent different states.\n\nTo test the header, use any view and a fixture that has a header. See the following `HeaderTest.js` code listing to understand how to implement this in your code.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"define([\\n  'lib/viewMocker',\\n  'views/home',\\n  'text!fixtures/home.html'\\n  ],\\nfunction(test, view, fixture){\\n\\n  test('Header context', view, fixture, {\\n    \\n    'context keys exist': function($, context){\\n      var header = context.header;\\n      assert.property(header, 'logo');\\n    },\\n    \\n    'context logo anchor href': function($, context){\\n      var logo = context.header.logo;\\n      assert.equal(logo.attrs.href, 'http:///www.jtv.com/homepage');\\n    }\\n  });\\n});\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]",
        "excerpt": "An introduction to Mobify's integration testing practices and tools.",
        "slug": "integration-testing-overview",
        "type": "basic",
        "title": "Integration Testing Overview"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ceb",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "554917fad2c8410d006c232f"
        ],
        "_id": "5568d525d33aad0d00ec8d08",
        "createdAt": "2015-03-16T21:18:45.909Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 1,
        "body": "The Adaptive.js generator includes a sub-generator which is a generator that allows you to scaffold a small sub-set of a project. The Adaptive.js sub-generator generates view files, which include the view file itself, the dust template, and a view test file.\n\nFor example, we use the `category` view for a sample product page.\n\n***\n\n## 1. Generate the `category` View\n\nIf your project folder does not already have a view, create a new `category` view for test purposes.\n\n***\n\n1\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n2\\. To generate the view with the Yeoman generator, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"yo adaptivejs:view\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n3\\. When the generator prompts you for the name of the view, enter `category`.\n\n4\\. When the generator prompts you for the view to extend from, select `base` with the arrow keys on your keyboard and hit the `Enter` key.\n\nIgnore the message about adding the new view files configurations to the project. You do this manually in the next step.\n\n***\n\n## 2. Add your `category` View to the Runner\n\nNow that you have a sample view, let's configure the test runner to include the generated test file. The test runner is what mocha, the Mobify Integration Testing framework, runs its tests with. Specify which files to include when you run the test with the `grunt test` command.\n\n***\n\n1\\. In your project directory, from the `tests/runner/` folder, open the `testRunner.js` file.\n\nHere, you configure the test runner file with the new `category` view test file.\n\n2\\. In the `testRunner.js` file, inside the `tests` array, add the `tests/integration/categoryTest` statement. Your code looks similar to the following snippet:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"...\\n    function(require, chai, customAssertions, mocha){\\n\\n        var tests = [\\n            'tests/integration/homeTest',\\n          \\t'tests/integration/categoryTest'\\n        ];\\n...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n\n\n3\\. To ensure that the project is correctly configured, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt test\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n***\n\n## 3. Save a Fixture of your Desktop Site\n\nThe Adaptive.js integration tests run with the help of a page from the desktop site that is saved locally in your project folder. This saved page is known as a fixture.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Fixtures\",\n  \"body\": \"Read more about fixtures in our [Integration Testing Overview](doc:integration-testing-overview).\"\n}\n[/block]\nFixtures allow you to run the tests quickly without the need to connect to the real website. They also provide stability for your testing: changes to the desktop won't affect your tests.\n\nThis section continues with the `category` view example.\n\n***\n\nIn your project directory, in the `tests/fixtures` folder, there is a default `category.html` fixture. Populate this fixture with the correct desktop version of your product page.\n\n1. In your web browser, go to the product listing page of your desktop site.  For example, the  [Merlin's Potions category page at http://www.merlinspotions.com/potions/](http://www.merlinspotions.com/potions/) is a sample product listing.\n\n2. To save your product page, right click your mouse on the page and select the **\"Save Page as\"** menu option. Save the HTML file in your project directory in the `tests/fixtures/` folder as `category.html`.\n\n3. To execute the tests against the new fixtures, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt test\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nIf there are any absolute paths in the desktop page that reference any resources, remove them from the HTML. If you do not remove these absolute paths, the `grunt test` command outputs the \"Error loading resource\" message. However, you can simply ignore these errors also.\n\n***\n\nNow that you have set up your project for integration testing, [Write a Context Test](doc:write-a-context-test).",
        "excerpt": "Ensure that your project has a view that is ready for integration testing.",
        "slug": "set-up-your-project-for-integration-testing",
        "type": "basic",
        "title": "1. Set Up your Project for Integration Testing"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ceb",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "55089d705519110d008769f7",
          "5508a0e90f146f3500b031ba",
          "5508a14b2b5ede2f0071ae53",
          "5508a4ad0f146f3500b031c1",
          "55491e60d2c8410d006c2346"
        ],
        "_id": "5568d525d33aad0d00ec8d09",
        "createdAt": "2015-03-16T22:26:32.829Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 2,
        "body": "[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Ensure that you have [Set Up your Project for Integration Testing](doc:set-up-your-project-for-integration-testing) before you proceed with this tutorial.\",\n  \"title\": \"Set Up your Project\"\n}\n[/block]\n***\n\nThe integration tests use the Chai assertion library.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Chai API\",\n  \"body\": \"Refer to the [official Chai assertion library documentation at http://chaijs.com/api/assert/](http://chaijs.com/api/assert/).\"\n}\n[/block]\nAssertions are performed against context properties. Assertions verify that our expectations of what the properties contain are correct.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Use Mobify's Custom Chai Assertions in your Project\",\n  \"body\": \"Refer to the [Custom Chai Assertions API](doc:custom-chai-assertions-api) to use these custom commands in your proejcts. If you are using a version of Adaptive.js previous to 1.6.0, follow the [Add Custom Chai Assertions to your Adaptive.js Project](doc:add-custom-chai-assertions-to-your-adaptivejs-proj) tutorial.\"\n}\n[/block]\n***\n\n## 1. Write a Test for the `title` Context Property\n\nOne of the most universal elements to test for is a title.\n\n1\\. In an editor app, from your project directory, from the `tests/integration/` folder, open the `categoryTest.js` file.\n\nThis is the file where you write the test.\n\n2\\. To refer to the the category context objects, from the `adaptation/views/` folder, open the `category.js` view file.\n\nThis file is where you find the `title` context property.\n\n3\\. In the `categoryTest.js` file, write a test against the `title` context property that is used in the `adaptation/views/category.js` category view.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Use Descriptive Variables\",\n  \"body\": \"Choose variable names that directly describe the components that they represent.\"\n}\n[/block]\nUse the variable name `title` to store the title DOM object.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Use the $ Prefix\",\n  \"body\": \"By convention, preface variables that represent a Zepto or a jQuery object with a `$` character.\"\n}\n[/block]\nThe `title` property returns a Zepto object, so prefix the variable name with the `$` character.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"var $title = context.title;\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"The [`expect` library](http://chaijs.com/api/bdd/) uses language chains that make assertions more readable. For example, `expect(title).to.be.a(‘string’)` is a self-explanatory command.\",\n  \"title\": \"Best Practice: Use the Expect Library\"\n}\n[/block]\nTo test that the property correctly selected the element from the DOM, ensure that its length is 1 with the `length` function. Follow the Best Practice of testing in the `expect` style.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"expect($title).to.have.length(1);\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nWhen you are finished, your code looks like this snippet:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"function(test, view, fixture) {\\n    test('category view context', view, fixture, {\\n        'context contains the correct template name': function($, context) {\\n            var templateName = context.templateName;\\n          \\n            expect(templateName).to.equal('category', 'category context has correct template name');\\n        },\\n\\n        'Category context properties exist': function($, context) {\\n            expect(context).to.have.property('title');\\n            expect(context).to.have.property('listing');\\n        },\\n\\n        'context.title property contains title element': function($, context) {\\n            var $title = context.title;\\n            expect($title).to.have.length(1);\\n        },\\n\\n        ...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"Ensure that you append the comma after the `Category context properties exist` block!\"\n}\n[/block]\n\n4\\. Under the properties that exist in the `categoryTest.js` test, add a comma and add a new test to ensure that there is one `title` on the page.\n\nSince the `title` property returns a Zepto object, test that the property correctly selected the element from the DOM.\n\nUse the `length` property of the Zepto object to check if an element was found. Since you expect 1 element to be returned, build an assertion around that. \n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: One Assertion Per Test\",\n  \"body\": \"Limit the number of assertions to 1 per test, or to 1 property per test.\"\n}\n[/block]\nIt is sufficient to assert that the context property's length is equal to 1.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Write Tests that are Sufficient\",\n  \"body\": \"Use your own discretion. Test for expected types, values, and lengths of your context properties.\"\n}\n[/block]\nWhen you are done, your looks something like the following snippet. It also contains the test that you wrote in the previous step.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"function(test, view, fixture) {\\n    test('category view context', view, fixture, {\\n        'context contains the correct template name': function($, context) {\\n            var templateName = context.templateName;\\n            assert.equal(templateName, 'category', 'category context has correct template name');\\n        },\\n\\n        ...\\n\\n        'context.title property contains tile element': function($, context) {\\n            var $title = context.title;\\n            assert.equal($title.length, 1);\\n        }\\n\\n    });\\n\\n    test('category view DOM', view, fixture, {\\n\\n    });\\n});\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n\n5\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n6\\. To change to your project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n7\\. To execute your test, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt test\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Warning Messages\",\n  \"body\": \"You could see warning messages appended to the output of `grunt test` that look something like:\\n\\n`Unsafe JavaScript attempt to access frame with URL about:blank from frame with URL...`\\n\\nThese warning messages arise out of a [bug in the underlying infrastructure of the test runner ](https://github.com/ariya/phantomjs/issues/12697) and have no bearing on the outcome of the test results.\"\n}\n[/block]\nFor your reference, the completed `categoryTest.js` file listing looks similar to this:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"define([\\n    'lib/viewMocker',\\n    'views/category',\\n    'text!fixtures/category.html'\\n],\\nfunction(test, view, fixture) {\\n    test('category view context', view, fixture, {\\n        'context contains the correct template name': function($, context) {\\n            var templateName = context.templateName;\\n\\n            expect(templateName).to.equal('category', 'category context has correct template name');\\n        },\\n\\n        'Category context properties exist': function($, context) {\\n            expect(context).to.have.property('title');\\n            expect(context).to.have.property('listing');\\n        },\\n\\n        'context.title property contains title element': function($, context) {\\n            var $title = context.title;\\n            expect($title).to.have.length(1);\\n        }\\n    });\\n\\n    test('category view DOM', view, fixture, {\\n\\n    });\\n});\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n\n\n***\n\n## 2. Test Another Context Property\n\nTo expand the test suite, pick another context property and write another test.\n\n***\n\nTo extend the functionality of Chai, use custom assertions in your tests. The Mobify `chai-custom-assertions` library simplifies a few of the assertions that are most often used in integration tests. \n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Learn Mobify's [Custom Chai Assertions API](doc:custom-chai-assertions-api) that are developed especially for common Mobify integration tests.\",\n  \"title\": \"Custom Chai Assertions API\"\n}\n[/block]\n\nFind the library in your project directory in the `node_modules/mobify-chai-assertions` folder. Inside the folder, there is a `README.md` file with a description of the custom assertions.\n\nExamine the `categoryTest.js` file and notice that it uses a custom `properties` assertion. This assertion takes a list of context properties and runs the `assert.property` assertion on each item.\n\nAnother custom assertion, `assert.elementsPresent`, checks for the existence of an element on a page. It is equivalent to checking that the length of a Zepto/jQuery element is greater than zero.\n\n***\n\nFor example, use the category `listing` property to include in the test.\n\n1\\. In your editor app, in your project directory, from the `tests/integration/` folder, open the `categoryTest.js` file.\n\n2\\. To easily refer to the view context object, from the `adaptation/views/` folder, open the `category.js` view file.\n\n3\\. Add another test function stub for the listing property similar to what you did in Part A.  Copy and paste from another test stub into this file.\n\n4\\. Use an assertion to verify that property is being populated correctly. Since category.listing returns a Zepto object, it is populated correctly when the length is greater than zero.\n\nUse an assertion that checks the object's length, or use the `assert.elementsPresent($listing)` custom assertion. \n\nIf you're curious, your completed categoryTest.js file listing will look something like this:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"define([\\n    'lib/viewMocker',\\n    'views/category',\\n    'text!fixtures/category.html'\\n],\\nfunction(test, view, fixture) {\\n    test('category view context', view, fixture, {\\n        'context contains the correct template name': function($, context) {\\n            var templateName = context.templateName;\\n            assert.equal(templateName, 'category', 'category context has correct template name');\\n        },\\n\\n        'Category context properties exist': function($, context) {\\n            //Equivalent to asserting existence of each individual property.\\n            assert.properties(context, 'title', 'listing');\\n        },\\n\\n        'context.title property contains tile element': function($, context) {\\n            var $title = context.title;\\n            assert.equal($title.length, 1);\\n        },\\n\\n        'context.listing property contains listing element': function($, context) {\\n            var $listing = context.listing;\\n            assert.equal($listing.length, 1);\\n        },\\n\\n        'title context property selects title element': function($, context) {\\n            var $title = context.title;\\n\\n            assert.elementsPresent($title);\\n        },\\n\\n        'listing context property selects listing element': function($, context) {\\n            var $listing = context.listing;\\n\\n            assert.elementsPresent($listing);\\n        }\\n    });\\n\\n    test('category view DOM', view, fixture, {\\n\\n    });\\n});\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n5\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n6\\. To change to your project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n7\\. To execute your test, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt test\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n***\n\nNow that you have a context test, go on to [Write a DOM Test](doc:write-a-dom-test).",
        "excerpt": "Write your first context integration test.",
        "slug": "write-a-context-test",
        "type": "basic",
        "title": "2. Write a Context Test"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ceb",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "5508a62b2b5ede2f0071ae5e",
          "55491f5ff452670d00ec0b5e"
        ],
        "_id": "5568d525d33aad0d00ec8d0a",
        "createdAt": "2015-03-17T01:23:31.346Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 3,
        "body": "The Adaptive.js integration tests allow you to test not only context properties but the adapted DOM as well. When the integration tests run, they perform a full adaptation of the view that you are testing. The resulting HTML document is bound to the `$` parameter that is passed into the test functions. Using the `$` parameter, you can query into the adapted DOM just like any other view or UI script. This allows you to verify the existence and structure of elements within that DOM.\n\n***\n## Write your first DOM Test\n\nWrite a simple DOM test to check for the existence of the `t-category__title` element in the DOM.\n\n1\\. In an editor app, from your project directory, from the `tests/integration/` folder, open `categoryTest.js` and `homeTest.js`.\n\nLook at the DOM test section in the `homeTest.js` file for an example of how to write one of these tests.\n\n2\\. Go to your `categoryTest.js` file and add a new test function under the `category view DOM test` block.\n\n3\\. Inside the test function, write a test that asserts the existence of the element with the `t-category__title` class.\n\nWhen you finish, your completed `categoryTest.js` file looks like this:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"define([\\n    'lib/viewMocker',\\n    'views/category',\\n    'text!fixtures/category.html'\\n],\\nfunction(test, view, fixture) {\\n    test('category view context', view, fixture, {\\n        'context contains the correct template name': function($, context) {\\n            var templateName = context.templateName;\\n            assert.equal(templateName, 'category', 'category context has correct template name');\\n        },\\n\\n        'Category context properties exist': function($, context) {\\n            //Equivalent to asserting existence of each individual property.\\n            assert.properties(context, 'title', 'listing');\\n        },\\n\\n        'title context property selects title element': function($, context) {\\n            var $title = context.title;\\n\\n            assert.elementsPresent($title);\\n        },\\n\\n        'listing context property selects listing element': function($, context) {\\n            var $listing = context.listing;\\n\\n            assert.elementsPresent($listing);\\n        }\\n    });\\n\\n    test('category view DOM', view, fixture, {\\n        'Title content element is present': function($) {\\n            var $title = $('.t-category__title');\\n\\n            assert.elementsPresent($title);\\n        }\\n    });\\n});\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n4\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n5\\. To change to your project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n6\\. To execute your test, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt test\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n***\n\nTo test your understanding, add a DOM test for the `t-category__category-listing` listing element. Remember to append a comma to the end of the `category view DOM` title code block before you do!",
        "excerpt": "Write a simple DOM test to check the existence of an element.",
        "slug": "write-a-dom-test",
        "type": "basic",
        "title": "3. Write a DOM Test"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ceb",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "552d4ac2d048dd0d00f36e5e",
          "554920c4ee219b0d0017430a"
        ],
        "_id": "5568d525d33aad0d00ec8d0d",
        "createdAt": "2015-03-25T18:33:33.742Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 4,
        "body": "## Use the `chai-custom-assertions` Plugin in your Project\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Add Custom Chai to your Project\",\n  \"body\": \"If you are using a version of Adaptive.js previous to 1.6.0, follow the [Add Custom Chai Assertions to your Adaptive.js Project](doc:add-custom-chai-assertions-to-your-adaptivejs-proj) tutorial.\"\n}\n[/block]\n*** \n\n## Custom Assertion Methods\n\nThe plugin extends Chai with these methods. Use either the assert or expect styles.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Since Chai's API supports only the `expect` style, we implemented these methods for the `expect` style first and then for the `assert` style as a wrapper.\",\n  \"title\": \"Expect\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Use the Expect Library\",\n  \"body\": \"The [Chai `expect` library](http://chaijs.com/api/bdd/) uses language chains that make assertions more readable. For example, `expect(title).to.be.a(‘string’)` is a self-explanatory command.\"\n}\n[/block]\n***\n[block:html]\n{\n  \"html\": \"<table border=\\\"0\\\" align=\\\"center\\\">\\n\\t<tr bgcolor=\\\"#C0C0C0\\\">\\n\\t\\t<th>Custom Assertions</th>\\n\\t</tr>\\n  \\n\\t<tr>\\n    <td></td>\\n    <td></td>\\n\\t</tr>\\n\\n\\t<tr>\\n\\t\\t<td>\\n\\t\\t\\t<ul>\\n        <li><a href=\\\"#elementsEqual\\\">elementsEqual</a></li>\\n\\t\\t\\t\\t<li><a href=\\\"#elementsNotEqual\\\">elementsNotEqual</a></li>\\n\\t\\t\\t\\t<li><a href=\\\"#elementsNotPresent\\\">elementsNotPresent</a></li>\\n\\t\\t\\t\\t<li><a href=\\\"#elementsPresent\\\">elementsPresent</a></li>\\n        <li><a href=\\\"#hasItems\\\">hasItems</a></li>\\n        <li><a href=\\\"#properties\\\">properties</a></li>\\n\\t\\t\\t</ul>\\n\\t\\t</td>\\n\\t</tr>\\n</table>\"\n}\n[/block]\n\n[block:html]\n{\n  \"html\": \"<!-- Custom Assertions Table -->\\n<table border=\\\"0\\\" width=\\\"80%\\\" align=\\\"center\\\">\\n\\t<tr bgcolor=\\\"#C0C0C0\\\">\\n\\t\\t<th><h2><a id=\\\"assertions\\\">Custom Assertions</a></h2></td>\\n\\t</tr>\\n\\n\\t<tr>\\n    <td>\\n      <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n        <tr><td><b><h3><a id=\\\"elementsEqual\\\">elementsEqual(exp, num, [message])</a></h3></b></td></tr>\\n        <tr><td></td></tr>\\n        <tr><td>\\n          <p></p>\\nThe <code>elementsEqual</code> assertion checks that there are exactly <code>num</code> number of elements present.\\n\\t\\t\\t\\t\\t<p></p>\\n\\t\\t\\t\\t</td></tr>\\n        <tr><td>\\n          <p></p>\\n          <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <caption><b>Input</b><br></caption>\\n            <tr bgcolor=\\\"#C0C0C0\\\">\\n              <th>Parameter Name</th>\\n              <th>Parameter Type</th>\\n              <th>Description</th>\\n            </tr>\\n            <tr>\\n              <td>exp</td>\\n              <td>Zepto/JQuery Object</td>\\n              <td>The expression to run the assertion on.</td>\\n            </tr>\\n            <tr>\\n              <td>num</td>\\n              <td>Number</td>\\n              <td>The number of items expected in the expression. Use whole numbers.</td>\\n            </tr>\\n            <tr>\\n              <td>message</td>\\n              <td>String</td>\\n              <td><i>optional</i> The message to output in case of test failure.</td>\\n            </tr>\\n          </table>\\n          <p></p>\\n        </td></tr>\\n        <tr><td><p><b>Code Sample:</b><br></p>\\n<p>In the <code>expect</code> style:</p>\\n<p><pre><code class=\\\"language-javascript\\\">//Asserts that there are exactly 3 images.\\nexpect($images).to.have.elementsEqual(3);</code></pre></p>\\n<p><pre><code class=\\\"language-javascript\\\">// Asserts that there is one title.\\n// If the assertion fails, output the custom message.\\nexpect($title).to.have.elementsEqual(1, 'Length should be 1.');</code></pre></p>\\n<p>In the <code>assert</code> style:</p>\\n<p><pre><code class=\\\"language-javascript\\\">// Asserts that there are exactly 3 images.\\nassert.elementsEqual($images, 3);</code></pre></p>\\n<p><pre><code class=\\\"language-javascript\\\">// Asserts that there is one title.\\n// If the assertion fails, output the custom message.\\nassert.elementsEqual($title, 1, 'Length should be 1.');</code></pre></p>\\n        </td></tr>\\n\\t\\t\\t</table>\\n\\n\\t\\t\\t<p><hr width=\\\"90%\\\"></p>\\n\\n\\t\\t</td>\\n\\t</tr>\\n\\n\\t<tr>\\n    <td>\\n      <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n        <tr><td><b><h3><a id=\\\"elementsNotEqual\\\">elementsNotEqual(exp, num, [message])</a></h3></b></td></tr>\\n        <tr><td></td></tr>\\n        <tr><td>\\n          <p></p>\\nThe <code>elementsNotEqual</code> assertion checks whether the element does not appear <code>num</code> number of times. Use this to check if you expect exactly that number of elements to appear on the page to see if the check fails.\\n\\t\\t\\t\\t\\t<p></p>\\n\\t\\t\\t\\t</td></tr>\\n        <tr><td>\\n          <p></p>\\n          <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <caption><b>Input</b><br></caption>\\n            <tr bgcolor=\\\"#C0C0C0\\\">\\n              <th>Parameter Name</th>\\n              <th>Parameter Type</th>\\n              <th>Description</th>\\n            </tr>\\n            <tr>\\n              <td>exp</td>\\n              <td>Zepto/JQuery Object</td>\\n              <td>The expression to run the assertion on.</td>\\n            </tr>\\n            <tr>\\n              <td>num</td>\\n              <td>Number</td>\\n              <td>The number of items expected in the expression. Use whole numbers.</td>\\n            </tr>\\n            <tr>\\n              <td>message</td>\\n              <td>String</td>\\n              <td><i>optional</i> The message to output in case of test failure.</td>\\n            </tr>\\n          </table>\\n          <p></p>\\n        </td></tr>\\n        <tr><td><p><b>Code Sample:</b><br></p>\\n<p>In the <code>expect</code> style:</p>\\n<p><pre><code class=\\\"language-javascript\\\">expect($images).to.have.elementsNotEqual(3);</code></pre></p>\\n<p>In the <code>assert</code> style:</p>\\n<p><pre><code class=\\\"language-javascript\\\">assert.elementsNotEqual($images, 3);</code></pre></p>\\n        </td></tr>\\n\\t\\t\\t</table>\\n\\n\\t\\t\\t<p><hr width=\\\"90%\\\"></p>\\n\\n\\t\\t</td>\\n\\t</tr>\\n\\n\\t<tr>\\n    <td>\\n      <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n        <tr><td><b><h3><a id=\\\"elementsNotPresent\\\">elementsNotPresent(exp, [message])</a></h3></b></td></tr>\\n        <tr><td></td></tr>\\n        <tr><td>\\n          <p></p>\\nThe <code>elementsNotPresent</code> assertion checks that the selected element is not present in the current context. Use this to check that undesired elements do not appear on the current page.\\n\\t\\t\\t\\t\\t<p></p>\\n\\t\\t\\t\\t</td></tr>\\n        <tr><td>\\n          <p></p>\\n          <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <caption><b>Input</b><br></caption>\\n            <tr bgcolor=\\\"#C0C0C0\\\">\\n              <th>Parameter Name</th>\\n              <th>Parameter Type</th>\\n              <th>Description</th>\\n            </tr>\\n            <tr>\\n              <td>exp</td>\\n              <td>Zepto/JQuery Object</td>\\n              <td>The expression to run the assertion on.</td>\\n            </tr>\\n            <tr>\\n              <td>message</td>\\n              <td>String</td>\\n              <td><i>optional</i> The message to output in case of test failure.</td>\\n            </tr>\\n          </table>\\n          <p></p>\\n        </td></tr>\\n        <tr><td><p><b>Code Sample:</b><br></p>\\n<p>In the <code>expect</code> style:</p>\\n<p><pre><code class=\\\"language-javascript\\\">expect($images).to.have.elementsNotPresent();</code></pre></p>\\n<p>In the <code>assert</code> style:</p>\\n<p><pre><code class=\\\"language-javascript\\\">assert.elementsNotPresent($images);</code></pre></p>\\n        </td></tr>\\n\\t\\t\\t</table>\\n\\n\\t\\t\\t<p><hr width=\\\"90%\\\"></p>\\n\\n\\t\\t</td>\\n\\t</tr>\\n\\n\\n\\n\\t<tr>\\n    <td>\\n      <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n        <tr><td><b><h3><a id=\\\"elementsPresent\\\">elementsPresent(exp, [num], [message])</a></h3></b></td></tr>\\n        <tr><td></td></tr>\\n        <tr><td>\\n          <p></p>\\nThe <code>elementsPresent</code> assertion checks that the particular element is present in the current page context. If a <code>num</code> number is specified, the elements must be present more than <code>num</code> number of times.\\n\\t\\t\\t\\t\\t<p></p>\\n\\t\\t\\t\\t</td></tr>\\n        <tr><td>\\n          <p></p>\\n          <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <caption><b>Input</b><br></caption>\\n            <tr bgcolor=\\\"#C0C0C0\\\">\\n              <th>Parameter Name</th>\\n              <th>Parameter Type</th>\\n              <th>Description</th>\\n            </tr>\\n            <tr>\\n              <td>exp</td>\\n              <td>Zepto/JQuery Object</td>\\n              <td>The expression to run the assertion on.</td>\\n            </tr>\\n            <tr>\\n              <td>num</td>\\n              <td>Number</td>\\n              <td><i>optional</i> The number of items that are expected in the expression +1. Use whole numbers.</td>\\n            </tr>\\n            <tr>\\n              <td>message</td>\\n              <td>String</td>\\n              <td><i>optional</i> The message to output in case of test failure.</td>\\n            </tr>\\n          </table>\\n          <p></p>\\n        </td></tr>\\n        <tr><td><p><b>Code Sample:</b><br></p>\\n<p>In the <code>expect</code> style:</p>\\n<p><pre><code class=\\\"language-javascript\\\">expect($emailForm).to.have.elementsPresent();</code></pre></p>\\n<p><pre><code class=\\\"language-javascript\\\">// Asserts that there are 4 or more such elements. \\nexpect($links).to.have.elementsPresent(3);</code></pre></p>\\n<p>In the <code>assert</code> style:</p>\\n<p><pre><code class=\\\"language-javascript\\\">assert.elementsPresent($emailForm);</code></pre></p>\\n<p><pre><code class=\\\"language-javascript\\\">// Asserts that there are 4 or more such elements.\\nassert.elementsPresent($links, 3);</code></pre></p>\\n        </td></tr>\\n\\t\\t\\t</table>\\n\\n\\t\\t\\t<p><hr width=\\\"90%\\\"></p>\\n\\n\\t\\t</td>\\n\\t</tr>\\n\\n\\t<tr>\\n    <td>\\n      <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n        <tr><td><b><h3><a id=\\\"hasItems\\\">hasItems(exp)</a></h3></b></td></tr>\\n        <tr><td></td></tr>\\n        <tr><td>\\n          <p></p>\\nThe <code>hasItems</code> assertion checks that the collection given by the <code>exp</code> parameter is not empty, or that the collection has a <code>length</code> greater than 1.\\n\\t\\t\\t\\t\\t<p></p>\\n\\t\\t\\t\\t</td></tr>\\n        <tr><td>\\n          <p></p>\\n          <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <caption><b>Input</b><br></caption>\\n            <tr bgcolor=\\\"#C0C0C0\\\">\\n              <th>Parameter Name</th>\\n              <th>Parameter Type</th>\\n              <th>Description</th>\\n            </tr>\\n            <tr>\\n              <td>exp</td>\\n              <td>Collection</td>\\n              <td>The collection (Array, List, etc.) on which to run the assertion.</td>\\n            </tr>\\n          </table>\\n          <p></p>\\n        </td></tr>\\n        <tr><td><p><b>Code Sample:</b><br></p>\\n<p>In the <code>expect</code> style:</p>\\n<p><pre><code class=\\\"language-javascript\\\">// Asserts that this collection has at least 1 item in it\\nexpect(list).to.not.be.empty();</code></pre></p>\\n<p>In the <code>assert</code> style:</p>\\n<p><pre><code class=\\\"language-javascript\\\">// Asserts that this collection has at least 1 item in it\\nassert.hasItems(list);</code></pre></p>\\n        </td></tr>\\n\\t\\t\\t</table>\\n\\n\\t\\t\\t<p><hr width=\\\"90%\\\"></p>\\n\\n\\t\\t</td>\\n\\t</tr>\\n\\n\\t<tr>\\n    <td>\\n      <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n        <tr><td><b><h3><a id=\\\"properties\\\">properties(exp, key1, key2, ...)</a></h3></b></td></tr>\\n        <tr><td></td></tr>\\n        <tr><td>\\n          <p></p>\\nThe <code>properties</code> assertion checks that the <code>exp</code> object contains the <code>key1</code>, <code>key2, ...</code> keys.\\n\\t\\t\\t\\t\\t<p></p>\\n\\t\\t\\t\\t</td></tr>\\n        <tr><td>\\n          <p></p>\\n          <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <caption><b>Input</b><br></caption>\\n            <tr bgcolor=\\\"#C0C0C0\\\">\\n              <th>Parameter Name</th>\\n              <th>Parameter Type</th>\\n              <th>Description</th>\\n            </tr>\\n            <tr>\\n              <td>exp</td>\\n              <td>Object</td>\\n              <td>The object on which to run the assertion.</td>\\n            </tr>\\n            <tr>\\n              <td>key1</td>\\n              <td>String</td>\\n              <td>The property to find in the object.</td>\\n            </tr>\\n            <tr>\\n              <td>key2</td>\\n              <td>String</td>\\n              <td>The property to find in the object.</td>\\n            </tr>\\n          </table>\\n          <p></p>\\n        </td></tr>\\n        <tr><td><p><b>Code Sample:</b><br></p>\\n<p>In the <code>expect</code> style:</p>\\n<p><pre><code class=\\\"language-javascript\\\">// Asserts that the apps object has the keys 'apple' and 'google'\\nexpect(apps).to.have.properties('apple', 'google');</code></pre></p>\\n<p>In the <code>assert</code> style:</p>\\n<p><pre><code class=\\\"language-javascript\\\">// Asserts that the apps object has the keys 'apple' and 'google'\\nassert.properties(apps, 'apple', 'google');</code></pre></p>\\n        </td></tr>\\n\\t\\t\\t</table>\\n\\t\\t</td>\\n\\t</tr>\\n\\n</table>\\n<!-- Ends the Custom Assertions table -->\"\n}\n[/block]",
        "excerpt": "Browse the custom Chai assertions that were created specifically for integration tests of Mobify sites.",
        "slug": "custom-chai-assertions-api",
        "type": "basic",
        "title": "Custom Chai Assertions API"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ceb",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "5527fc13be8cd72300a2b4cf",
          "55492090ee219b0d00174309"
        ],
        "_id": "5568d525d33aad0d00ec8d0e",
        "createdAt": "2015-03-25T18:36:09.504Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 5,
        "body": "Follow these steps to access [Mobify's custom Chai](https://github.com/mobify/chai-custom-assertions) assertions for your tests if your project's Adaptive.js version is before 1.6.0.\n\n***\n\n1\\. In an editor app, from your root project folder, open the `package.json` file.\n\n2\\. In the `package.json` file, in the `dependencies` block, add the `mobify-chai-assertions` line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"...\\n\\\"mobify-chai-assertions\\\": \\\"1.0.2\\\",\\n...\",\n      \"language\": \"json\"\n    }\n  ]\n}\n[/block]\n  Save the file and close it.\n\n3\\. In your editor, from the `tests/runner` folder, open the `config.js` test configuration file.\n\n4\\. In the `config.js` file, in the `paths` block, add the `chaiPlugin` line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"...\\n'chaiPlugin': \\\"node_modules/mobify-chai-assertions',\\n...\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n  Save the file and close it.\n\n5\\. In your editor, from the `tests/runner/` folder, open the `testRunner.js` test runner file.\n\n6\\. Add the missing lines for Chai assertions to the file.\n\nWhen you are finished, your file looks like this `testRunner.js` file listing:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"require(['config'], function(){\\n  require(['require],\\n           'chai',\\n           'chaiPlugin/assertions',\\n           'mocha'],\\n\\tfunction(require, chai, customAssertions, mocha){\\n    \\n    var tests = [\\n      'tests/integration/homeTest',\\n      'tests/integration/categoryTest'\\n    ];\\n    \\n    require(tests, function(){\\n      global.assert = chai.assert;\\n      global.expect = chai.expect;\\n      \\n      chai.use(customAssertions);\\n      \\n      if(window.mochaPhantomJS){\\n        return window.mochaPhantomJS.run();\\n      }\\n      mocha.run();\\n    });\\n  });\\n});\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n\n7\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n8\\. To change directories to your root project folder, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n9\\. To download and to install all dependencies correctly, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"npm install\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n10\\. To push to Git the changes to the last 3 files that you edited, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"git push\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Because `node_modules` is not pushed to Git by default, everyone who pulls these changes from your repository also needs to run the `npm install` command.\"\n}\n[/block]",
        "excerpt": "Custom Chai Assertions are automatically included for Adaptive.js 1.2.0 and onward.",
        "slug": "add-custom-chai-assertions-to-your-adaptivejs-proj",
        "type": "basic",
        "title": "Add Custom Chai Assertions to your Adaptive.js Project"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ceb",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d0c",
        "createdAt": "2015-03-25T18:25:40.696Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": true,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 6,
        "body": "[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Grunt Test Commands\",\n  \"body\": \"Read about the Grunt commands used to run tests in our [Integration Testing Overview](doc:integration-testing-overview).\"\n}\n[/block]\n***\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Test as you Develop\",\n  \"body\": \"Write tests as views are developed. Write tests once your context properties are defined to ensure that the desktop page is transformed correctly to the mobile version.\"\n}\n[/block]\n***\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Run Tests Often\",\n  \"body\": \"Integration tests are designed to run quickly which encourages you to run them often.\\nAt minimum, run tests before you build a bundle.\"\n}\n[/block]\n***\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: One Assertion Per Test\",\n  \"body\": \"Limit the number of assertions to 1 per test, or to 1 property per test.\"\n}\n[/block]\nThe benefit of this is that the test executes faster in your browser and is easier to debug. It is also neater. If the test fails, you know exactly what it failed on.\n\n***\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Use the Expect Library\",\n  \"body\": \"The [`expect` library](http://chaijs.com/api/bdd/) uses language chains that make assertions more readable. For example, `expect(title).to.be.a(‘string’)` is a self-explanatory command.\"\n}\n[/block]\nTests written with `expect` and `assert` achieve similar effects. For an assertion written with `assert`, there is generally an equivalent assertion written in `expect` and vice versa. \nBoth take an arbitrary debug message that is output when the assertion fails. \n\n### Assert vs. Expect: Check Equality\n\nWith `assert`:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"'context logo anchor href': function($, context){\\n  \\tvar logo = context.header.logo;\\n  \\n  \\tassert.equal(logo.attrs.href, 'http://www.jtv.com/homepage');\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nThe `assert` style command takes two arguments, whose order is not necessarily intuitive.\n\nWith `expect`:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"'context logo anchor href': function($, context){\\n  var logo = context.header.logo;\\n  \\n  expect(logo.attrs.href).to.equal('http://www.jtv.com/homepage');\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nThe `expect` style command also takes the same two arguments. However, the linguistic structure of the command makes the order of the arguments more obvious. The test is also clearly labeled as an equality test.\n\n### Assert vs. Expect: Check Type\n\nWith `assert`:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"'context.footerContact is an object': function($, context){\\n  assert.isObject(context.footer.footerContact);\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nWith `expect`:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"'context.footerContact is an object': function($, context){\\n  expect(context.footer.footerContact).to.be.a('object');\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n### Assert vs. Expect: Check for Elements Present\n\nWith `assert`:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"'shippingBanner returns Zepto object': function($, context){\\n  assert.elementsPresent(context.header.shippingBanner);\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nWith `expect`:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"'shippingBanner returns Zepto object': function($, context){\\n  expect(context.header.shippingBanner).to.have.elementsPresent();\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n### Assert vs. Expect: Check Properties\n\nWith `assert`:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"'context contains expected properties': function($, context){\\n  assert.property(context, 'content');\\n  assert.property(context, 'title');\\n  assert.property(context, 'intro');\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nThe `assert` style command tests each property of the context in a separate command per each property.\n\nWith `expect`:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"'context contains expected properties': function($, context){\\n  expect(context).to.have.properties('content', 'title', 'intro');\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nThe `expect` style command takes in all of the properties as a list.\n\n### Assert vs. Expect: Check Property Value\n\nWith `assert`:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"'context ERV Price returns a string': function($, context) {\\n    var priceComparison = context.priceComparison;\\n    assert.property(priceComparison, 'erv');\\n    assert.equal(priceComparison.erv, 'ERV: $336.00');\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nThe `assert` commands tests separately for the property and then for the property's equality to a particular value.\n\nWith `expect`:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"'context ERV Price returns a string': function($, context) {\\n    var priceComparison = context.priceComparison;\\n    expect(priceComparison).to.have.property('erv', 'ERV: $336.00');\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nThe `expect` style command tests for the property and the property's value in one line.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Custom Chai Assertions\",\n  \"body\": \"Refer to our [Custom Chai Assertions API](doc:custom-chai-assertions-api) for custom commands in the `expect` style for testing Mobify sites.\"\n}\n[/block]\n***\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Use Descriptive Test Names\",\n  \"body\": \"The test name outputs to the console and makes it easy which component or property fails.\"\n}\n[/block]\nAn example of a descriptive test name is `context.shipping property contains the expected string`.\n\n***\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Use Descriptive Variables\",\n  \"body\": \"Choose variable names that directly describe the components that they represent.\"\n}\n[/block]\nFor example, the `var menuItem = context.menuItem;` assignment clearly assigns the menu item to a variable by the same name.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Use the $ Prefix\",\n  \"body\": \"By convention, preface variables that represent a Zepto or a jQuery object with a `$` character.\"\n}\n[/block]\nFor example:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"var $body = $('body');\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n***\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Write Tests that are Sufficient\",\n  \"body\": \"Use your own discretion. Test for expected types, values, and lengths of your context properties.\"\n}\n[/block]\nExamples of expected types: Object, String, Array, etc.\nTest for equality to expected value. With the expected value, test for equality, greater or less than.\n\n***\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Test with Multiple Fixtures\",\n  \"body\": \"Test multiple page conditions with multiple fixtures in one test script.\"\n}\n[/block]\n***\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Test Global Site Features in a Separate Test Files\",\n  \"body\": \"Global includes, such as a header and a footer, have their own test files.\"\n}\n[/block]\nIf states change on different templates (like a different header for the checkout page), create a new block of tests for that file. Use fixtures that represent different states.",
        "excerpt": "",
        "slug": "integration-testing-best-practices",
        "type": "basic",
        "title": "Integration Testing Best Practices"
      }
    ],
    "project": "54da9ecd44b1090d00072b60",
    "reference": false,
    "slug": "integration-testing",
    "title": "Integration Testing",
    "version": "5568d523d33aad0d00ec8ce4"
  },
  {
    "version": "5568d523d33aad0d00ec8ce4",
    "project": "54da9ecd44b1090d00072b60",
    "pages": [],
    "_id": "5568d524d33aad0d00ec8cf0",
    "reference": false,
    "createdAt": "2015-04-21T00:28:10.222Z",
    "from_sync": false,
    "order": 11,
    "slug": "system-testing",
    "title": "System Testing",
    "__v": 0
  },
  {
    "__v": 1,
    "_id": "5568d524d33aad0d00ec8ce5",
    "createdAt": "2015-02-11T00:14:06.659Z",
    "from_sync": false,
    "order": 12,
    "pages": [
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce5",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "5564b8c43b87582b003ab9c1"
        ],
        "_id": "5568d525d33aad0d00ec8d11",
        "createdAt": "2015-03-18T22:33:28.383Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 0,
        "body": "Place special emphasis on the verification of the conversion flow. Even a minor\nchange to your site bundle is a risk to breaking this most vital flow. Ensure\nthat in all circumstances, your site visitors are able to go through the checkout\nsuccessfully.\n\n***\n\n## A. Verify the Conversion Flow\n\n* Verify that conversion flows (the checkout process or other campaigns) are\nworking correctly on mobile.\n\nA full conversion workflow for a standard e-commerce site flows somewhat like\nthis:\n\n`Homepage → \"Category List\" page → \"Product\" page → \"Add to Cart\" action and\nor page → possible \"Sign In\" flow → Cart → Checkout`\n\nIf you have test data on hand, complete the purchase.\n\nIf you do not have test data, use invalid credit card information and submit\nuntil you receive a **\"Credit Card Declined\"** error.\n\n***\n\n## B. Test the Bundle Functionality on an External Network\n\n* Verify that the bundle you are about to launch functions correctly on an\nexternal network.\n\nUse a proxy service, cell data (3G, LTE) connection, or any type of connection\nthat does not use a local internal IP address.\n\n***\n\n## C. Verify the Analytics\n\n* Verify that Mobify analytics are firing correctly for the configured pages and\nthat the appropriate information is being collected.\n\n* Verify that the pre-existing customers analytics are still firing correctly.\nThese analytics should be included on the appropriate Mobified pages.\n\n* Verify that all tracking pixels or additional scripts are included.",
        "excerpt": "Verify these areas before you publish your new bundle.",
        "slug": "pre-launch-checklist",
        "type": "basic",
        "title": "Pre-Launch Checklist"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce5",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d10",
        "createdAt": "2015-02-12T22:19:55.461Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 1,
        "body": "You can preview your local Adaptive.js project on a device to:\n\n- Test that your site works on real-world devices.\n- Fix bugs that only exist on certain devices.\n- Verify device-specific bug fixes before you create a bundle.\n\n***\n\n\n# 1. Start the Adaptive.js Server\n\n1\\. Open a new Terminal (Mac) or Command Prompt (Windows).\n\n2\\. To change to your project directory, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"cd path/to/project/directory\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n3\\. To start the local Adaptive.js server, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt preview\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nThis builds your project and starts an Adaptive.js server at default ports 8080 for HTTP and 8443 for HTTPS.\n\nTo change the HTTP and HTTPS port numbers, enter the following command with your own custom port numbers:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"grunt preview --port httpPortNumber --https-port httpsPortNumber\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nEnsure that you replace the `httpPortNumber` and `httpsPortNumber` arguments with numbers.\n\nYour project is automatically compiled as you make changes to it.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Command Line\",\n  \"body\": \"Leave this command prompt open during the next steps. It is running the preview server that is needed by the browser.\"\n}\n[/block]\n\n***\n\n# 2. Identify Your Computer's IP Address\n\n**This step differs for Windows and for Mac.**  Follow the instructions for your computer's operating system.\n\n* In Command Prompt (Windows), enter the command:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"ipconfig\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n* In Terminal (Mac), enter the command:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"ifconfig\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nLook for the `inet` value to determine your computer's IP address.\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://www.filepicker.io/api/file/5Q0min2TRpyMF5yGcum0\",\n        \"ifconfig-ani.gif\",\n        \"603\",\n        \"439\",\n        \"#47a880\",\n        \"\"\n      ],\n      \"caption\": \"Use the ifconfig command to find your computer's IP address.\"\n    }\n  ]\n}\n[/block]\n***\n\n# 3. Preview the Site on a Device\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Device and Computer Network\",\n  \"body\": \"Ensure that your device and your computer are connected to the same network.\"\n}\n[/block]\n1\\. On your device, open your device web browser.\n\n2\\. Go to [Mobify Preview at http://preview.mobify.com](http://preview.mobify.com).\n\n3\\. On the Mobify Preview page, set the Site URL and Bundle Location form fields to the following values:\n\n* Site URL: **http://www.YourSiteURLHere.com**\n* Bundle Location: **http://yourIPAddress:8080/adaptive.js**\n\n  Ensure that you replace the `yourIPAddress` part of the URL with the IP address that you found in the previous step.\n\n4\\. Click the **\"Preview\"** link.\n\nThis sets cookies in your browser to preview your Adaptive.js site using your local server.\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"If you clear the browser cache or cookies, you need to repeat these steps.\",\n  \"title\": \"Browser Cache\"\n}\n[/block]\n\n[block:html]\n{\n  \"html\": \"<div class=\\\"c-aside\\\">\\n    <p><b>If you need to preview to an <code>https</code> page</b></p>\\n    <ul>\\n        <li>On your device browser, go to https://your.IP.Address:8080/adaptive.js</li>\\n        <li>Accept any certificates or enable any scripts, if necessary.\\n        \\t<ul>\\n       \\t\\t<li>You now see the source code for your bundle.</li>\\n        \\t</ul>\\n        </li>\\n        <li>In the same browser window, go to <a href=\\\"http://preview.mobify.com\\\">http://preview.mobify.com</a></li>\\n        <li>Set the Bundle Location form field to the following value with your own IP address:\\n        \\t<ul>\\n        \\t<li>http<b>s</b>://your.IP.address:<b>8443</b>/adaptive.js</li>\\n        \\t</ul>\\n        </li>\\n        <li>Click \\\"Preview\\\".</li>\\n    </ul>\\n</div>\"\n}\n[/block]\n***\n\nNow as you make changes to your local project, you also see these changes reflected when you refresh your device browser.\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"title\": \"Troubleshooting\",\n  \"body\": \"Read our [Preview Troubleshooting](doc:preview-troubleshooting) guide if you have trouble with this tutorial.\"\n}\n[/block]",
        "excerpt": "Preview your local Adaptive.js project on a mobile device.",
        "slug": "preview-on-device",
        "type": "basic",
        "title": "Preview your Project on a Device"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce5",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d12",
        "createdAt": "2015-03-18T22:40:38.873Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 1,
        "body": "Once you publish a bundle, the new bundle needs to propagate through our\nContent Delivery Network (CDN). Verify that the newly launched bundle with\neither the iOS Simulator or with a physical device.\n\n***\n\n## 1. Verify on the iOS Simulator\n\nFollow these steps to verify your bundle is correct on the iOS Simulator. If\nyou have iOS Simulator already installed on your Mac, skip the installation\nsteps.\n\n***\n\n### A. Download XCode\n\n1\\. On your Mac, click on the App Store icon in your dock.\n\n2\\. Type **“Xcode”** in your search bar to find Xcode.\n\n3\\. Follow the installation instructions.\n\n***\n\n### B. Install the iOS Simulator\n\n1\\. On your Mac, open Xcode.\n\n2\\. On the Xcode menu bar, navigate to the **\"Xcode\"** menu.\n\n3\\. Select the **\"Preferences\"** menu option.\n\n4\\. In the popup window, select the **\"Downloads\"** button.\n\n5\\. In the **\"Components\"** tab, select the iOS Simulator versions which you want to\ninstall.\n\n6\\. Click the **“Install”** button.\n\n***\n\n### C. Run the iOS Simulator\n\n1\\. On the Xcode menu bar, select the **\"Xcode\"** menu.\n\n2\\. Hover over the **\"Open Developer Tool\"** sub-menu.\n\n3\\. Click the **\"iOS Simulator\"** menu option.\n\n***\n\n### D. Launch Safari in the iOS Simulator\n\n* In the simulator, launch the Safari app.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Leave the iOS Simulator running in the background: you need it in the next step.\"\n}\n[/block]\n***\n\n### E. Open the Web Inspector in Developer Tools\n\n1\\. On your own local Mac, launch the Safari browser.\n\nYou now have two versions of Safari open: one inside the simulator, the other on your desktop computer.\n\n2\\. On your desktop Safari browser menu bar, select the **“Safari”** menu.\n\n3\\. Select the **\"Preferences\"** menu option.\n\n4\\. In the **\"Preferences\"** popup window, select the **\"Advanced\"** tab.\n\n5\\. Ensure that the **\"Show Develop menu in menu bar\"** toggle is checked.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Enable the Safari Develop Menu\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/kl7uWXesQwiQ3rwbpzrO\",\n        \"enable-safari-develop-menu-ani.gif\",\n        \"414\",\n        \"302\",\n        \"#5384be\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n6\\. In your desktop Safari browser, select the **\"Develop\"** menu.\n\n7\\. Hover over the **\"iOS Simulator\"** menu item, and select the **\"blank\"** menu option.\n\nThis opens the **\"Web Inspector\"** developer tools window for the iOS Simulator.\n\n8\\. In the **\"Developer Tools\"** window, select the **\"Timelines\"** icon.\n\n***\n\n### F. Load your Mobile Site on the iOS Simulator\n\n1\\. Now, switch to your iOS Simulator Safari browser.\n\n2\\. In your simulator Safari browser, go to your mobile site.\n\n***\n\n### G. Inspect the Bundle Version\n\n1\\. Switch back to the **\"Developer Tools\"** window on your local computer.\n\n2\\. In the **\"Timelines\"** option, under the **\"Timeline Events\"** section, select the\n`adaptive.min.js` event.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"adaptive.min.js\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/kTTiDGUqQXSrTWyncqGj\",\n        \"img1.png\",\n        \"160\",\n        \"507\",\n        \"\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n3\\. In the **\"Developer Tools\"** window, select the **\"Resource\"** icon.\n\nThis opens the **\"Resource\"** side menu bar.\n\n4\\. In the **\"Resource\"** side menu, locate the **“Request Headers”** section.\n\n5\\. In the **\"Request Headers\"** section, locate the `x-amz-meta-bundle` header.\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://www.filepicker.io/api/file/YWr9WMiKQwaxfX0sf6gC\",\n        \"img2.png\",\n        \"554\",\n        \"437\",\n        \"#3d4b6b\",\n        \"\"\n      ],\n      \"caption\": \"Bundle Number\"\n    }\n  ]\n}\n[/block]\n6\\. Ensure that the bundle number is the one that you expect.\n\n***\n\n## 2. Verify on an iPhone\n\nFollow a similar process for bundle verification on an iPhone. If you do not\nhave XCode installed on your Mac, follow the first two download and installation steps\nof the previous section.\n\n***\n\n### A. Connect your iPhone to your Mac with a USB cable.\n\n***\n\n### B. Enable Safari Web Inspector on your iPhone\n\n1\\. On your iPhone, launch the **\"Settings\"** app.\n\n2\\. Select the **\"Safari\"** menu.\n\n 3\\. In the **\"Safari\"** menu, navigate to the **\"Advanced\"** menu option.\n\n 4\\. In the **\"Advanced\"** settings, turn on the **\"Web Inspector\"** toggle.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Enable Safari Web Inspector\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/3WAn36qRmyhIaEGjZ3VC\",\n        \"enable-safari-web-inspector-ani.gif\",\n        \"370\",\n        \"683\",\n        \"#2a9ce7\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n***\n\n### C. Launch Safari on your iPhone\n\n* On your iPhone, launch the Safari app.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Leave Safari running on your iPhone: you need it in the next step.\"\n}\n[/block]\n***\n\n### D. Open the Web Inspector in Developer Tools\n\n1\\. On your own local Mac, launch the Safari browser.\n\nYou now have two versions of Safari open: one on your iPhone, the other on your desktop computer.\n\n2\\. On your desktop Safari browser menu bar, select the **“Safari”** menu.\n\n3\\. Select the **\"Preferences\"** menu option.\n\n4\\. In the **\"Preferences\"** popup window, select the **\"Advanced\"** tab.\n\n5\\. Ensure that the **\"Show Develop menu in menu bar\"** toggle is checked.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Enable the Safari Develop Menu\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/zvJ7qa1JTilZ1ROhUo7A\",\n        \"enable-safari-develop-menu-ani.gif\",\n        \"414\",\n        \"302\",\n        \"#5384be\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n6\\. In your desktop Safari browser, select the **\"Develop\"** menu.\n\n7\\. Hover over the **\"iPhoneName\"** menu item, and select the menu option that has the\nname of the page that is currently open on your iPhone Safari browser.\n\nThis opens the **\"Web Inspector\"** developer tools window for the iPhone.\n\n8\\. In the **\"Developer Tools\"** window, select the **\"Timelines\"** icon.\n\n***\n\n### E. Load Your Mobile Site on Your iPhone\n\n1\\. Now, switch to your iPhone Safari browser.\n\n2\\. In your iPhone Safari browser, navigate to your mobile site.\n\nIf you already have your website open, re-load the page.\n\n***\n\n### F. Inspect the Mobile Site Bundle Version\n\n1\\. Switch back to the **\"Developer Tools\"** window on your local computer.\n\n2\\. In the **\"Timelines\"** option, under the **\"Timeline Events\"** section, select the\n`adaptive.min.js` event.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"adaptive.min.js\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/wr26q97kTfWTgtgNN8Ev\",\n        \"img1.png\",\n        \"160\",\n        \"507\",\n        \"#2879c9\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n3\\. In the **\"Developer Tools\"** window, select the **\"Resource\"** icon.\n\nThis opens the **\"Resource\"** side menu bar if it is not already open.\n\n4\\. In the **\"Resource\"** side menu, locate the **“Request Headers”** section.\n\n5\\. In the **\"Request Headers\"** section, locate the `x-amz-meta-bundle` header.\n[block:image]\n{\n  \"images\": [\n    {\n      \"caption\": \"Bundle Number\",\n      \"image\": [\n        \"https://www.filepicker.io/api/file/erux9Q3LSc2hQNyTmr93\",\n        \"img2.png\",\n        \"554\",\n        \"437\",\n        \"#3d4b6b\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\nEnsure that the bundle number is the one that you expect.\n\n***\n\n## 3. Smoke Test the Bundle\n\nConduct a smoke test once you have properly verified your bundle.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"A smoke test is a quick test that the major functions of your mobile site work.\",\n  \"title\": \"Smoke Test\"\n}\n[/block]\nThe origin of this term dates back to old hardware tests. In those days, if you turned on a piece of hardware for the first time and it did not catch on fire, your test was a success!\n\nThe goal of the smoke test is to ensure that all major pieces of your mobile\nsite function in the live environment.\n\n These major pieces include:\n\n * sign up\n * sign in\n * search\n * add an item to the cart\n * checkout\n\n***\n\n## 4. Verify the Conversion Flow\n\n* Verify that conversion flows (the checkout process or other campaigns) are\nworking correctly on mobile.\n\nA full conversion workflow for a standard e-commerce site flows somewhat like this:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"Homepage → \\\"Category List\\\" page → \\\"Product\\\" page → \\n\\\"Add to Cart\\\" action and or page → possible \\\"Log In\\\" flow → Cart → Checkout\",\n      \"language\": \"text\"\n    }\n  ]\n}\n[/block]\n* If you have test data on hand, complete the purchase.\n\n* If you do not have test data, use invalid credit card information and submit\nuntil you receive a **\"Credit Card Declined\"** error.\n\n***\n\n## 5. Verify the Analytics\n\n* Verify that Mobify analytics are firing correctly for the configured pages and\nthat the appropriate information is being collected.\n\n* Verify that the pre-existing customer analytics are still firing correctly.\nThese analytics should be included on the appropriate Mobified pages.\n\n* Verify that all tracking pixels or additional scripts are included.",
        "excerpt": "You developed your site. You tested it. You launched it. Now ensure that the\nproject that you devoted so much work to is the one that your site visitor\nactually sees!",
        "slug": "post-launch-checklist",
        "type": "basic",
        "title": "Verify your Post-Launch Bundle"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce5",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d13",
        "createdAt": "2015-03-19T18:09:49.430Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 2,
        "body": "## A. Identify the Support Scope\n\nAs a best practice, focus your scope of support on the most common devices on\niOS and Android. On each of your devices, plan to support the most common\noperating system versions and browser versions.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Learn our recommended [Device Testing Best Practices](doc:device-testing-best-practices).\",\n  \"title\": \"Best Practices\"\n}\n[/block]\nCheck your analytics to find which devices your visitors use the most often to\naccess your site.\n\n***\n\n### a. Devices\n\nTest your site on two devices with widely different screen sizes.\n\nFor example, test on the Galaxy Note phablet and on the Galaxy S. Even though the two\ndevices run the same OS version, each device displays the same site differently.\n\nTest your site on an older device that has recently been upgraded to a recent\nOS version.  For example, test on an iPhone 4 that runs iOS 7.1+, or on a\nSamsung galaxy S/S2 with its OS updated to Android 4.3.\n\n***\n\n### b. Operating System Versions\n\nLegacy operating systems require extra attention. It is difficult to run\nMobify's lastest components on certain operating systems such as Android 2.3.x\nor iOS 6.x.\n\nIf your site supports these operating systems, prepare to invest extra time\ninto the QA process.\n\n***\n\n### c. Browsers\n\nOn devices that have been updated to Android 4.3 or lower, the native browser\nis the default browser. On Android devices that ship at version 4.3 or higher,\nthe device uses Chrome as the default browser.\n\nTypically, if Chrome is not the default browser on the device, the build does\nnot support Chrome. This was mentioned explicitly above for versions of Android\nbefore 4.3, and it is true for iOS.\n\nDo not test your site on Opera or on Firefox unless the Mobify tag for this site\nexplicitly supports those browsers.",
        "excerpt": "Follow these guidelines to set the scope of support of your mobile site for\nmobile devices, operating systems, and browsers.",
        "slug": "device-specific-test-considerations",
        "type": "basic",
        "title": "Test Considerations for Devices"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce5",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [
          "55413b65bb9e762d00f596c5"
        ],
        "_id": "5568d525d33aad0d00ec8d0f",
        "createdAt": "2015-02-12T21:23:50.430Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 2,
        "body": "[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Go to the [official Nightwatch.js API](http://nightwatchjs.org/api) to browse the original set of commands.\",\n  \"title\": \"Official Nightwatch.js API\"\n}\n[/block]\n\n[block:html]\n{\n  \"html\": \"<table border=\\\"0\\\" width=\\\"80%\\\" align=\\\"center\\\">\\n        <tr bgcolor=\\\"#C0C0C0\\\">\\n            <td><b>Custom Commands</b></td>\\n            <td><b>Custom Assertions</b></td>\\n        </tr>\\n\\n        <tr>\\n            <td></td>\\n            <td></td>\\n        </tr>\\n\\n        <tr>\\n            <td>\\n                <ul>\\n                    <li><a href=\\\"#commands-get\\\">get</a></li>\\n                    <li><a href=\\\"#commands-getMobifyEvaluatedData\\\">getMobifyEvaluatedData</a></li>\\n                    <li><a href=\\\"#commands-log\\\">log</a></li>\\n                    <li><a href=\\\"#commands-navigate\\\">navigate</a></li>\\n                    <li><a href=\\\"#commands-preview\\\">preview</a></li>\\n                    <li><a href=\\\"#commands-trigger\\\">trigger</a></li>\\n                    <li><a href=\\\"#commands-triggerTouch\\\">triggerTouch</a></li>\\n                    <li><a href=\\\"#commands-waitForAjaxCompleted\\\">waitForAjaxCompleted</a></li>\\n                    <li><a href=\\\"#commands-waitForAnimation\\\">waitForAnimation</a></li>\\n                    <li><a href=\\\"#commands-waitForCondition\\\">waitForCondition</a></li>\\n                    <li><a href=\\\"#commands-waitUntilMobified\\\">waitUntilMobified</a></li>\\n                </ul>\\n            </td>\\n\\n            <td>\\n                <ul>\\n                    <li><a href=\\\"#assertions-elementsCount\\\">elementsCount</a></li>\\n                    <li><a href=\\\"#assertions-elementsPresent\\\">elementsPresent</a></li>\\n                    <li><a href=\\\"#assertions-elementsVisible\\\">elementsVisible</a></li>\\n                    <li><a href=\\\"#assertions-templateName\\\">templateName</a></li>\\n                </ul>\\n            </td>\\n\\t</tr>\\n</table>\"\n}\n[/block]\n\n[block:html]\n{\n  \"html\": \"<table border=\\\"0\\\" width=\\\"80%\\\" align=\\\"center\\\">\\n    <tr>\\n        <td><h2><a id=\\\"commands\\\">Custom Commands</a></h2></td>\\n    </tr>\\n\\n    <tr><td>\\n<p>The Mobify custom commands for Nightwatch.js are convenience methods that perform various operations on the page.  A command usually incorporates two or more Selenium protocol actions.</p>\\n    </td></tr>\\n\\n\\n    <tr>\\n        <td>\\n\\n\\n\\n\\n        <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <tr><td>\\n                <b><h3><a id=\\\"commands-get\\\">get(url, callback)</a></h3></b>\\n            </td></tr>\\n            <tr><td></td></tr>\\n            <tr><td>\\n<p></p>\\nThe <code>get</code> command combines the <code>url</code> and <code>waitUntilMobified</code> functions. This command uses the <code>browser.execute</code> function to run code within the client browser. It then waits for the Mobify object to be present on the page.\\n<p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>url</td>\\n                            <td>String</td>\\n                            <td>The URL to load</td>\\n                        </tr>\\n                        <tr>\\n                            <td>callback</td>\\n                            <td>Function</td>\\n                            <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    browser.get('http://www.test.com');\\n};</code></pre>\\n                </td></tr>\\n        </table>\\n        <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <tr><td>\\n                <b><h3><a id=\\\"commands-getMobifyEvaluatedData\\\">getMobifyEvaluatedData(callback)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n<p></p>The <code>getMobifyEvaluatedData</code> command uses the  <code>waitForCondition</code> method to retrieve the <code>Mobify.evaluatedData</code> from the client browser.<p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>callback</td>\\n                            <td>Function</td>\\n                            <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Object</td>\\n                            <td>Returns the client object after <code>waitUntilMobified</code> executes on it with the specified parameters.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    browser.getMobifyEvaluatedData();\\n};</code></pre></p>\\n                </td></tr>\\n            </table>\\n\\n\\n\\n\\n\\n        <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <tr><td><b><h3><a id=\\\"commands-log\\\">log(message, callback)</a></h3></b></td></tr>\\n            <tr><td></td></tr>\\n            <tr><td>\\n                <p></p>\\nThe <code>log</code> command prints a message to the console. Use this command to add messages to test output.\\n                <p></p>\\n            </td></tr>\\n            <tr><td>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Input</b><br></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Parameter Name</th>\\n                        <th>Parameter Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>message</td>\\n                        <td>String</td>\\n                        <td>The message to log on the console.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>callback</td>\\n                        <td>Function</td>\\n                        <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Output</b></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Parameter Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>Object</td>\\n                        <td>Returns the client object after <code>waitForContition</code> runs on it.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n            </td></tr>\\n            <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    browser.log('Testing submitting form');\\n};</code></pre></p>\\n                </td></tr>\\n        </table>\\n\\n        <p><hr width=\\\"90%\\\"></p>\\n\\n\\n\\n        <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <tr><td><b><h3><a id=\\\"commands-navigate\\\">navigate(selector, callback)</a></h3></b></td></tr>\\n            <tr><td></td></tr>\\n            <tr><td>\\n                <p></p>\\nThe <code>navigate</code> command initiates a <code>click</code> command on the supplied selector link, navigates to the URL, and then it initiates the <code>waitUntilMobified</code> function before it continues the chain of tests.\\n                <p></p>\\n            </td></tr>\\n            <tr><td>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Input</b><br></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Parameter Name</th>\\n                        <th>Parameter Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>selector</td>\\n                        <td>String</td>\\n                        <td>The CSS selector to click on to navigate to the new URL.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>callback</td>\\n                        <td>Function</td>\\n                        <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n            </td></tr>\\n            <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    browser.navigate('.myLink');\\n};</code></pre></p>\\n                </td></tr>\\n        </table>\\n\\n        <p><hr width=\\\"90%\\\"></p>\\n\\n\\n\\n        <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <tr><td><b><h3><a id=\\\"commands-preview\\\">preview(url, callback)</a></h3></b></td></tr>\\n            <tr><td></td></tr>\\n            <tr><td>\\n                <p></p>\\nThe <code>preview</code> command uses http://preview.mobify.com to open a website to preview a given bundle. The bundle and the base URL need to be set in the <code>tests/system/site.json</code> file. Note that if the \\\"production\\\" flag is set in <code>site.json</code>, the bundle URL will be ignored. Pass in an optional URL as an argument to this command. Upon completion, <code>waitUntilMobified</code> is called to ensure that the mobile site adaptation is complete.\\n                <p></p>\\n            </td></tr>\\n            <tr><td>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Input</b><br></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Parameter Name</th>\\n                        <th>Parameter Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>url</td>\\n                        <td>String</td>\\n                        <td><i>optional</i> The URL to preview.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>callback</td>\\n                        <td>Function</td>\\n                        <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n            </td></tr>\\n            <tr><td><p><b>Code Samples:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    browser.preview();\\n};</code></pre></p>\\n<p>or with a URL<br>\\n<pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    browser.preview('http://my-awesome-project.com');\\n};</code></pre></p>\\n                </td></tr>\\n        </table>\\n\\n        <p><hr width=\\\"90%\\\"></p>\\n\\n\\n\\n        <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <tr><td><b><h3><a id=\\\"commands-trigger\\\">trigger(selector, type, callback)</a></h3></b></td></tr>\\n            <tr><td></td></tr>\\n            <tr><td>\\n                <p></p>\\nThe <code>trigger</code> command simulates a specified event type on the supplied DOM element specified by the selector parameter.\\n                <p></p>\\n            </td></tr>\\n            <tr><td>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Input</b><br></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Parameter Name</th>\\n                        <th>Parameter Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>selector</td>\\n                        <td>String</td>\\n                        <td>The CSS/Xpath selector to locate the element.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>type</td>\\n                        <td>String</td>\\n                        <td>The specified event type, for example <code>click</code> in the enabled JSON Wire Protocols.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>callback</td>\\n                        <td>Function</td>\\n                        <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n            </td></tr>\\n            <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    browser.trigger('.myLink', click);\\n};</code></pre></p>\\n                </td></tr>\\n        </table>\\n\\n        <p><hr width=\\\"90%\\\"></p>\\n\\n\\n\\n        <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <tr><td><b><h3><a id=\\\"commands-triggerTouch\\\">triggerTouch(selector, type, callback)</a></h3></b></td></tr>\\n            <tr><td></td></tr>\\n            <tr><td>\\n                <p></p>\\nThe <code>triggerTouch</code> command simulates a specified touch type event on the supplied DOM element. Use this command when Selenium's <code>click</code> does not register.\\n                <p></p>\\n            </td></tr>\\n            <tr><td>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Input</b><br></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Parameter Name</th>\\n                        <th>Parameter Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>selector</td>\\n                        <td>String</td>\\n                        <td>The CSS/Xpath selector to locate the element.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>type</td>\\n                        <td>String</td>\\n                        <td>The specified event type, for example <code>click</code> in the enabled JSON Wire Protocols.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>callback</td>\\n                        <td>Function</td>\\n                        <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n            </td></tr>\\n            <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    browser.triggerTouch('.myLink', click);\\n};</code></pre>\\n                    </p>\\n                </td></tr>\\n        </table>\\n\\n        <p><hr width=\\\"90%\\\"></p>\\n\\n\\n\\n        <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <tr><td><b><h3><a id=\\\"commands-waitForAjaxCompleted\\\">waitForAjaxCompleted(callback)</a></h3></b></td></tr>\\n            <tr><td></td></tr>\\n            <tr><td>\\n                <p></p>\\nThe <code>waitForAjaxCompleted</code> command uses the <code>waitForCondition</code> function to execute code within the client browser. The command checks the value of <code>jQuery.active</code> to ensure that the number of active connections is 0.\\n                <p></p>\\n            </td></tr>\\n            <tr><td>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Input</b><br></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Parameter Name</th>\\n                        <th>Parameter Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>callback</td>\\n                        <td>Function</td>\\n                        <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Output</b></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Parameter Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>Object</td>\\n                        <td>Returns the client object.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n            </td></tr>\\n            <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    browser.waitForAjaxCompleted();\\n};</code></pre></p>\\n                </td></tr>\\n        </table>\\n\\n        <p><hr width=\\\"90%\\\"></p>\\n\\n\\n\\n        <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <tr><td><b><h3><a id=\\\"commands-waitForAnimation\\\">waitForAnimation(milliSeconds, callback)</a></h3></b></td></tr>\\n            <tr><td></td></tr>\\n            <tr><td>\\n                <p></p>\\nThe <code>waitForAnimation</code> command suspends the test for the given time in milliseconds while it waits for animation to complete.\\n                <p></p>\\n            </td></tr>\\n            <tr><td>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Input</b><br></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Parameter Name</th>\\n                        <th>Parameter Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>milliSeconds</td>\\n                        <td>Number</td>\\n                        <td>The number of millliseconds to wait.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>callback</td>\\n                        <td>Function</td>\\n                        <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n            </td></tr>\\n            <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    browser.waitForAnimation();\\n};</code></pre></p>\\n                </td></tr>\\n        </table>\\n\\n        <p><hr width=\\\"90%\\\"></p>\\n\\n\\n\\n        <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <tr><td><b><h3><a id=\\\"commands-waitForCondition\\\">waitForCondition(condition, milliSeconds, timeout, message, callback)</a>\\n</h3></b></td></tr>\\n            <tr><td></td></tr>\\n            <tr><td>\\n                <p></p>\\nThe <code>waitForCondition</code> command receives a condition to check for, waits for a maximum time before timing out, and polls at a specified time interval. The condition returns either as a success or a timeout.\\n                <p></p>\\n            </td></tr>\\n            <tr><td>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Input</b><br></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Parameter Name</th>\\n                        <th>Parameter Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>condition</td>\\n                        <td>Function</td>\\n                        <td>The condition to check against.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>milliSeconds</td>\\n                        <td>Number</td>\\n                        <td><i>optional</i> The number of milliseconds to poll before timeout.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>timeout</td>\\n                        <td>Number</td>\\n                        <td><i>optional</i> The number of milliseconds between each poll.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>message</td>\\n                        <td>String</td>\\n                        <td><i>optional</i> The message to output.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>callback</td>\\n                        <td>Function</td>\\n                        <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n            </td></tr>\\n            <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    return browser.waitForCondition('return $.active;', 8000, function(result) {\\n        if (typeof callback === 'function') {\\n           callback.call(browser, result);\\n        }\\n    });\\n};</code></pre></p>\\n                </td></tr>\\n        </table>\\n\\n        <p><hr width=\\\"90%\\\"></p>\\n\\n\\n\\n        <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n            <tr><td><b><h3><a id=\\\"commands-waitUntilMobified\\\">waitUntilMobified(milliSeconds, callback)</a></h3></b></td></tr>\\n            <tr><td></td></tr>\\n            <tr><td>\\n                <p></p>\\nThe <code>waitUntilMobified</code> command will use the <code>waitForCondition</code> command to poll for the Mobify or Adaptive object on the page to ensure that the adaptation is complete. Use this command to browse to a page or if the page reloads.\\n                <p></p>\\n            </td></tr>\\n            <tr><td>\\n                <p></p>\\n                <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                    <caption><b>Input</b><br></caption>\\n                    <tr bgcolor=\\\"#C0C0C0\\\">\\n                        <th>Parameter Name</th>\\n                        <th>Parameter Type</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    <tr>\\n                        <td>milliSeconds</td>\\n                        <td>Number</td>\\n                        <td><i>optional</i> The number of milliseconds to poll before timeout.<br>If not specified, the default timeout is 10,000 milliseconds.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>callback</td>\\n                        <td>Function</td>\\n                        <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                    </tr>\\n                </table>\\n                <p></p>\\n            </td></tr>\\n            <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    browser.waitUntilMobified();\\n};</code></pre></p>\\n                </td></tr>\\n        </table>\\n\\n\\n        </td>\\n    </tr>\\n</table>\"\n}\n[/block]\n\n[block:html]\n{\n  \"html\": \"<table border=\\\"0\\\" width=\\\"80%\\\" align=\\\"center\\\">\\n    <tr>\\n        <td><h2><a id=\\\"assertions\\\">Custom Assertions</a></h2></td>\\n    </tr>\\n\\n    <tr>\\n        <td>\\n\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"assertions-elementsCount\\\">elementsCount(selector, expected, message, callback)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>elementsCount</code> assertion checks if the given selector is present the number of times that is expected for that selector to appear.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>selector</td>\\n                            <td>String</td>\\n                            <td>The CSS/Xpath selector to locate the element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>expected</td>\\n                            <td>Number</td>\\n                            <td>The expected number of times for the attribute to appear.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>message</td>\\n                            <td>String</td>\\n                            <td><i>optional</i> The message to output.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>callback</td>\\n                            <td>Function</td>\\n                            <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    browser.assert.elementsCount('#x-root', 1);\\n};</code></pre></p>\\n                    </td></tr>\\n            </table>\\n\\n            <p><hr width=\\\"90%\\\"></p>\\n\\n\\n\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"assertions-elementsPresent\\\">elementsPresent</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>elementsPresent</code> assertion checks if the given selectors are present. It returns a list of the missing selectors.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>selector</td>\\n                            <td>String</td>\\n                            <td>The CSS/Xpath selector to locate the element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>message</td>\\n                            <td>String</td>\\n                            <td><i>optional</i> The message to output.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>callback</td>\\n                            <td>Function</td>\\n                            <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <!-- table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>missingSelectors</td>\\n                            <td>Array</td>\\n                            <td>Outputs an array of strings. Each string is a missing selector.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    browser.assert.elementsPresent('#x-root', '#x-header', '#x-footer');\\n};</code></pre></p>\\n                    </td></tr>\\n            </table -->\\n            <p><hr width=\\\"90%\\\"></p>\\n\\n\\n\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"assertions-elementsVisible\\\">elementsVisible(selectors, callback)</a></h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>elementsVisible</code> assertion checks if one or more selectors are visible. It returns a list of one or more selectors that are <i>not</i> visible on the page.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>selectors</td>\\n                            <td>String</td>\\n                            <td>The CSS/Xpath selector to locate the element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>callback</td>\\n                            <td>Function</td>\\n                            <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                    <!-- table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Output</b></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>Array</td>\\n                            <td>An array of strings. Each string is a selector that is not visible on the page.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p -->\\n                </td></tr>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">this.demoTest = function (browser) {\\n    browser.assert.elementsVisible('#x-root', '#x-head');\\n};</code></pre></p>\\n                    </td></tr>\\n            </table>\\n\\n            <p><hr width=\\\"90%\\\"></p>\\n\\n\\n\\n            <table border=\\\"0\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                <tr><td><b><h3><a id=\\\"assertions-templateName\\\">templateName(expected, message, callback)</a>\\n</h3></b></td></tr>\\n                <tr><td></td></tr>\\n                <tr><td>\\n                    <p></p>\\nThe <code>templateName</code> assertion checks if the given template name is correct.\\n                    <p></p>\\n                </td></tr>\\n                <tr><td>\\n                    <p></p>\\n                    <table border=\\\"1\\\" width=\\\"90%\\\" align=\\\"center\\\">\\n                        <caption><b>Input</b><br></caption>\\n                        <tr bgcolor=\\\"#C0C0C0\\\">\\n                            <th>Parameter Name</th>\\n                            <th>Parameter Type</th>\\n                            <th>Description</th>\\n                        </tr>\\n                        <tr>\\n                            <td>expected</td>\\n                            <td>String</td>\\n                            <td>The expected value of the attribute to check.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>message</td>\\n                            <td>String</td>\\n                            <td><i>optional</i> A log message to display in the output.<br> If the parameter is not specified, a default message is displayed by default.\\n</td>\\n                        </tr>\\n                        <tr>\\n                            <td>callback</td>\\n                            <td>Function</td>\\n                            <td><i>optional</i> A function to call after the current command finishes execution.</td>\\n                        </tr>\\n                    </table>\\n                    <p></p>\\n                </td></tr>\\n                <tr><td><p><b>Code Sample:</b><br></p>\\n<p><pre><code class=\\\"language-javascript\\\">this.demoTest = function (client) {\\n    browser.assert.templateName('home');\\n};</code></pre></p>\\n                    </td></tr>\\n            </table>\\n\\n\\n\\n        </td>\\n    </tr>\\n</table>\"\n}\n[/block]",
        "excerpt": "Browse the custom Nightwatch.js commands and assertions that were created specifically to use with Adaptive.js technology.",
        "slug": "custom-nightwatchjs-api",
        "type": "basic",
        "title": "Custom Nightwatch.js API"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce5",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d18",
        "createdAt": "2015-03-19T19:19:40.355Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 2,
        "body": "Use Weinre to debug device-specific issues if the issue occurs on:\n\n* the stock Android Browser\n* Android devices before Android 4\n* iOS (but you do not have access to a Mac)\n* a Blackberry\n\n***\n\n## 1. Install Weinre\n\n1. On your computer, open a new Terminal (Mac) or Command Prompt (Windows).\n\n2. To install Weinre, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"npm -g install weinre\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nOr if you need administrative privileges, precede the command with `sudo` as follows:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"sudo npm -g install weinre\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n***\n\n## 2. Run a Local Weinre Server\n\n* To start Weinre, enter the following command on the command line:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"weinre --httpPort 8081 --boundHost your.IP.address\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\nEnsure that you replace the IP address for `boundHost` with your own IP address.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"To find your IP address, follow the steps in the Identify Your Computer's IP Address section in the [Preview your Project on a Device](doc:preview-on-device) tutorial.\",\n  \"title\": \"Find your IP Address\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Leave this command prompt open. It is running the server that is needed by the browser in the following tutorial steps.\"\n}\n[/block]\n***\n\n## 3. Add the Weinre tag to the Mobile Site\n\nThe Weinre tag looks like this:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \" <script src=\\\"http://your.IP.address:8081/target/target-script-min.js#anonymous\\\">\\n      ...\\n</script>\",\n      \"language\": \"html\"\n    }\n  ]\n}\n[/block]\n1. In your local development project directory, find the `adaptation/templates/base.dust` file.\n\n2. Open the `base.dust` file in a development editor.\n\n3. Paste the Weinre tag in the`scripts` block of the file.\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"Remove this script after you finish debugging.\"\n}\n[/block]\n***\n\n## 4. Open the Page for Debugging\n\n1. Open the web browser on your device.\n\n2. In the browser, go to the Mobify Preview at `http://preview.mobify.com`.\n\n3. Fill in the form fields to preview your local bundle.\n\n4. Click **\"Preview\"**.\n\n5. Navigate to the page for debugging.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Learn to [Preview a Local Server on your Computer](doc:preview-a-local-server-on-your-computer) or to [Preview a Local Adaptive.js Site on a Device](doc:preview-a-local-adaptivejs-site-on-a-device).\",\n  \"title\": \"Preview\"\n}\n[/block]\n***\n\n## 5. Inspect the Page\n\n1. In your desktop browser, go to the [Weinre server at http://localhost:8081/client/#anonymous](http://localhost:8081/client/#anonymous).\n\n2. On that page, navigate to **\"Access Points\"**.\n\n3. Choose **\"Debug Client User Interface\"**.\n\n4. Click **\"Elements\"**.\n\n***\n\nUse **Weinre** to inspect the page on your device.",
        "excerpt": "",
        "slug": "debug-with-weinre",
        "type": "basic",
        "title": "Debug on Legacy Android with the Stock Browser (and on Other Devices)"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce5",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d14",
        "createdAt": "2015-03-19T18:12:23.977Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 3,
        "body": "Here are our best practices for tests on various devices, device\nbrowsers, and device settings.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Learn to test individual features or bug fixes during development. Work through our [Preview a Local Adaptive.js Site on a Device](doc:preview-a-local-adaptivejs-site-on-a-device).\",\n  \"title\": \"Preview on a Device\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"System Test\",\n  \"body\": \"Once your build is ready for system testing, first [Create a New Bundle](doc:create-a-new-bundle) . Then [Preview a Bundle From Mobify Cloud on a Mobile Device](doc:preview-a-bundle-from-mobify-cloud-on-a-mobile-dev).\"\n}\n[/block]\n***\n\n## Manufacturers\n\nBefore you begin the test, check your Mobify tag to see what devices are\nsupported.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Because iOS and Android cover the majority of the current mobile market,\\nfocus on the most popular devices of these manufacturers during your tests.\"\n}\n[/block]\n1. In your local computer's browser, go to your website.\n\n2. Check that the **\"Page Source\"** on your browser to view the HTML source code of your\nsite.\n\nThe Mobify tag is at the top of the `<head>` section.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"    <!-- MOBIFY - DO NOT ALTER - PASTE IMMEDIATELY AFTER OPENING HEAD TAG -->\\n    ...\\n    <!-- END MOBIFY -->\",\n      \"language\": \"html\"\n    }\n  ]\n}\n[/block]\nThe list of devices that are supported is located inside a regular expression\nat the bottom of the Mobify tag. Typically, the regular expression will contain\nthe name of the device such as `Android` or `Blackberry`.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Ask your Customer Success Manager or Developer Advocate if you are not sure which devices are supported on your site.\"\n}\n[/block]\n***\n\n### Smartphone\n\nTypically smartphone builds support WebKit-based browsers only. The smartphones\nwith these browsers include:\n\n* iOS devices (iPod touch and iPhone)\n* Android smartphones\n* BlackBerry devices with WebKit\n\nAdaptive.js also works on Firefox OS and Windows Phone 8+ if these are enabled\nin the Mobify tag.\n\n***\n\n### Tablet\n\nTypically tablet builds support iPad.\n\nAdaptive.js also works on Android and Amazon Kindle Fire if those devices are\nenabled in the Mobify tag.\n\n***\n\n## Browsers\n\nAnalytics show that most smartphone users browser the web with the default\ndevice browser. To simulate typical user behaviour, test on the operating\nsystem default browser:\n\n* **iOS:** Safari\n* **< Android 4.3:** stock browser\n* **>= Android 4.3:** Chrome\n\nAdaptive.js also works on Firefox and Internet Explorer Mobile 10+, if these\nare enabled in the Mobify tag.\n\n***\n\n## Screen Orientation\n\nAnalytics show that most smartphone users browse the web in portrait mode. To\nsimulate typical user behaviour, test primarily in portrait mode.\n\nYou can test that landscape mode does not have visual defects or functionality\nproblems, however, leave user experience optimizations as a lower priority.\n\n***\n\n## Networks and Connections\n\nNetworks are a major role in the performance of a site so testing on various\ncarrier networks on various connections gives you a better idea of real-world\nperformance.\n\nSites load in different ways on different networks because the network might\noptimize performance by re-encoding CSS or JavaScript. For example, Sprint will\nignore cache headers unless “Cache-Control: no-transform” is explicitly set on\nthe web server.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Connect to a VPN for device tests to ensure that IP or location-based services perform correctly.\"\n}\n[/block]\n***\n\n## Services and Apps\n\n### App Integration\n\nDoes your site have app, Facebook login, or Twitter integration?\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Install the apps mentioned above with test accounts. Ensure that the integration is implemented correctly and that integration flow runs properly.\"\n}\n[/block]\n***\n\n### Services\n\nEnsure that services such as location for a store finder correctly report your\nlocation, or your distance to actual stores.\n\nWhat happens if a user does not allow access to his or her location on your\nmobile site? The usability of the site should not be affected by the user\nchoice.\n\n***\n\nDo you need more devices to test on? There are plenty of cloud-based device\ntest services available. These services offer free access to a limited set of\ndevices:\n\n* [DeviceAnywhere](http://portal.keynotedeviceanywhere.com/)\n* [Perfecto Mobile](http://www.perfectomobile.com/)\n\n***\n\n## Operating System Versions\n\nTo find out which operating system versions your site visitors most commonly\nuse, check your analytics.\n\nA good rule of thumb is to test the latest version of the operating system, and\nthen to include a test for the previous major version. For a more granular\napproach after those tests, test minor versions of each of the major releases\nof that operating system.\n\nAs of the most recent update of this document, Mobify tests focus on the\nfollowing mobile opeating system versions:\n\n* iOS: 7.0.x, 7.1.x and 8.x\n* Android: 4.x",
        "excerpt": "The best way to ensure that your mobile site works correctly on real devices is\nto test your mobile site directly on a device.",
        "slug": "device-testing-best-practices",
        "type": "basic",
        "title": "Device Testing Best Practices"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce5",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d15",
        "createdAt": "2015-03-19T18:26:34.832Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 4,
        "body": "## 1. General Components\n\nTest the functionality of the mobile site components across different devices.\nAlso, for each device you test, plan to test different browser versions.\n\nPay particular attention to:\n\n* modals (Pinny)\n* Bellows\n* carousels (Scooch)\n\nTypically, an issue with a component propagates as a problem throughout the\nentire device and OS.\n\n***\n\n## 2. Forms\n\nTest forms with particular scrutiny.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Ensure that the correct native keyboard is invoked for each field type.\"\n}\n[/block]\nThe corresponding keyboard and field types are:\n\n* numeric for number-only fields\n    * The postal/zip code field should be numeric **only** in the case where  the shipping is restricted to the US. If your site visitor is shipping to the UK or to Canada, he or she cannot complete checkout if the form does not allow alphabetic characters.\n* email-specific (with the `@` symbol) for email address fields\n* the `search` keyboard for search fields.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Ensure that each required form field is marked with an `*` asterisk character. At other times, only mark fields with an `optional` tag when they are optional and leave mandatory fields unmarked.\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Particularly for required form fields, scrutinize every possible error state.\"\n}\n[/block]\nCommon errors for required fields include:\n\n* incomplete data\n* invalid data\n* an empty field.\n\n***\n\n### A. Errors\n\nHighlight the form field with the error in red.  Display the associated error message close to the error field so that your site visitor corrects the faulty input.\n\nEnable scroll-to-field for form error correction. However, be careful because this feature tends to break on various browsers and devices.\n\nThe style of the displayed error messages is typically consistent across browsers and devices.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"To ensure the display of the correct styling, test your mobile site on the oldest browser version on the oldest device. Then test the newest browser version on the newest device.\"\n}\n[/block]\nIf both tests show the correct error styling, typically, the intermediate versions of browsers and devices also show the correct style.\n\n***\n\n## 3. Checkout Flow\n\nExecute a checkout flow test during each QA session of your site. The checkout flow is the most vital flow for an e-commerce site and therefore deserves your keenest attention.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Test the flow on every device and operating system that your mobile site version supports.\"\n}\n[/block]\nIf the option is available on your site, perform the test both as:\n\n* a registered site user and\n* a guest.\n\n***\n\n## 4. Data\n\nPortions of your site that require the browser to store data or to load a large quantity of data need attention during the QA process.\n\n***\n\n### A. Data Storage\n\nEnsure that changes apply correctly and that they are carried between devices for portions of your site that need to store data.\n\nMobile site elements that commonly need to store data include the\n\n* minicart\n* cart edit\n* account page\n* profile page\n* wishlist\n\nThese items need especially close scrutiny in your QA process if your site visitor edits them in a popup modal.\n\n***\n\n### B. Loading Data\n\nIdentify the page on your site with the highest load. A common example of a page with high load is a very long product listing page that contains hundreds of products.\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Scroll down as far as you can on a page with high load to ensure that the browser does not crash as it loads and stores the page data.\"\n}\n[/block]\n***\n\n## 5. Transitions\n\nIn all of the environments that your mobile site supports, test the page transitions, modal overlays, and loading interstitials.  Another common page transition for you to test is the behaviour of the \"Back\" button in various browsers and devices.\n\n***\n\n## 6. Site Elements\n\nTest the menus and flyouts on each page. Some common examples of these elements on e-commerce sites include:\n\n* global navigation\n* pop-down search\n* mini cart flyout.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Ensure that each element works correctly on its own. Then go on to access the elements one after another.\"\n}\n[/block]\nThese elements should all work together. Or they should work in such as way that if you open a second element, the first one cleanly closes.\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Older devices are slowed down by multiple requests.\"\n}\n[/block]\nOn a legacy device, destructively test places such as the\n\n* `search address` in the \"Checkout\" page\n* filters in the \"Listing\" page \n* product options in the \"Product\" page (for example, color and size)\n\n***\n\n### A. Commonly Broken Elements\n\nPortions of the site with many working pieces are particularly prone to functional issues especially across different OS versions and devices.\n\nMobile site elements that commonly break include:\n\n* filters on listing pages\n* color and size chips on product display page\n* zoom and pan feature for a product image\n    * Watch for this especially on older devices.\n* success notifications and modals\n* dealer locators and maps\n* hero carousels\n\nBe careful especially in the case where the height of the carousel adjusts for varying image size or text size.\n\n* chat\n\nIf present, chat is particularly high risk because of user interaction. It needs additional QA time.\n\n***\n\n## 7. External Resources\n\nBe aware of external vendor features that are incorporated directly into your site or that are linked as resources inside your site.\n\n***\n\n### Embedded External Resources\n\nCommon embedded site elements often include:\n\n* **Bazaarvoice:** for reviews\n* **RichRelevance:** for product suggestions (also known as \"you may also like...\")\n* image viewers\n* image carousels.\n\nThese elements are often neglected from rigorous tests on the mobile platform. Ensure these resources interact well on your mobile site version on different mobile devices.\n\n***\n\n### A. Linked External Resources\n\nCommonly linked external resources include:\n\n* Social sharing networks\n* PayPal\n\nVerify these external resources across multiple device versions and brands.\n\n***",
        "excerpt": "Test your mobile site's functionality.",
        "slug": "functional-testing-checklist",
        "type": "basic",
        "title": "Functional Testing Checklist"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce5",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d16",
        "createdAt": "2015-03-19T18:34:35.123Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "settings": "",
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 5,
        "body": "## Consistent Visual User Experience\n\n**Stylistic concerns are the foremost priority of mobile site User Acceptance\nTesting.** Therefore, pay close attention to the mock visuals of your mobile\nsite (if they are available to you). The success of your mobile e-commerce site\ndepends on it!\n\nThe goal of your mobile site is to facilitate the mobile shopping experience\nfor your customer. Your visitor wants to shop on a site that:\n\n* looks neat\n* is easy to navigate\n* responds quickly and appropriately to user interaction (This includes screen orientation or zooming.)\n* responds appropriately to input\n\nThe quality of the visual experience inspires confidence in a customer that the site is a safe place to make a purchase.\n\n***\n\n## Screen Orientation\n\nPay special attention to screen orientation changes and to screen transitions. Ensure that page elements adjust gracefully on varying screen widths on different devices.\n\nAll portions of the page should adjust to fit the changed screen width regardless of how many times the change is made or how quickly. This includes modals and images.\n\nModals, notifications and alerts are particularly vulnerable to orientation changes.  Be aware of this as you test on Android devices with version 4.2 and lower.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Best Practice: Images\",\n  \"body\": \"Center your images. This way, you avoid images that cannot stretch to fit the new screen width due to loss-of-quality. This is a particular concern on phablets and retina display devices.\"\n}\n[/block]\n***\n\n## Visual Elements\n\nThe consistent style of all of the visual elements of your site creates a professional and trustworthy appearance. By contrast, loss of font and style between different parts of your site causes the site to look inelegant and disorganized.\n\n***\n\n### Errors\n\nEstablish a uniform style across your entire mobile site for errors and error messages.\n\nError elements that are prone to design issues include:\n\n* buttons\n* input fields\n* fonts\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"As a best practice, use simple and standard fonts. Fonts need to be carried between devices correctly.\",\n  \"title\": \"Best Practice: Fonts\"\n}\n[/block]\n***\n\n### Images\n\nConsider the quality of your images for high-resolution or retina devices. A graphic cannot look pixelated.\n\nAs mentioned before, center your images instead of stretching them on screen rotation.\n\n***\n\n### Icons\n\nEnsure that common icons such as `menu`,`magnifying glass`, and `info` display correctly in all browsers across all of your supported operating systems and devices.\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Icon fonts are sometimes referenced differently on different devices.\"\n}\n[/block]\n***\n\n## Common Pitfalls to Avoid\n\nThe goal of your mobile e-commerce site is to inspire confidence in the user for a successful mobile checkout. However, here are a few things that are sure to make your site visitor abandon her shopping cart and toss away her device in frustration!\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"Do not let any page elements overlap or clip each other.\",\n  \"title\": \"Pitfall: Overlapping Elements\"\n}\n[/block]\nWhen one page element overlaps another, the site becomes illegible. More than that, your site can actually lose its intended functionality. For example, if your **\"More Information\"** button overlaps the **\"Add to Cart\"** button on a product display page, your site visitor cannot get his item into the cart. Forget about successful checkout!\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"Do not have any page whose width exceeds the width of the device screen.\",\n  \"title\": \"Pitfall: Page Width\"\n}\n[/block]\nA page that is wider than the screen enables horizontal scrolling. Pop-up modals with image zoom are exceptions to this rule. Check these effects on low resolution screens.",
        "excerpt": "Ensure a consistent visual experience for your site visitors.",
        "slug": "visual-testing-checklist",
        "type": "basic",
        "title": "Visual Testing Checklist"
      },
      {
        "version": "5568d523d33aad0d00ec8ce4",
        "category": "5568d524d33aad0d00ec8ce5",
        "__v": 0,
        "project": "54da9ecd44b1090d00072b60",
        "user": "54daa360ee3b8419007e45ff",
        "updates": [],
        "_id": "5568d525d33aad0d00ec8d17",
        "createdAt": "2015-03-19T18:52:16.727Z",
        "link_external": false,
        "link_url": "",
        "githubsync": "",
        "sync_unique": "",
        "hidden": false,
        "api": {
          "results": {
            "codes": [
              {
                "status": 200,
                "language": "json",
                "code": "{}",
                "name": ""
              },
              {
                "status": 400,
                "language": "json",
                "code": "{}",
                "name": ""
              }
            ]
          },
          "auth": "required",
          "params": [],
          "url": ""
        },
        "order": 6,
        "body": "This checklist guides you through the key aspects of the conversion test.\n\n***\n\n## A. Staging Workflow\n\nStaging is useful for previews and tests. However, you always want the checkout flow to work in the real world for your site visitors. For this reason, only use staging to verify items that are not practical in production.\n\nTest the checkout completion flow and the reservation flow in staging.\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Staging is not recommended as a reliable test environment.\"\n}\n[/block]\n\n\nThe final checkout flow needs to be done on the production server.\n\n***\n\n### a. Checkout Flow\n\nVerify that your site visitors can complete checkout successfully, from the main page to the confirmation page.\n\nTest the checkout flow with the following scenarios:\n\n* As a registered user that has signed in\n* As guest (if applicable)\n* Apply a discount code\n* Apply a gift card\n* Select various product types and quantities. Verify that the selection displays correctly on the confirmation page.\n\n***\n\n### b. Reservation Flow\n\nVerify that the reservation flow for hotel or travel sites allows your visitors to complete their bookings successfully.\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"If you are going through the reservation flow on the production server, remember to cancel your order immediately after the test.\"\n}\n[/block]\n\n***\n\n## B. Production Workflow\n\nEnsure that you test each of these usage scenarios for your mobile site.\n\n***\n\n### a. Search Flow\n\nBegin with the initial search form submission.\n\nFollow through until the **\"Add to Cart\"** phase to eliminate possible errors.\n\n***\n\n### b. Wishlist Flow\n\nStart by adding several items to a wishlist.\n\nThen add the items to cart from the wishlist.\n\nProceed with the checkout flow.\n\n***\n\n### c. Cart Flow\n\nBegin with a simple **\"Add to Cart\"** with several items.\n\nThen selectively remove some of these items from the cart.\n\nEdit the quantity of the items in the cart.\n\nChange the size or color of the items in the cart, where the options are available.\n\n***\n\n### d. Unsuccessful Checkout Flow\n\nPurposely cause the checkout to fail, in both the scenario of a registered site user that is signed in, and as a guest.\n\nAfter the failure, inspect the following error elements:\n\n* error messaging\n* invalid addresses\n* payment options\n* and discount codes\n\nVisually confirm that the style of all of these error elements is consistent.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Visual Testing\",\n  \"body\": \"Read about error element styling in our [Visual Testing Checklist](doc:visual-testing-checklist).\"\n}\n[/block]\n***\n\n### e. Store Location\n\nTest the **\"Store Pickup\"** option on your mobile site delivery page.\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"Do the test first with the location service enabled on the mobile device. Repeat the test with the location service disabled.\"\n}\n[/block]\nIf the **“Find in Store”** function is available on product description page, create a separate flow to test this feature from that page as the starting point.\n\nCheck that the map and direction features display correctly.",
        "excerpt": "Conversion is the most vital aspect of your mobile e-commerce site. Ensure that the checkout flow on your site works in all circumstances.",
        "slug": "testing-conversion-flows",
        "type": "basic",
        "title": "Testing Conversion Flows"
      }
    ],
    "project": "54da9ecd44b1090d00072b60",
    "reference": false,
    "slug": "manual-testing",
    "title": "Manual Testing",
    "version": "5568d523d33aad0d00ec8ce4"
  }
]